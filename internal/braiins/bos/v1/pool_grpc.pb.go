// Copyright (C) 2023  Braiins Systems s.r.o.
//
// This file is part of Braiins Open-Source Initiative (BOSI).
//
// BOSI is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
// Please, keep in mind that we may also license BOSI or any part thereof
// under a proprietary license. For more information on the terms and conditions
// of such proprietary license or if you have any other questions, please
// contact us at opensource@braiins.com.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: bos/v1/pool.proto

package bos_proto_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PoolService_GetPoolGroups_FullMethodName   = "/braiins.bos.v1.PoolService/GetPoolGroups"
	PoolService_CreatePoolGroup_FullMethodName = "/braiins.bos.v1.PoolService/CreatePoolGroup"
	PoolService_UpdatePoolGroup_FullMethodName = "/braiins.bos.v1.PoolService/UpdatePoolGroup"
	PoolService_RemovePoolGroup_FullMethodName = "/braiins.bos.v1.PoolService/RemovePoolGroup"
	PoolService_SetPoolGroups_FullMethodName   = "/braiins.bos.v1.PoolService/SetPoolGroups"
)

// PoolServiceClient is the client API for PoolService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PoolServiceClient interface {
	// Read method to get current pool groups data
	GetPoolGroups(ctx context.Context, in *GetPoolGroupsRequest, opts ...grpc.CallOption) (*GetPoolGroupsResponse, error)
	// Method to create pool group
	CreatePoolGroup(ctx context.Context, in *CreatePoolGroupRequest, opts ...grpc.CallOption) (*CreatePoolGroupResponse, error)
	// Method to update pool group
	UpdatePoolGroup(ctx context.Context, in *UpdatePoolGroupRequest, opts ...grpc.CallOption) (*UpdatePoolGroupResponse, error)
	// Method to remove pool group
	RemovePoolGroup(ctx context.Context, in *RemovePoolGroupRequest, opts ...grpc.CallOption) (*RemovePoolGroupResponse, error)
	// Method to set pool groups. Existing pool groups will be completely replaced with new groups.
	SetPoolGroups(ctx context.Context, in *SetPoolGroupsRequest, opts ...grpc.CallOption) (*SetPoolGroupsResponse, error)
}

type poolServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPoolServiceClient(cc grpc.ClientConnInterface) PoolServiceClient {
	return &poolServiceClient{cc}
}

func (c *poolServiceClient) GetPoolGroups(ctx context.Context, in *GetPoolGroupsRequest, opts ...grpc.CallOption) (*GetPoolGroupsResponse, error) {
	out := new(GetPoolGroupsResponse)
	err := c.cc.Invoke(ctx, PoolService_GetPoolGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolServiceClient) CreatePoolGroup(ctx context.Context, in *CreatePoolGroupRequest, opts ...grpc.CallOption) (*CreatePoolGroupResponse, error) {
	out := new(CreatePoolGroupResponse)
	err := c.cc.Invoke(ctx, PoolService_CreatePoolGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolServiceClient) UpdatePoolGroup(ctx context.Context, in *UpdatePoolGroupRequest, opts ...grpc.CallOption) (*UpdatePoolGroupResponse, error) {
	out := new(UpdatePoolGroupResponse)
	err := c.cc.Invoke(ctx, PoolService_UpdatePoolGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolServiceClient) RemovePoolGroup(ctx context.Context, in *RemovePoolGroupRequest, opts ...grpc.CallOption) (*RemovePoolGroupResponse, error) {
	out := new(RemovePoolGroupResponse)
	err := c.cc.Invoke(ctx, PoolService_RemovePoolGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolServiceClient) SetPoolGroups(ctx context.Context, in *SetPoolGroupsRequest, opts ...grpc.CallOption) (*SetPoolGroupsResponse, error) {
	out := new(SetPoolGroupsResponse)
	err := c.cc.Invoke(ctx, PoolService_SetPoolGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PoolServiceServer is the server API for PoolService service.
// All implementations must embed UnimplementedPoolServiceServer
// for forward compatibility
type PoolServiceServer interface {
	// Read method to get current pool groups data
	GetPoolGroups(context.Context, *GetPoolGroupsRequest) (*GetPoolGroupsResponse, error)
	// Method to create pool group
	CreatePoolGroup(context.Context, *CreatePoolGroupRequest) (*CreatePoolGroupResponse, error)
	// Method to update pool group
	UpdatePoolGroup(context.Context, *UpdatePoolGroupRequest) (*UpdatePoolGroupResponse, error)
	// Method to remove pool group
	RemovePoolGroup(context.Context, *RemovePoolGroupRequest) (*RemovePoolGroupResponse, error)
	// Method to set pool groups. Existing pool groups will be completely replaced with new groups.
	SetPoolGroups(context.Context, *SetPoolGroupsRequest) (*SetPoolGroupsResponse, error)
	mustEmbedUnimplementedPoolServiceServer()
}

// UnimplementedPoolServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPoolServiceServer struct {
}

func (UnimplementedPoolServiceServer) GetPoolGroups(context.Context, *GetPoolGroupsRequest) (*GetPoolGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPoolGroups not implemented")
}
func (UnimplementedPoolServiceServer) CreatePoolGroup(context.Context, *CreatePoolGroupRequest) (*CreatePoolGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePoolGroup not implemented")
}
func (UnimplementedPoolServiceServer) UpdatePoolGroup(context.Context, *UpdatePoolGroupRequest) (*UpdatePoolGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePoolGroup not implemented")
}
func (UnimplementedPoolServiceServer) RemovePoolGroup(context.Context, *RemovePoolGroupRequest) (*RemovePoolGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePoolGroup not implemented")
}
func (UnimplementedPoolServiceServer) SetPoolGroups(context.Context, *SetPoolGroupsRequest) (*SetPoolGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPoolGroups not implemented")
}
func (UnimplementedPoolServiceServer) mustEmbedUnimplementedPoolServiceServer() {}

// UnsafePoolServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PoolServiceServer will
// result in compilation errors.
type UnsafePoolServiceServer interface {
	mustEmbedUnimplementedPoolServiceServer()
}

func RegisterPoolServiceServer(s grpc.ServiceRegistrar, srv PoolServiceServer) {
	s.RegisterService(&PoolService_ServiceDesc, srv)
}

func _PoolService_GetPoolGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPoolGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolServiceServer).GetPoolGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoolService_GetPoolGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolServiceServer).GetPoolGroups(ctx, req.(*GetPoolGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolService_CreatePoolGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePoolGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolServiceServer).CreatePoolGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoolService_CreatePoolGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolServiceServer).CreatePoolGroup(ctx, req.(*CreatePoolGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolService_UpdatePoolGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePoolGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolServiceServer).UpdatePoolGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoolService_UpdatePoolGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolServiceServer).UpdatePoolGroup(ctx, req.(*UpdatePoolGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolService_RemovePoolGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePoolGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolServiceServer).RemovePoolGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoolService_RemovePoolGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolServiceServer).RemovePoolGroup(ctx, req.(*RemovePoolGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolService_SetPoolGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPoolGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolServiceServer).SetPoolGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoolService_SetPoolGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolServiceServer).SetPoolGroups(ctx, req.(*SetPoolGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PoolService_ServiceDesc is the grpc.ServiceDesc for PoolService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PoolService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "braiins.bos.v1.PoolService",
	HandlerType: (*PoolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPoolGroups",
			Handler:    _PoolService_GetPoolGroups_Handler,
		},
		{
			MethodName: "CreatePoolGroup",
			Handler:    _PoolService_CreatePoolGroup_Handler,
		},
		{
			MethodName: "UpdatePoolGroup",
			Handler:    _PoolService_UpdatePoolGroup_Handler,
		},
		{
			MethodName: "RemovePoolGroup",
			Handler:    _PoolService_RemovePoolGroup_Handler,
		},
		{
			MethodName: "SetPoolGroups",
			Handler:    _PoolService_SetPoolGroups_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bos/v1/pool.proto",
}
