// Copyright (C) 2024  Braiins Systems s.r.o.
//
// This file is part of Braiins Open-Source Initiative (BOSI).
//
// BOSI is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
// Please, keep in mind that we may also license BOSI or any part thereof
// under a proprietary license. For more information on the terms and conditions
// of such proprietary license or if you have any other questions, please
// contact us at opensource@braiins.com.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: bos/v1/network.proto

package bos_proto_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NetworkProtocol int32

const (
	NetworkProtocol_NETWORK_PROTOCOL_UNSPECIFIED NetworkProtocol = 0
	NetworkProtocol_NETWORK_PROTOCOL_DHCP        NetworkProtocol = 1
	NetworkProtocol_NETWORK_PROTOCOL_STATIC      NetworkProtocol = 2
)

// Enum value maps for NetworkProtocol.
var (
	NetworkProtocol_name = map[int32]string{
		0: "NETWORK_PROTOCOL_UNSPECIFIED",
		1: "NETWORK_PROTOCOL_DHCP",
		2: "NETWORK_PROTOCOL_STATIC",
	}
	NetworkProtocol_value = map[string]int32{
		"NETWORK_PROTOCOL_UNSPECIFIED": 0,
		"NETWORK_PROTOCOL_DHCP":        1,
		"NETWORK_PROTOCOL_STATIC":      2,
	}
)

func (x NetworkProtocol) Enum() *NetworkProtocol {
	p := new(NetworkProtocol)
	*p = x
	return p
}

func (x NetworkProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_bos_v1_network_proto_enumTypes[0].Descriptor()
}

func (NetworkProtocol) Type() protoreflect.EnumType {
	return &file_bos_v1_network_proto_enumTypes[0]
}

func (x NetworkProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkProtocol.Descriptor instead.
func (NetworkProtocol) EnumDescriptor() ([]byte, []int) {
	return file_bos_v1_network_proto_rawDescGZIP(), []int{0}
}

type GetNetworkConfigurationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetNetworkConfigurationRequest) Reset() {
	*x = GetNetworkConfigurationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_network_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNetworkConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkConfigurationRequest) ProtoMessage() {}

func (x *GetNetworkConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_network_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkConfigurationRequest.ProtoReflect.Descriptor instead.
func (*GetNetworkConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_bos_v1_network_proto_rawDescGZIP(), []int{0}
}

type GetNetworkConfigurationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network *NetworkConfiguration `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
}

func (x *GetNetworkConfigurationResponse) Reset() {
	*x = GetNetworkConfigurationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_network_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNetworkConfigurationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkConfigurationResponse) ProtoMessage() {}

func (x *GetNetworkConfigurationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_network_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkConfigurationResponse.ProtoReflect.Descriptor instead.
func (*GetNetworkConfigurationResponse) Descriptor() ([]byte, []int) {
	return file_bos_v1_network_proto_rawDescGZIP(), []int{1}
}

func (x *GetNetworkConfigurationResponse) GetNetwork() *NetworkConfiguration {
	if x != nil {
		return x.Network
	}
	return nil
}

type SetNetworkConfigurationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Network protocol. Existing value will be preserved if this field is not set.
	//
	// Types that are assignable to Protocol:
	//
	//	*SetNetworkConfigurationRequest_Dhcp
	//	*SetNetworkConfigurationRequest_Static
	Protocol isSetNetworkConfigurationRequest_Protocol `protobuf_oneof:"protocol"`
	// Hostname. Existing value will be preserved if this field is not set.
	Hostname *string `protobuf:"bytes,3,opt,name=hostname,proto3,oneof" json:"hostname,omitempty"`
}

func (x *SetNetworkConfigurationRequest) Reset() {
	*x = SetNetworkConfigurationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_network_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNetworkConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNetworkConfigurationRequest) ProtoMessage() {}

func (x *SetNetworkConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_network_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNetworkConfigurationRequest.ProtoReflect.Descriptor instead.
func (*SetNetworkConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_bos_v1_network_proto_rawDescGZIP(), []int{2}
}

func (m *SetNetworkConfigurationRequest) GetProtocol() isSetNetworkConfigurationRequest_Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (x *SetNetworkConfigurationRequest) GetDhcp() *Dhcp {
	if x, ok := x.GetProtocol().(*SetNetworkConfigurationRequest_Dhcp); ok {
		return x.Dhcp
	}
	return nil
}

func (x *SetNetworkConfigurationRequest) GetStatic() *Static {
	if x, ok := x.GetProtocol().(*SetNetworkConfigurationRequest_Static); ok {
		return x.Static
	}
	return nil
}

func (x *SetNetworkConfigurationRequest) GetHostname() string {
	if x != nil && x.Hostname != nil {
		return *x.Hostname
	}
	return ""
}

type isSetNetworkConfigurationRequest_Protocol interface {
	isSetNetworkConfigurationRequest_Protocol()
}

type SetNetworkConfigurationRequest_Dhcp struct {
	Dhcp *Dhcp `protobuf:"bytes,1,opt,name=dhcp,proto3,oneof"`
}

type SetNetworkConfigurationRequest_Static struct {
	Static *Static `protobuf:"bytes,2,opt,name=static,proto3,oneof"`
}

func (*SetNetworkConfigurationRequest_Dhcp) isSetNetworkConfigurationRequest_Protocol() {}

func (*SetNetworkConfigurationRequest_Static) isSetNetworkConfigurationRequest_Protocol() {}

type SetNetworkConfigurationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network *NetworkConfiguration `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
}

func (x *SetNetworkConfigurationResponse) Reset() {
	*x = SetNetworkConfigurationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_network_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNetworkConfigurationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNetworkConfigurationResponse) ProtoMessage() {}

func (x *SetNetworkConfigurationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_network_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNetworkConfigurationResponse.ProtoReflect.Descriptor instead.
func (*SetNetworkConfigurationResponse) Descriptor() ([]byte, []int) {
	return file_bos_v1_network_proto_rawDescGZIP(), []int{3}
}

func (x *SetNetworkConfigurationResponse) GetNetwork() *NetworkConfiguration {
	if x != nil {
		return x.Network
	}
	return nil
}

type NetworkConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Network protocol
	//
	// Types that are assignable to Protocol:
	//
	//	*NetworkConfiguration_Dhcp
	//	*NetworkConfiguration_Static
	Protocol isNetworkConfiguration_Protocol `protobuf_oneof:"protocol"`
	// Hostname
	Hostname string `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (x *NetworkConfiguration) Reset() {
	*x = NetworkConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_network_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkConfiguration) ProtoMessage() {}

func (x *NetworkConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_network_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkConfiguration.ProtoReflect.Descriptor instead.
func (*NetworkConfiguration) Descriptor() ([]byte, []int) {
	return file_bos_v1_network_proto_rawDescGZIP(), []int{4}
}

func (m *NetworkConfiguration) GetProtocol() isNetworkConfiguration_Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (x *NetworkConfiguration) GetDhcp() *Dhcp {
	if x, ok := x.GetProtocol().(*NetworkConfiguration_Dhcp); ok {
		return x.Dhcp
	}
	return nil
}

func (x *NetworkConfiguration) GetStatic() *Static {
	if x, ok := x.GetProtocol().(*NetworkConfiguration_Static); ok {
		return x.Static
	}
	return nil
}

func (x *NetworkConfiguration) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

type isNetworkConfiguration_Protocol interface {
	isNetworkConfiguration_Protocol()
}

type NetworkConfiguration_Dhcp struct {
	Dhcp *Dhcp `protobuf:"bytes,1,opt,name=dhcp,proto3,oneof"`
}

type NetworkConfiguration_Static struct {
	Static *Static `protobuf:"bytes,2,opt,name=static,proto3,oneof"`
}

func (*NetworkConfiguration_Dhcp) isNetworkConfiguration_Protocol() {}

func (*NetworkConfiguration_Static) isNetworkConfiguration_Protocol() {}

type Dhcp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Dhcp) Reset() {
	*x = Dhcp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_network_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dhcp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dhcp) ProtoMessage() {}

func (x *Dhcp) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_network_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dhcp.ProtoReflect.Descriptor instead.
func (*Dhcp) Descriptor() ([]byte, []int) {
	return file_bos_v1_network_proto_rawDescGZIP(), []int{5}
}

type Static struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IP address
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Netmask
	Netmask string `protobuf:"bytes,2,opt,name=netmask,proto3" json:"netmask,omitempty"`
	// Gateway
	Gateway string `protobuf:"bytes,3,opt,name=gateway,proto3" json:"gateway,omitempty"`
	// DNS servers
	DnsServers []string `protobuf:"bytes,4,rep,name=dns_servers,json=dnsServers,proto3" json:"dns_servers,omitempty"`
}

func (x *Static) Reset() {
	*x = Static{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_network_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Static) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Static) ProtoMessage() {}

func (x *Static) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_network_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Static.ProtoReflect.Descriptor instead.
func (*Static) Descriptor() ([]byte, []int) {
	return file_bos_v1_network_proto_rawDescGZIP(), []int{6}
}

func (x *Static) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Static) GetNetmask() string {
	if x != nil {
		return x.Netmask
	}
	return ""
}

func (x *Static) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *Static) GetDnsServers() []string {
	if x != nil {
		return x.DnsServers
	}
	return nil
}

type GetNetworkInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetNetworkInfoRequest) Reset() {
	*x = GetNetworkInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_network_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNetworkInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkInfoRequest) ProtoMessage() {}

func (x *GetNetworkInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_network_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkInfoRequest.ProtoReflect.Descriptor instead.
func (*GetNetworkInfoRequest) Descriptor() ([]byte, []int) {
	return file_bos_v1_network_proto_rawDescGZIP(), []int{7}
}

// Response message for GetCurrentNetworkConfiguration
// Represents the current network configuration for the default network interface.
// Only IPv4 is supported.
type GetNetworkInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the network interface
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// MAC address of the network interface
	MacAddress *string `protobuf:"bytes,2,opt,name=mac_address,json=macAddress,proto3,oneof" json:"mac_address,omitempty"`
	// Miner hostname
	Hostname *string `protobuf:"bytes,3,opt,name=hostname,proto3,oneof" json:"hostname,omitempty"`
	// Network protocol
	Protocol *NetworkProtocol `protobuf:"varint,4,opt,name=protocol,proto3,enum=braiins.bos.v1.NetworkProtocol,oneof" json:"protocol,omitempty"`
	// List of configured DNS servers
	DnsServers []string `protobuf:"bytes,5,rep,name=dns_servers,json=dnsServers,proto3" json:"dns_servers,omitempty"`
	// List of assigned IP addresses
	Networks []*IpNetwork `protobuf:"bytes,6,rep,name=networks,proto3" json:"networks,omitempty"`
	// Default gateway/route for the interface
	DefaultGateway *string `protobuf:"bytes,7,opt,name=default_gateway,json=defaultGateway,proto3,oneof" json:"default_gateway,omitempty"`
}

func (x *GetNetworkInfoResponse) Reset() {
	*x = GetNetworkInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_network_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNetworkInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkInfoResponse) ProtoMessage() {}

func (x *GetNetworkInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_network_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkInfoResponse.ProtoReflect.Descriptor instead.
func (*GetNetworkInfoResponse) Descriptor() ([]byte, []int) {
	return file_bos_v1_network_proto_rawDescGZIP(), []int{8}
}

func (x *GetNetworkInfoResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetNetworkInfoResponse) GetMacAddress() string {
	if x != nil && x.MacAddress != nil {
		return *x.MacAddress
	}
	return ""
}

func (x *GetNetworkInfoResponse) GetHostname() string {
	if x != nil && x.Hostname != nil {
		return *x.Hostname
	}
	return ""
}

func (x *GetNetworkInfoResponse) GetProtocol() NetworkProtocol {
	if x != nil && x.Protocol != nil {
		return *x.Protocol
	}
	return NetworkProtocol_NETWORK_PROTOCOL_UNSPECIFIED
}

func (x *GetNetworkInfoResponse) GetDnsServers() []string {
	if x != nil {
		return x.DnsServers
	}
	return nil
}

func (x *GetNetworkInfoResponse) GetNetworks() []*IpNetwork {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *GetNetworkInfoResponse) GetDefaultGateway() string {
	if x != nil && x.DefaultGateway != nil {
		return *x.DefaultGateway
	}
	return ""
}

type IpNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Netmask string `protobuf:"bytes,2,opt,name=netmask,proto3" json:"netmask,omitempty"`
}

func (x *IpNetwork) Reset() {
	*x = IpNetwork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_network_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpNetwork) ProtoMessage() {}

func (x *IpNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_network_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpNetwork.ProtoReflect.Descriptor instead.
func (*IpNetwork) Descriptor() ([]byte, []int) {
	return file_bos_v1_network_proto_rawDescGZIP(), []int{9}
}

func (x *IpNetwork) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *IpNetwork) GetNetmask() string {
	if x != nil {
		return x.Netmask
	}
	return ""
}

var File_bos_v1_network_proto protoreflect.FileDescriptor

var file_bos_v1_network_proto_rawDesc = []byte{
	0x0a, 0x14, 0x62, 0x6f, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e,
	0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x22, 0x20, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x61, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62,
	0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0xb8, 0x01, 0x0a, 0x1e,
	0x53, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a,
	0x0a, 0x04, 0x64, 0x68, 0x63, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62,
	0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x68,
	0x63, 0x70, 0x48, 0x00, 0x52, 0x04, 0x64, 0x68, 0x63, 0x70, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x72, 0x61,
	0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x12, 0x1f, 0x0a, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x61, 0x0a, 0x1f, 0x53, 0x65, 0x74, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x72, 0x61,
	0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x9c, 0x01, 0x0a, 0x14, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x68, 0x63, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x48, 0x00, 0x52, 0x04, 0x64, 0x68, 0x63, 0x70, 0x12, 0x30,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x06, 0x0a, 0x04, 0x44, 0x68, 0x63, 0x70,
	0x22, 0x77, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x18,
	0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0x17, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xf9, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x62, 0x72, 0x61,
	0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x48, 0x02, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6e,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x70, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x12, 0x2c, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0e, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x88, 0x01, 0x01,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x22, 0x3f,
	0x0a, 0x09, 0x49, 0x70, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x2a,
	0x6b, 0x0a, 0x0f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x12, 0x20, 0x0a, 0x1c, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x44, 0x48, 0x43, 0x50, 0x10, 0x01, 0x12,
	0x1b, 0x0a, 0x17, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x02, 0x32, 0xe9, 0x02, 0x0a,
	0x0e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x7a, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x62, 0x72, 0x61,
	0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x62, 0x72, 0x61,
	0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x17, 0x53,
	0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73,
	0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73,
	0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x2e, 0x62, 0x72, 0x61, 0x69,
	0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2f, 0x62,
	0x6f, 0x73, 0x2d, 0x70, 0x6c, 0x75, 0x73, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x72, 0x61, 0x69,
	0x69, 0x6e, 0x73, 0x2f, 0x62, 0x6f, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x62, 0x6f, 0x73, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bos_v1_network_proto_rawDescOnce sync.Once
	file_bos_v1_network_proto_rawDescData = file_bos_v1_network_proto_rawDesc
)

func file_bos_v1_network_proto_rawDescGZIP() []byte {
	file_bos_v1_network_proto_rawDescOnce.Do(func() {
		file_bos_v1_network_proto_rawDescData = protoimpl.X.CompressGZIP(file_bos_v1_network_proto_rawDescData)
	})
	return file_bos_v1_network_proto_rawDescData
}

var file_bos_v1_network_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_bos_v1_network_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_bos_v1_network_proto_goTypes = []interface{}{
	(NetworkProtocol)(0),                    // 0: braiins.bos.v1.NetworkProtocol
	(*GetNetworkConfigurationRequest)(nil),  // 1: braiins.bos.v1.GetNetworkConfigurationRequest
	(*GetNetworkConfigurationResponse)(nil), // 2: braiins.bos.v1.GetNetworkConfigurationResponse
	(*SetNetworkConfigurationRequest)(nil),  // 3: braiins.bos.v1.SetNetworkConfigurationRequest
	(*SetNetworkConfigurationResponse)(nil), // 4: braiins.bos.v1.SetNetworkConfigurationResponse
	(*NetworkConfiguration)(nil),            // 5: braiins.bos.v1.NetworkConfiguration
	(*Dhcp)(nil),                            // 6: braiins.bos.v1.Dhcp
	(*Static)(nil),                          // 7: braiins.bos.v1.Static
	(*GetNetworkInfoRequest)(nil),           // 8: braiins.bos.v1.GetNetworkInfoRequest
	(*GetNetworkInfoResponse)(nil),          // 9: braiins.bos.v1.GetNetworkInfoResponse
	(*IpNetwork)(nil),                       // 10: braiins.bos.v1.IpNetwork
}
var file_bos_v1_network_proto_depIdxs = []int32{
	5,  // 0: braiins.bos.v1.GetNetworkConfigurationResponse.network:type_name -> braiins.bos.v1.NetworkConfiguration
	6,  // 1: braiins.bos.v1.SetNetworkConfigurationRequest.dhcp:type_name -> braiins.bos.v1.Dhcp
	7,  // 2: braiins.bos.v1.SetNetworkConfigurationRequest.static:type_name -> braiins.bos.v1.Static
	5,  // 3: braiins.bos.v1.SetNetworkConfigurationResponse.network:type_name -> braiins.bos.v1.NetworkConfiguration
	6,  // 4: braiins.bos.v1.NetworkConfiguration.dhcp:type_name -> braiins.bos.v1.Dhcp
	7,  // 5: braiins.bos.v1.NetworkConfiguration.static:type_name -> braiins.bos.v1.Static
	0,  // 6: braiins.bos.v1.GetNetworkInfoResponse.protocol:type_name -> braiins.bos.v1.NetworkProtocol
	10, // 7: braiins.bos.v1.GetNetworkInfoResponse.networks:type_name -> braiins.bos.v1.IpNetwork
	1,  // 8: braiins.bos.v1.NetworkService.GetNetworkConfiguration:input_type -> braiins.bos.v1.GetNetworkConfigurationRequest
	3,  // 9: braiins.bos.v1.NetworkService.SetNetworkConfiguration:input_type -> braiins.bos.v1.SetNetworkConfigurationRequest
	8,  // 10: braiins.bos.v1.NetworkService.GetNetworkInfo:input_type -> braiins.bos.v1.GetNetworkInfoRequest
	2,  // 11: braiins.bos.v1.NetworkService.GetNetworkConfiguration:output_type -> braiins.bos.v1.GetNetworkConfigurationResponse
	4,  // 12: braiins.bos.v1.NetworkService.SetNetworkConfiguration:output_type -> braiins.bos.v1.SetNetworkConfigurationResponse
	9,  // 13: braiins.bos.v1.NetworkService.GetNetworkInfo:output_type -> braiins.bos.v1.GetNetworkInfoResponse
	11, // [11:14] is the sub-list for method output_type
	8,  // [8:11] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_bos_v1_network_proto_init() }
func file_bos_v1_network_proto_init() {
	if File_bos_v1_network_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bos_v1_network_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNetworkConfigurationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_network_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNetworkConfigurationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_network_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNetworkConfigurationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_network_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNetworkConfigurationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_network_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_network_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dhcp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_network_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Static); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_network_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNetworkInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_network_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNetworkInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_network_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpNetwork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bos_v1_network_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*SetNetworkConfigurationRequest_Dhcp)(nil),
		(*SetNetworkConfigurationRequest_Static)(nil),
	}
	file_bos_v1_network_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*NetworkConfiguration_Dhcp)(nil),
		(*NetworkConfiguration_Static)(nil),
	}
	file_bos_v1_network_proto_msgTypes[8].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bos_v1_network_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bos_v1_network_proto_goTypes,
		DependencyIndexes: file_bos_v1_network_proto_depIdxs,
		EnumInfos:         file_bos_v1_network_proto_enumTypes,
		MessageInfos:      file_bos_v1_network_proto_msgTypes,
	}.Build()
	File_bos_v1_network_proto = out.File
	file_bos_v1_network_proto_rawDesc = nil
	file_bos_v1_network_proto_goTypes = nil
	file_bos_v1_network_proto_depIdxs = nil
}
