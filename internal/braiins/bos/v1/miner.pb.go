// Copyright (C) 2023  Braiins Systems s.r.o.
//
// This file is part of Braiins Open-Source Initiative (BOSI).
//
// BOSI is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
// Please, keep in mind that we may also license BOSI or any part thereof
// under a proprietary license. For more information on the terms and conditions
// of such proprietary license or if you have any other questions, please
// contact us at opensource@braiins.com.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: bos/v1/miner.proto

package bos_proto_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Supported platforms
type Platform int32

const (
	Platform_PLATFORM_UNSPECIFIED          Platform = 0
	Platform_PLATFORM_AM1_S9               Platform = 1
	Platform_PLATFORM_AM2_S17              Platform = 2
	Platform_PLATFORM_AM3_BBB              Platform = 3
	Platform_PLATFORM_AM3_AML              Platform = 4
	Platform_PLATFORM_STM32MP157C_II1_AM2  Platform = 5
	Platform_PLATFORM_CVITEK_BM1_AM2       Platform = 6
	Platform_PLATFORM_ZYNQ_BM3_AM2         Platform = 7
	Platform_PLATFORM_STM32MP157C_II2_BMM1 Platform = 8
)

// Enum value maps for Platform.
var (
	Platform_name = map[int32]string{
		0: "PLATFORM_UNSPECIFIED",
		1: "PLATFORM_AM1_S9",
		2: "PLATFORM_AM2_S17",
		3: "PLATFORM_AM3_BBB",
		4: "PLATFORM_AM3_AML",
		5: "PLATFORM_STM32MP157C_II1_AM2",
		6: "PLATFORM_CVITEK_BM1_AM2",
		7: "PLATFORM_ZYNQ_BM3_AM2",
		8: "PLATFORM_STM32MP157C_II2_BMM1",
	}
	Platform_value = map[string]int32{
		"PLATFORM_UNSPECIFIED":          0,
		"PLATFORM_AM1_S9":               1,
		"PLATFORM_AM2_S17":              2,
		"PLATFORM_AM3_BBB":              3,
		"PLATFORM_AM3_AML":              4,
		"PLATFORM_STM32MP157C_II1_AM2":  5,
		"PLATFORM_CVITEK_BM1_AM2":       6,
		"PLATFORM_ZYNQ_BM3_AM2":         7,
		"PLATFORM_STM32MP157C_II2_BMM1": 8,
	}
)

func (x Platform) Enum() *Platform {
	p := new(Platform)
	*p = x
	return p
}

func (x Platform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Platform) Descriptor() protoreflect.EnumDescriptor {
	return file_bos_v1_miner_proto_enumTypes[0].Descriptor()
}

func (Platform) Type() protoreflect.EnumType {
	return &file_bos_v1_miner_proto_enumTypes[0]
}

func (x Platform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Platform.Descriptor instead.
func (Platform) EnumDescriptor() ([]byte, []int) {
	return file_bos_v1_miner_proto_rawDescGZIP(), []int{0}
}

// Control board soc family “CVITEK”, “BBB”, “AML”, “ZYNQ”, "BRAIINS"
type ControlBoardSocFamily int32

const (
	ControlBoardSocFamily_CONTROL_BOARD_SOC_FAMILY_UNSPECIFIED ControlBoardSocFamily = 0
	ControlBoardSocFamily_CONTROL_BOARD_SOC_FAMILY_CVITEK      ControlBoardSocFamily = 1
	ControlBoardSocFamily_CONTROL_BOARD_SOC_FAMILY_BBB         ControlBoardSocFamily = 2
	ControlBoardSocFamily_CONTROL_BOARD_SOC_FAMILY_AML         ControlBoardSocFamily = 3
	ControlBoardSocFamily_CONTROL_BOARD_SOC_FAMILY_ZYNQ        ControlBoardSocFamily = 4
	ControlBoardSocFamily_CONTROL_BOARD_SOC_FAMILY_BRAIINS     ControlBoardSocFamily = 5
)

// Enum value maps for ControlBoardSocFamily.
var (
	ControlBoardSocFamily_name = map[int32]string{
		0: "CONTROL_BOARD_SOC_FAMILY_UNSPECIFIED",
		1: "CONTROL_BOARD_SOC_FAMILY_CVITEK",
		2: "CONTROL_BOARD_SOC_FAMILY_BBB",
		3: "CONTROL_BOARD_SOC_FAMILY_AML",
		4: "CONTROL_BOARD_SOC_FAMILY_ZYNQ",
		5: "CONTROL_BOARD_SOC_FAMILY_BRAIINS",
	}
	ControlBoardSocFamily_value = map[string]int32{
		"CONTROL_BOARD_SOC_FAMILY_UNSPECIFIED": 0,
		"CONTROL_BOARD_SOC_FAMILY_CVITEK":      1,
		"CONTROL_BOARD_SOC_FAMILY_BBB":         2,
		"CONTROL_BOARD_SOC_FAMILY_AML":         3,
		"CONTROL_BOARD_SOC_FAMILY_ZYNQ":        4,
		"CONTROL_BOARD_SOC_FAMILY_BRAIINS":     5,
	}
)

func (x ControlBoardSocFamily) Enum() *ControlBoardSocFamily {
	p := new(ControlBoardSocFamily)
	*p = x
	return p
}

func (x ControlBoardSocFamily) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ControlBoardSocFamily) Descriptor() protoreflect.EnumDescriptor {
	return file_bos_v1_miner_proto_enumTypes[1].Descriptor()
}

func (ControlBoardSocFamily) Type() protoreflect.EnumType {
	return &file_bos_v1_miner_proto_enumTypes[1]
}

func (x ControlBoardSocFamily) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ControlBoardSocFamily.Descriptor instead.
func (ControlBoardSocFamily) EnumDescriptor() ([]byte, []int) {
	return file_bos_v1_miner_proto_rawDescGZIP(), []int{1}
}

// BOS modes enumeration
type BosMode int32

const (
	BosMode_BOS_MODE_UNSPECIFIED BosMode = 0
	BosMode_BOS_MODE_UPGRADE     BosMode = 1
	BosMode_BOS_MODE_RECOVERY    BosMode = 2
	BosMode_BOS_MODE_SD          BosMode = 3
	BosMode_BOS_MODE_NAND        BosMode = 4
	BosMode_BOS_MODE_EMMC        BosMode = 5
)

// Enum value maps for BosMode.
var (
	BosMode_name = map[int32]string{
		0: "BOS_MODE_UNSPECIFIED",
		1: "BOS_MODE_UPGRADE",
		2: "BOS_MODE_RECOVERY",
		3: "BOS_MODE_SD",
		4: "BOS_MODE_NAND",
		5: "BOS_MODE_EMMC",
	}
	BosMode_value = map[string]int32{
		"BOS_MODE_UNSPECIFIED": 0,
		"BOS_MODE_UPGRADE":     1,
		"BOS_MODE_RECOVERY":    2,
		"BOS_MODE_SD":          3,
		"BOS_MODE_NAND":        4,
		"BOS_MODE_EMMC":        5,
	}
)

func (x BosMode) Enum() *BosMode {
	p := new(BosMode)
	*p = x
	return p
}

func (x BosMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BosMode) Descriptor() protoreflect.EnumDescriptor {
	return file_bos_v1_miner_proto_enumTypes[2].Descriptor()
}

func (BosMode) Type() protoreflect.EnumType {
	return &file_bos_v1_miner_proto_enumTypes[2]
}

func (x BosMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BosMode.Descriptor instead.
func (BosMode) EnumDescriptor() ([]byte, []int) {
	return file_bos_v1_miner_proto_rawDescGZIP(), []int{2}
}

type MinerBrand int32

const (
	MinerBrand_MINER_BRAND_UNSPECIFIED MinerBrand = 0
	MinerBrand_MINER_BRAND_ANTMINER    MinerBrand = 1
	MinerBrand_MINER_BRAND_WHATSMINER  MinerBrand = 2
)

// Enum value maps for MinerBrand.
var (
	MinerBrand_name = map[int32]string{
		0: "MINER_BRAND_UNSPECIFIED",
		1: "MINER_BRAND_ANTMINER",
		2: "MINER_BRAND_WHATSMINER",
	}
	MinerBrand_value = map[string]int32{
		"MINER_BRAND_UNSPECIFIED": 0,
		"MINER_BRAND_ANTMINER":    1,
		"MINER_BRAND_WHATSMINER":  2,
	}
)

func (x MinerBrand) Enum() *MinerBrand {
	p := new(MinerBrand)
	*p = x
	return p
}

func (x MinerBrand) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MinerBrand) Descriptor() protoreflect.EnumDescriptor {
	return file_bos_v1_miner_proto_enumTypes[3].Descriptor()
}

func (MinerBrand) Type() protoreflect.EnumType {
	return &file_bos_v1_miner_proto_enumTypes[3]
}

func (x MinerBrand) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MinerBrand.Descriptor instead.
func (MinerBrand) EnumDescriptor() ([]byte, []int) {
	return file_bos_v1_miner_proto_rawDescGZIP(), []int{3}
}

// Deprecated: This enumeration is not longer maintained
//
// Deprecated: Marked as deprecated in bos/v1/miner.proto.
type MinerModel int32

const (
	MinerModel_MINER_MODEL_UNSPECIFIED            MinerModel = 0
	MinerModel_MINER_MODEL_ANTMINER_S9            MinerModel = 1
	MinerModel_MINER_MODEL_ANTMINER_X17           MinerModel = 2
	MinerModel_MINER_MODEL_ANTMINER_S17           MinerModel = 3
	MinerModel_MINER_MODEL_ANTMINER_S17_PLUS      MinerModel = 4
	MinerModel_MINER_MODEL_ANTMINER_S17_PRO       MinerModel = 5
	MinerModel_MINER_MODEL_ANTMINER_S17E          MinerModel = 6
	MinerModel_MINER_MODEL_ANTMINER_T17           MinerModel = 7
	MinerModel_MINER_MODEL_ANTMINER_T17E          MinerModel = 8
	MinerModel_MINER_MODEL_ANTMINER_T17_PLUS      MinerModel = 9
	MinerModel_MINER_MODEL_ANTMINER_X19           MinerModel = 10
	MinerModel_MINER_MODEL_ANTMINER_S19           MinerModel = 11
	MinerModel_MINER_MODEL_ANTMINER_S19_PRO       MinerModel = 12
	MinerModel_MINER_MODEL_ANTMINER_S19_PLUS      MinerModel = 13
	MinerModel_MINER_MODEL_ANTMINER_S19J          MinerModel = 14
	MinerModel_MINER_MODEL_ANTMINER_S19J_PRO      MinerModel = 15
	MinerModel_MINER_MODEL_ANTMINER_S19A          MinerModel = 16
	MinerModel_MINER_MODEL_ANTMINER_S19A_PRO      MinerModel = 17
	MinerModel_MINER_MODEL_ANTMINER_S19XP         MinerModel = 18
	MinerModel_MINER_MODEL_ANTMINER_T19           MinerModel = 19
	MinerModel_MINER_MODEL_ANTMINER_S19J_PRO_PLUS MinerModel = 20
)

// Enum value maps for MinerModel.
var (
	MinerModel_name = map[int32]string{
		0:  "MINER_MODEL_UNSPECIFIED",
		1:  "MINER_MODEL_ANTMINER_S9",
		2:  "MINER_MODEL_ANTMINER_X17",
		3:  "MINER_MODEL_ANTMINER_S17",
		4:  "MINER_MODEL_ANTMINER_S17_PLUS",
		5:  "MINER_MODEL_ANTMINER_S17_PRO",
		6:  "MINER_MODEL_ANTMINER_S17E",
		7:  "MINER_MODEL_ANTMINER_T17",
		8:  "MINER_MODEL_ANTMINER_T17E",
		9:  "MINER_MODEL_ANTMINER_T17_PLUS",
		10: "MINER_MODEL_ANTMINER_X19",
		11: "MINER_MODEL_ANTMINER_S19",
		12: "MINER_MODEL_ANTMINER_S19_PRO",
		13: "MINER_MODEL_ANTMINER_S19_PLUS",
		14: "MINER_MODEL_ANTMINER_S19J",
		15: "MINER_MODEL_ANTMINER_S19J_PRO",
		16: "MINER_MODEL_ANTMINER_S19A",
		17: "MINER_MODEL_ANTMINER_S19A_PRO",
		18: "MINER_MODEL_ANTMINER_S19XP",
		19: "MINER_MODEL_ANTMINER_T19",
		20: "MINER_MODEL_ANTMINER_S19J_PRO_PLUS",
	}
	MinerModel_value = map[string]int32{
		"MINER_MODEL_UNSPECIFIED":            0,
		"MINER_MODEL_ANTMINER_S9":            1,
		"MINER_MODEL_ANTMINER_X17":           2,
		"MINER_MODEL_ANTMINER_S17":           3,
		"MINER_MODEL_ANTMINER_S17_PLUS":      4,
		"MINER_MODEL_ANTMINER_S17_PRO":       5,
		"MINER_MODEL_ANTMINER_S17E":          6,
		"MINER_MODEL_ANTMINER_T17":           7,
		"MINER_MODEL_ANTMINER_T17E":          8,
		"MINER_MODEL_ANTMINER_T17_PLUS":      9,
		"MINER_MODEL_ANTMINER_X19":           10,
		"MINER_MODEL_ANTMINER_S19":           11,
		"MINER_MODEL_ANTMINER_S19_PRO":       12,
		"MINER_MODEL_ANTMINER_S19_PLUS":      13,
		"MINER_MODEL_ANTMINER_S19J":          14,
		"MINER_MODEL_ANTMINER_S19J_PRO":      15,
		"MINER_MODEL_ANTMINER_S19A":          16,
		"MINER_MODEL_ANTMINER_S19A_PRO":      17,
		"MINER_MODEL_ANTMINER_S19XP":         18,
		"MINER_MODEL_ANTMINER_T19":           19,
		"MINER_MODEL_ANTMINER_S19J_PRO_PLUS": 20,
	}
)

func (x MinerModel) Enum() *MinerModel {
	p := new(MinerModel)
	*p = x
	return p
}

func (x MinerModel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MinerModel) Descriptor() protoreflect.EnumDescriptor {
	return file_bos_v1_miner_proto_enumTypes[4].Descriptor()
}

func (MinerModel) Type() protoreflect.EnumType {
	return &file_bos_v1_miner_proto_enumTypes[4]
}

func (x MinerModel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MinerModel.Descriptor instead.
func (MinerModel) EnumDescriptor() ([]byte, []int) {
	return file_bos_v1_miner_proto_rawDescGZIP(), []int{4}
}

type MinerStatus int32

const (
	MinerStatus_MINER_STATUS_UNSPECIFIED MinerStatus = 0
	MinerStatus_MINER_STATUS_NOT_STARTED MinerStatus = 1
	MinerStatus_MINER_STATUS_NORMAL      MinerStatus = 2
	MinerStatus_MINER_STATUS_PAUSED      MinerStatus = 3
	MinerStatus_MINER_STATUS_SUSPENDED   MinerStatus = 4
	MinerStatus_MINER_STATUS_RESTRICTED  MinerStatus = 5
)

// Enum value maps for MinerStatus.
var (
	MinerStatus_name = map[int32]string{
		0: "MINER_STATUS_UNSPECIFIED",
		1: "MINER_STATUS_NOT_STARTED",
		2: "MINER_STATUS_NORMAL",
		3: "MINER_STATUS_PAUSED",
		4: "MINER_STATUS_SUSPENDED",
		5: "MINER_STATUS_RESTRICTED",
	}
	MinerStatus_value = map[string]int32{
		"MINER_STATUS_UNSPECIFIED": 0,
		"MINER_STATUS_NOT_STARTED": 1,
		"MINER_STATUS_NORMAL":      2,
		"MINER_STATUS_PAUSED":      3,
		"MINER_STATUS_SUSPENDED":   4,
		"MINER_STATUS_RESTRICTED":  5,
	}
)

func (x MinerStatus) Enum() *MinerStatus {
	p := new(MinerStatus)
	*p = x
	return p
}

func (x MinerStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MinerStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_bos_v1_miner_proto_enumTypes[5].Descriptor()
}

func (MinerStatus) Type() protoreflect.EnumType {
	return &file_bos_v1_miner_proto_enumTypes[5]
}

func (x MinerStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MinerStatus.Descriptor instead.
func (MinerStatus) EnumDescriptor() ([]byte, []int) {
	return file_bos_v1_miner_proto_rawDescGZIP(), []int{5}
}

// Enumeration for support archive format
type SupportArchiveFormat int32

const (
	SupportArchiveFormat_SUPPORT_ARCHIVE_FORMAT_UNSPECIFIED SupportArchiveFormat = 0
	// Compressed zip format
	SupportArchiveFormat_SUPPORT_ARCHIVE_FORMAT_ZIP SupportArchiveFormat = 1
	// BOS custom format
	SupportArchiveFormat_SUPPORT_ARCHIVE_FORMAT_BOS SupportArchiveFormat = 2
	// Compressed encrypted zip format
	SupportArchiveFormat_SUPPORT_ARCHIVE_FORMAT_ZIP_ENCRYPTED SupportArchiveFormat = 3
)

// Enum value maps for SupportArchiveFormat.
var (
	SupportArchiveFormat_name = map[int32]string{
		0: "SUPPORT_ARCHIVE_FORMAT_UNSPECIFIED",
		1: "SUPPORT_ARCHIVE_FORMAT_ZIP",
		2: "SUPPORT_ARCHIVE_FORMAT_BOS",
		3: "SUPPORT_ARCHIVE_FORMAT_ZIP_ENCRYPTED",
	}
	SupportArchiveFormat_value = map[string]int32{
		"SUPPORT_ARCHIVE_FORMAT_UNSPECIFIED":   0,
		"SUPPORT_ARCHIVE_FORMAT_ZIP":           1,
		"SUPPORT_ARCHIVE_FORMAT_BOS":           2,
		"SUPPORT_ARCHIVE_FORMAT_ZIP_ENCRYPTED": 3,
	}
)

func (x SupportArchiveFormat) Enum() *SupportArchiveFormat {
	p := new(SupportArchiveFormat)
	*p = x
	return p
}

func (x SupportArchiveFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SupportArchiveFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_bos_v1_miner_proto_enumTypes[6].Descriptor()
}

func (SupportArchiveFormat) Type() protoreflect.EnumType {
	return &file_bos_v1_miner_proto_enumTypes[6]
}

func (x SupportArchiveFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SupportArchiveFormat.Descriptor instead.
func (SupportArchiveFormat) EnumDescriptor() ([]byte, []int) {
	return file_bos_v1_miner_proto_rawDescGZIP(), []int{6}
}

type MinerIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Brand MinerBrand `protobuf:"varint,1,opt,name=brand,proto3,enum=braiins.bos.v1.MinerBrand" json:"brand,omitempty"`
	// Deprecated: Use miner_model instead.
	// This field is no longer supported.
	//
	// Deprecated: Marked as deprecated in bos/v1/miner.proto.
	Model      MinerModel `protobuf:"varint,2,opt,name=model,proto3,enum=braiins.bos.v1.MinerModel" json:"model,omitempty"`
	Name       string     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	MinerModel string     `protobuf:"bytes,4,opt,name=miner_model,json=minerModel,proto3" json:"miner_model,omitempty"`
}

func (x *MinerIdentity) Reset() {
	*x = MinerIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_miner_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinerIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinerIdentity) ProtoMessage() {}

func (x *MinerIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_miner_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinerIdentity.ProtoReflect.Descriptor instead.
func (*MinerIdentity) Descriptor() ([]byte, []int) {
	return file_bos_v1_miner_proto_rawDescGZIP(), []int{0}
}

func (x *MinerIdentity) GetBrand() MinerBrand {
	if x != nil {
		return x.Brand
	}
	return MinerBrand_MINER_BRAND_UNSPECIFIED
}

// Deprecated: Marked as deprecated in bos/v1/miner.proto.
func (x *MinerIdentity) GetModel() MinerModel {
	if x != nil {
		return x.Model
	}
	return MinerModel_MINER_MODEL_UNSPECIFIED
}

func (x *MinerIdentity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MinerIdentity) GetMinerModel() string {
	if x != nil {
		return x.MinerModel
	}
	return ""
}

// Structure to handle BOS version
type BosVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current string `protobuf:"bytes,1,opt,name=current,proto3" json:"current,omitempty"`
	Major   string `protobuf:"bytes,2,opt,name=major,proto3" json:"major,omitempty"`
	BosPlus bool   `protobuf:"varint,3,opt,name=bos_plus,json=bosPlus,proto3" json:"bos_plus,omitempty"`
}

func (x *BosVersion) Reset() {
	*x = BosVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_miner_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BosVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BosVersion) ProtoMessage() {}

func (x *BosVersion) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_miner_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BosVersion.ProtoReflect.Descriptor instead.
func (*BosVersion) Descriptor() ([]byte, []int) {
	return file_bos_v1_miner_proto_rawDescGZIP(), []int{1}
}

func (x *BosVersion) GetCurrent() string {
	if x != nil {
		return x.Current
	}
	return ""
}

func (x *BosVersion) GetMajor() string {
	if x != nil {
		return x.Major
	}
	return ""
}

func (x *BosVersion) GetBosPlus() bool {
	if x != nil {
		return x.BosPlus
	}
	return false
}

type ErrorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Hint   string `protobuf:"bytes,3,opt,name=hint,proto3" json:"hint,omitempty"`
}

func (x *ErrorCode) Reset() {
	*x = ErrorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_miner_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorCode) ProtoMessage() {}

func (x *ErrorCode) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_miner_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorCode.ProtoReflect.Descriptor instead.
func (*ErrorCode) Descriptor() ([]byte, []int) {
	return file_bos_v1_miner_proto_rawDescGZIP(), []int{2}
}

func (x *ErrorCode) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ErrorCode) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ErrorCode) GetHint() string {
	if x != nil {
		return x.Hint
	}
	return ""
}

type Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Index uint32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *Component) Reset() {
	*x = Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_miner_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Component) ProtoMessage() {}

func (x *Component) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_miner_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Component.ProtoReflect.Descriptor instead.
func (*Component) Descriptor() ([]byte, []int) {
	return file_bos_v1_miner_proto_rawDescGZIP(), []int{3}
}

func (x *Component) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Component) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type MinerError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp  string       `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Message    string       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ErrorCodes []*ErrorCode `protobuf:"bytes,3,rep,name=error_codes,json=errorCodes,proto3" json:"error_codes,omitempty"`
	Components []*Component `protobuf:"bytes,4,rep,name=components,proto3" json:"components,omitempty"`
}

func (x *MinerError) Reset() {
	*x = MinerError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_miner_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinerError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinerError) ProtoMessage() {}

func (x *MinerError) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_miner_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinerError.ProtoReflect.Descriptor instead.
func (*MinerError) Descriptor() ([]byte, []int) {
	return file_bos_v1_miner_proto_rawDescGZIP(), []int{4}
}

func (x *MinerError) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *MinerError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MinerError) GetErrorCodes() []*ErrorCode {
	if x != nil {
		return x.ErrorCodes
	}
	return nil
}

func (x *MinerError) GetComponents() []*Component {
	if x != nil {
		return x.Components
	}
	return nil
}

type GetMinerStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetMinerStatusRequest) Reset() {
	*x = GetMinerStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_miner_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMinerStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMinerStatusRequest) ProtoMessage() {}

func (x *GetMinerStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_miner_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMinerStatusRequest.ProtoReflect.Descriptor instead.
func (*GetMinerStatusRequest) Descriptor() ([]byte, []int) {
	return file_bos_v1_miner_proto_rawDescGZIP(), []int{5}
}

type GetMinerStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status MinerStatus `protobuf:"varint,1,opt,name=status,proto3,enum=braiins.bos.v1.MinerStatus" json:"status,omitempty"`
}

func (x *GetMinerStatusResponse) Reset() {
	*x = GetMinerStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_miner_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMinerStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMinerStatusResponse) ProtoMessage() {}

func (x *GetMinerStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_miner_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMinerStatusResponse.ProtoReflect.Descriptor instead.
func (*GetMinerStatusResponse) Descriptor() ([]byte, []int) {
	return file_bos_v1_miner_proto_rawDescGZIP(), []int{6}
}

func (x *GetMinerStatusResponse) GetStatus() MinerStatus {
	if x != nil {
		return x.Status
	}
	return MinerStatus_MINER_STATUS_UNSPECIFIED
}

type GetMinerDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetMinerDetailsRequest) Reset() {
	*x = GetMinerDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_miner_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMinerDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMinerDetailsRequest) ProtoMessage() {}

func (x *GetMinerDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_miner_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMinerDetailsRequest.ProtoReflect.Descriptor instead.
func (*GetMinerDetailsRequest) Descriptor() ([]byte, []int) {
	return file_bos_v1_miner_proto_rawDescGZIP(), []int{7}
}

type PsuInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PSU hardware version identifier
	Version *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=version,proto3,oneof" json:"version,omitempty"`
	// PSU firmware version identifier
	FwVersion *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=fw_version,json=fwVersion,proto3,oneof" json:"fw_version,omitempty"`
	// PSU serial number (e.g. "DGAH335BDJDJG0782")
	SerialNumber *string `protobuf:"bytes,3,opt,name=serial_number,json=serialNumber,proto3,oneof" json:"serial_number,omitempty"`
	// PSU model/version name in human-readable form (e.g. "APW121215b")
	ModelName *string `protobuf:"bytes,4,opt,name=model_name,json=modelName,proto3,oneof" json:"model_name,omitempty"`
	// Minimal voltage that can be set in volts
	MinVoltage *Voltage `protobuf:"bytes,5,opt,name=min_voltage,json=minVoltage,proto3,oneof" json:"min_voltage,omitempty"`
	// Maximal voltage that can be set in volts
	MaxVoltage *Voltage `protobuf:"bytes,6,opt,name=max_voltage,json=maxVoltage,proto3,oneof" json:"max_voltage,omitempty"`
}

func (x *PsuInfo) Reset() {
	*x = PsuInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_miner_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PsuInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PsuInfo) ProtoMessage() {}

func (x *PsuInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_miner_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PsuInfo.ProtoReflect.Descriptor instead.
func (*PsuInfo) Descriptor() ([]byte, []int) {
	return file_bos_v1_miner_proto_rawDescGZIP(), []int{8}
}

func (x *PsuInfo) GetVersion() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *PsuInfo) GetFwVersion() *wrapperspb.UInt32Value {
	if x != nil {
		return x.FwVersion
	}
	return nil
}

func (x *PsuInfo) GetSerialNumber() string {
	if x != nil && x.SerialNumber != nil {
		return *x.SerialNumber
	}
	return ""
}

func (x *PsuInfo) GetModelName() string {
	if x != nil && x.ModelName != nil {
		return *x.ModelName
	}
	return ""
}

func (x *PsuInfo) GetMinVoltage() *Voltage {
	if x != nil {
		return x.MinVoltage
	}
	return nil
}

func (x *PsuInfo) GetMaxVoltage() *Voltage {
	if x != nil {
		return x.MaxVoltage
	}
	return nil
}

// Structure to handle system details
type GetMinerDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Miner ID
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// Miner identity
	MinerIdentity *MinerIdentity `protobuf:"bytes,2,opt,name=miner_identity,json=minerIdentity,proto3" json:"miner_identity,omitempty"`
	// Miner platform
	Platform Platform `protobuf:"varint,3,opt,name=platform,proto3,enum=braiins.bos.v1.Platform" json:"platform,omitempty"`
	// BOS Mode
	BosMode BosMode `protobuf:"varint,4,opt,name=bos_mode,json=bosMode,proto3,enum=braiins.bos.v1.BosMode" json:"bos_mode,omitempty"`
	// OS Version
	BosVersion *BosVersion `protobuf:"bytes,5,opt,name=bos_version,json=bosVersion,proto3" json:"bos_version,omitempty"`
	// Hostname
	Hostname string `protobuf:"bytes,6,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// MAC address
	MacAddress string `protobuf:"bytes,7,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	// Deprecated: Use system_uptime_s
	//
	// Deprecated: Marked as deprecated in bos/v1/miner.proto.
	SystemUptime uint64 `protobuf:"varint,8,opt,name=system_uptime,json=systemUptime,proto3" json:"system_uptime,omitempty"`
	// Miner hashrate declared by manufacturer
	StickerHashrate *GigaHashrate `protobuf:"bytes,9,opt,name=sticker_hashrate,json=stickerHashrate,proto3" json:"sticker_hashrate,omitempty"`
	// Bosminer uptime. `0` means bosminer is not running
	BosminerUptimeS uint64 `protobuf:"varint,10,opt,name=bosminer_uptime_s,json=bosminerUptimeS,proto3" json:"bosminer_uptime_s,omitempty"`
	// System uptime
	SystemUptimeS uint64 `protobuf:"varint,11,opt,name=system_uptime_s,json=systemUptimeS,proto3" json:"system_uptime_s,omitempty"`
	// Miner status
	Status MinerStatus `protobuf:"varint,12,opt,name=status,proto3,enum=braiins.bos.v1.MinerStatus" json:"status,omitempty"`
	// Kernel version
	KernelVersion string `protobuf:"bytes,13,opt,name=kernel_version,json=kernelVersion,proto3" json:"kernel_version,omitempty"`
	// PSU details
	PsuInfo *PsuInfo `protobuf:"bytes,14,opt,name=psu_info,json=psuInfo,proto3,oneof" json:"psu_info,omitempty"`
	// Control board soc family
	ControlBoardSocFamily ControlBoardSocFamily `protobuf:"varint,15,opt,name=control_board_soc_family,json=controlBoardSocFamily,proto3,enum=braiins.bos.v1.ControlBoardSocFamily" json:"control_board_soc_family,omitempty"`
	// Miner serial number
	SerialNumber *string `protobuf:"bytes,16,opt,name=serial_number,json=serialNumber,proto3,oneof" json:"serial_number,omitempty"`
}

func (x *GetMinerDetailsResponse) Reset() {
	*x = GetMinerDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_miner_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMinerDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMinerDetailsResponse) ProtoMessage() {}

func (x *GetMinerDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_miner_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMinerDetailsResponse.ProtoReflect.Descriptor instead.
func (*GetMinerDetailsResponse) Descriptor() ([]byte, []int) {
	return file_bos_v1_miner_proto_rawDescGZIP(), []int{9}
}

func (x *GetMinerDetailsResponse) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *GetMinerDetailsResponse) GetMinerIdentity() *MinerIdentity {
	if x != nil {
		return x.MinerIdentity
	}
	return nil
}

func (x *GetMinerDetailsResponse) GetPlatform() Platform {
	if x != nil {
		return x.Platform
	}
	return Platform_PLATFORM_UNSPECIFIED
}

func (x *GetMinerDetailsResponse) GetBosMode() BosMode {
	if x != nil {
		return x.BosMode
	}
	return BosMode_BOS_MODE_UNSPECIFIED
}

func (x *GetMinerDetailsResponse) GetBosVersion() *BosVersion {
	if x != nil {
		return x.BosVersion
	}
	return nil
}

func (x *GetMinerDetailsResponse) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *GetMinerDetailsResponse) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

// Deprecated: Marked as deprecated in bos/v1/miner.proto.
func (x *GetMinerDetailsResponse) GetSystemUptime() uint64 {
	if x != nil {
		return x.SystemUptime
	}
	return 0
}

func (x *GetMinerDetailsResponse) GetStickerHashrate() *GigaHashrate {
	if x != nil {
		return x.StickerHashrate
	}
	return nil
}

func (x *GetMinerDetailsResponse) GetBosminerUptimeS() uint64 {
	if x != nil {
		return x.BosminerUptimeS
	}
	return 0
}

func (x *GetMinerDetailsResponse) GetSystemUptimeS() uint64 {
	if x != nil {
		return x.SystemUptimeS
	}
	return 0
}

func (x *GetMinerDetailsResponse) GetStatus() MinerStatus {
	if x != nil {
		return x.Status
	}
	return MinerStatus_MINER_STATUS_UNSPECIFIED
}

func (x *GetMinerDetailsResponse) GetKernelVersion() string {
	if x != nil {
		return x.KernelVersion
	}
	return ""
}

func (x *GetMinerDetailsResponse) GetPsuInfo() *PsuInfo {
	if x != nil {
		return x.PsuInfo
	}
	return nil
}

func (x *GetMinerDetailsResponse) GetControlBoardSocFamily() ControlBoardSocFamily {
	if x != nil {
		return x.ControlBoardSocFamily
	}
	return ControlBoardSocFamily_CONTROL_BOARD_SOC_FAMILY_UNSPECIFIED
}

func (x *GetMinerDetailsResponse) GetSerialNumber() string {
	if x != nil && x.SerialNumber != nil {
		return *x.SerialNumber
	}
	return ""
}

type MinerPowerStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Miner approximated power consumption.
	ApproximatedConsumption *Power `protobuf:"bytes,1,opt,name=approximated_consumption,json=approximatedConsumption,proto3" json:"approximated_consumption,omitempty"`
	// Miner power efficiency
	Efficiency *PowerEfficiency `protobuf:"bytes,2,opt,name=efficiency,proto3" json:"efficiency,omitempty"`
}

func (x *MinerPowerStats) Reset() {
	*x = MinerPowerStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_miner_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinerPowerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinerPowerStats) ProtoMessage() {}

func (x *MinerPowerStats) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_miner_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinerPowerStats.ProtoReflect.Descriptor instead.
func (*MinerPowerStats) Descriptor() ([]byte, []int) {
	return file_bos_v1_miner_proto_rawDescGZIP(), []int{10}
}

func (x *MinerPowerStats) GetApproximatedConsumption() *Power {
	if x != nil {
		return x.ApproximatedConsumption
	}
	return nil
}

func (x *MinerPowerStats) GetEfficiency() *PowerEfficiency {
	if x != nil {
		return x.Efficiency
	}
	return nil
}

type GetMinerStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetMinerStatsRequest) Reset() {
	*x = GetMinerStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_miner_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMinerStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMinerStatsRequest) ProtoMessage() {}

func (x *GetMinerStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_miner_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMinerStatsRequest.ProtoReflect.Descriptor instead.
func (*GetMinerStatsRequest) Descriptor() ([]byte, []int) {
	return file_bos_v1_miner_proto_rawDescGZIP(), []int{11}
}

type GetMinerStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Aggregate pool statistic
	PoolStats *PoolStats `protobuf:"bytes,1,opt,name=pool_stats,json=poolStats,proto3" json:"pool_stats,omitempty"`
	// Miner hashrate statistics
	MinerStats *WorkSolverStats `protobuf:"bytes,2,opt,name=miner_stats,json=minerStats,proto3" json:"miner_stats,omitempty"`
	// Miner power stats
	PowerStats *MinerPowerStats `protobuf:"bytes,3,opt,name=power_stats,json=powerStats,proto3" json:"power_stats,omitempty"`
}

func (x *GetMinerStatsResponse) Reset() {
	*x = GetMinerStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_miner_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMinerStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMinerStatsResponse) ProtoMessage() {}

func (x *GetMinerStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_miner_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMinerStatsResponse.ProtoReflect.Descriptor instead.
func (*GetMinerStatsResponse) Descriptor() ([]byte, []int) {
	return file_bos_v1_miner_proto_rawDescGZIP(), []int{12}
}

func (x *GetMinerStatsResponse) GetPoolStats() *PoolStats {
	if x != nil {
		return x.PoolStats
	}
	return nil
}

func (x *GetMinerStatsResponse) GetMinerStats() *WorkSolverStats {
	if x != nil {
		return x.MinerStats
	}
	return nil
}

func (x *GetMinerStatsResponse) GetPowerStats() *MinerPowerStats {
	if x != nil {
		return x.PowerStats
	}
	return nil
}

type GetErrorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetErrorsRequest) Reset() {
	*x = GetErrorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_miner_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetErrorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetErrorsRequest) ProtoMessage() {}

func (x *GetErrorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_miner_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetErrorsRequest.ProtoReflect.Descriptor instead.
func (*GetErrorsRequest) Descriptor() ([]byte, []int) {
	return file_bos_v1_miner_proto_rawDescGZIP(), []int{13}
}

type GetErrorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Array of errors
	Errors []*MinerError `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *GetErrorsResponse) Reset() {
	*x = GetErrorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_miner_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetErrorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetErrorsResponse) ProtoMessage() {}

func (x *GetErrorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_miner_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetErrorsResponse.ProtoReflect.Descriptor instead.
func (*GetErrorsResponse) Descriptor() ([]byte, []int) {
	return file_bos_v1_miner_proto_rawDescGZIP(), []int{14}
}

func (x *GetErrorsResponse) GetErrors() []*MinerError {
	if x != nil {
		return x.Errors
	}
	return nil
}

// Structure to handle HB details
type Hashboard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hashboard ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Flag if HB is enabled
	Enabled bool `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Number of chips
	ChipsCount *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=chips_count,json=chipsCount,proto3" json:"chips_count,omitempty"`
	// Current HB voltage in volts
	CurrentVoltage *Voltage `protobuf:"bytes,4,opt,name=current_voltage,json=currentVoltage,proto3" json:"current_voltage,omitempty"`
	// Current HB frequency in Hz
	CurrentFrequency *Frequency `protobuf:"bytes,5,opt,name=current_frequency,json=currentFrequency,proto3" json:"current_frequency,omitempty"`
	// Highest chip temperature
	HighestChipTemp *TemperatureSensor `protobuf:"bytes,6,opt,name=highest_chip_temp,json=highestChipTemp,proto3" json:"highest_chip_temp,omitempty"`
	// Board temperature
	BoardTemp *Temperature `protobuf:"bytes,7,opt,name=board_temp,json=boardTemp,proto3" json:"board_temp,omitempty"`
	// Hashboard stats
	Stats *WorkSolverStats `protobuf:"bytes,8,opt,name=stats,proto3" json:"stats,omitempty"`
	// Hashboard model
	Model *string `protobuf:"bytes,9,opt,name=model,proto3,oneof" json:"model,omitempty"`
	// Lowest inlet temperature
	LowestInletTemp *Temperature `protobuf:"bytes,10,opt,name=lowest_inlet_temp,json=lowestInletTemp,proto3" json:"lowest_inlet_temp,omitempty"`
	// Highest outlet temperature
	HighestOutletTemp *Temperature `protobuf:"bytes,11,opt,name=highest_outlet_temp,json=highestOutletTemp,proto3" json:"highest_outlet_temp,omitempty"`
	// Hashboard serial number
	SerialNumber *string `protobuf:"bytes,12,opt,name=serial_number,json=serialNumber,proto3,oneof" json:"serial_number,omitempty"`
	// Hashboard board name
	BoardName *string `protobuf:"bytes,13,opt,name=board_name,json=boardName,proto3,oneof" json:"board_name,omitempty"`
	// Hashboard chip type
	ChipType *string `protobuf:"bytes,14,opt,name=chip_type,json=chipType,proto3,oneof" json:"chip_type,omitempty"`
}

func (x *Hashboard) Reset() {
	*x = Hashboard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_miner_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hashboard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hashboard) ProtoMessage() {}

func (x *Hashboard) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_miner_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hashboard.ProtoReflect.Descriptor instead.
func (*Hashboard) Descriptor() ([]byte, []int) {
	return file_bos_v1_miner_proto_rawDescGZIP(), []int{15}
}

func (x *Hashboard) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Hashboard) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Hashboard) GetChipsCount() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ChipsCount
	}
	return nil
}

func (x *Hashboard) GetCurrentVoltage() *Voltage {
	if x != nil {
		return x.CurrentVoltage
	}
	return nil
}

func (x *Hashboard) GetCurrentFrequency() *Frequency {
	if x != nil {
		return x.CurrentFrequency
	}
	return nil
}

func (x *Hashboard) GetHighestChipTemp() *TemperatureSensor {
	if x != nil {
		return x.HighestChipTemp
	}
	return nil
}

func (x *Hashboard) GetBoardTemp() *Temperature {
	if x != nil {
		return x.BoardTemp
	}
	return nil
}

func (x *Hashboard) GetStats() *WorkSolverStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *Hashboard) GetModel() string {
	if x != nil && x.Model != nil {
		return *x.Model
	}
	return ""
}

func (x *Hashboard) GetLowestInletTemp() *Temperature {
	if x != nil {
		return x.LowestInletTemp
	}
	return nil
}

func (x *Hashboard) GetHighestOutletTemp() *Temperature {
	if x != nil {
		return x.HighestOutletTemp
	}
	return nil
}

func (x *Hashboard) GetSerialNumber() string {
	if x != nil && x.SerialNumber != nil {
		return *x.SerialNumber
	}
	return ""
}

func (x *Hashboard) GetBoardName() string {
	if x != nil && x.BoardName != nil {
		return *x.BoardName
	}
	return ""
}

func (x *Hashboard) GetChipType() string {
	if x != nil && x.ChipType != nil {
		return *x.ChipType
	}
	return ""
}

type GetSupportArchiveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Support archive format.
	Format SupportArchiveFormat `protobuf:"varint,1,opt,name=format,proto3,enum=braiins.bos.v1.SupportArchiveFormat" json:"format,omitempty"`
}

func (x *GetSupportArchiveRequest) Reset() {
	*x = GetSupportArchiveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_miner_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSupportArchiveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSupportArchiveRequest) ProtoMessage() {}

func (x *GetSupportArchiveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_miner_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSupportArchiveRequest.ProtoReflect.Descriptor instead.
func (*GetSupportArchiveRequest) Descriptor() ([]byte, []int) {
	return file_bos_v1_miner_proto_rawDescGZIP(), []int{16}
}

func (x *GetSupportArchiveRequest) GetFormat() SupportArchiveFormat {
	if x != nil {
		return x.Format
	}
	return SupportArchiveFormat_SUPPORT_ARCHIVE_FORMAT_UNSPECIFIED
}

type GetSupportArchiveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Support archive data
	ChunkData []byte `protobuf:"bytes,1,opt,name=chunk_data,json=chunkData,proto3" json:"chunk_data,omitempty"`
}

func (x *GetSupportArchiveResponse) Reset() {
	*x = GetSupportArchiveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_miner_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSupportArchiveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSupportArchiveResponse) ProtoMessage() {}

func (x *GetSupportArchiveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_miner_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSupportArchiveResponse.ProtoReflect.Descriptor instead.
func (*GetSupportArchiveResponse) Descriptor() ([]byte, []int) {
	return file_bos_v1_miner_proto_rawDescGZIP(), []int{17}
}

func (x *GetSupportArchiveResponse) GetChunkData() []byte {
	if x != nil {
		return x.ChunkData
	}
	return nil
}

type GetHashboardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetHashboardsRequest) Reset() {
	*x = GetHashboardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_miner_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHashboardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHashboardsRequest) ProtoMessage() {}

func (x *GetHashboardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_miner_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHashboardsRequest.ProtoReflect.Descriptor instead.
func (*GetHashboardsRequest) Descriptor() ([]byte, []int) {
	return file_bos_v1_miner_proto_rawDescGZIP(), []int{18}
}

type GetHashboardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All HB details
	Hashboards []*Hashboard `protobuf:"bytes,1,rep,name=hashboards,proto3" json:"hashboards,omitempty"`
}

func (x *GetHashboardsResponse) Reset() {
	*x = GetHashboardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_miner_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHashboardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHashboardsResponse) ProtoMessage() {}

func (x *GetHashboardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_miner_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHashboardsResponse.ProtoReflect.Descriptor instead.
func (*GetHashboardsResponse) Descriptor() ([]byte, []int) {
	return file_bos_v1_miner_proto_rawDescGZIP(), []int{19}
}

func (x *GetHashboardsResponse) GetHashboards() []*Hashboard {
	if x != nil {
		return x.Hashboards
	}
	return nil
}

type EnableHashboardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Save action
	SaveAction SaveAction `protobuf:"varint,1,opt,name=save_action,json=saveAction,proto3,enum=braiins.bos.v1.SaveAction" json:"save_action,omitempty"`
	// IDs of HB that should be enabled
	HashboardIds []string `protobuf:"bytes,2,rep,name=hashboard_ids,json=hashboardIds,proto3" json:"hashboard_ids,omitempty"`
}

func (x *EnableHashboardsRequest) Reset() {
	*x = EnableHashboardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_miner_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableHashboardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableHashboardsRequest) ProtoMessage() {}

func (x *EnableHashboardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_miner_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableHashboardsRequest.ProtoReflect.Descriptor instead.
func (*EnableHashboardsRequest) Descriptor() ([]byte, []int) {
	return file_bos_v1_miner_proto_rawDescGZIP(), []int{20}
}

func (x *EnableHashboardsRequest) GetSaveAction() SaveAction {
	if x != nil {
		return x.SaveAction
	}
	return SaveAction_SAVE_ACTION_UNSPECIFIED
}

func (x *EnableHashboardsRequest) GetHashboardIds() []string {
	if x != nil {
		return x.HashboardIds
	}
	return nil
}

type EnableHashboardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hashboards enable state
	Hashboards []*HashboardEnableState `protobuf:"bytes,1,rep,name=hashboards,proto3" json:"hashboards,omitempty"`
}

func (x *EnableHashboardsResponse) Reset() {
	*x = EnableHashboardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_miner_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableHashboardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableHashboardsResponse) ProtoMessage() {}

func (x *EnableHashboardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_miner_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableHashboardsResponse.ProtoReflect.Descriptor instead.
func (*EnableHashboardsResponse) Descriptor() ([]byte, []int) {
	return file_bos_v1_miner_proto_rawDescGZIP(), []int{21}
}

func (x *EnableHashboardsResponse) GetHashboards() []*HashboardEnableState {
	if x != nil {
		return x.Hashboards
	}
	return nil
}

type DisableHashboardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Save action
	SaveAction SaveAction `protobuf:"varint,1,opt,name=save_action,json=saveAction,proto3,enum=braiins.bos.v1.SaveAction" json:"save_action,omitempty"`
	// IDs of HB that should be disabled
	HashboardIds []string `protobuf:"bytes,2,rep,name=hashboard_ids,json=hashboardIds,proto3" json:"hashboard_ids,omitempty"`
}

func (x *DisableHashboardsRequest) Reset() {
	*x = DisableHashboardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_miner_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableHashboardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableHashboardsRequest) ProtoMessage() {}

func (x *DisableHashboardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_miner_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableHashboardsRequest.ProtoReflect.Descriptor instead.
func (*DisableHashboardsRequest) Descriptor() ([]byte, []int) {
	return file_bos_v1_miner_proto_rawDescGZIP(), []int{22}
}

func (x *DisableHashboardsRequest) GetSaveAction() SaveAction {
	if x != nil {
		return x.SaveAction
	}
	return SaveAction_SAVE_ACTION_UNSPECIFIED
}

func (x *DisableHashboardsRequest) GetHashboardIds() []string {
	if x != nil {
		return x.HashboardIds
	}
	return nil
}

type DisableHashboardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hashboards disable state
	Hashboards []*HashboardEnableState `protobuf:"bytes,1,rep,name=hashboards,proto3" json:"hashboards,omitempty"`
}

func (x *DisableHashboardsResponse) Reset() {
	*x = DisableHashboardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_miner_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableHashboardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableHashboardsResponse) ProtoMessage() {}

func (x *DisableHashboardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_miner_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableHashboardsResponse.ProtoReflect.Descriptor instead.
func (*DisableHashboardsResponse) Descriptor() ([]byte, []int) {
	return file_bos_v1_miner_proto_rawDescGZIP(), []int{23}
}

func (x *DisableHashboardsResponse) GetHashboards() []*HashboardEnableState {
	if x != nil {
		return x.Hashboards
	}
	return nil
}

type HashboardEnableState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hashboard ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Flag if hashboard is enabled or not
	IsEnabled bool `protobuf:"varint,2,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
}

func (x *HashboardEnableState) Reset() {
	*x = HashboardEnableState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_miner_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashboardEnableState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashboardEnableState) ProtoMessage() {}

func (x *HashboardEnableState) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_miner_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashboardEnableState.ProtoReflect.Descriptor instead.
func (*HashboardEnableState) Descriptor() ([]byte, []int) {
	return file_bos_v1_miner_proto_rawDescGZIP(), []int{24}
}

func (x *HashboardEnableState) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HashboardEnableState) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

var File_bos_v1_miner_proto protoreflect.FileDescriptor

var file_bos_v1_miner_proto_rawDesc = []byte{
	0x0a, 0x12, 0x62, 0x6f, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x1a, 0x13, 0x62, 0x6f, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x62, 0x6f, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x11, 0x62, 0x6f, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x12, 0x62, 0x6f, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x62, 0x6f, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xac, 0x01, 0x0a, 0x0d, 0x4d, 0x69,
	0x6e, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x62,
	0x72, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x62, 0x72, 0x61,
	0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x6e, 0x65,
	0x72, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x34, 0x0a,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x62,
	0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69,
	0x6e, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x69,
	0x6e, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x57, 0x0a, 0x0a, 0x42, 0x6f, 0x73, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6f, 0x73, 0x5f, 0x70, 0x6c,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x62, 0x6f, 0x73, 0x50, 0x6c, 0x75,
	0x73, 0x22, 0x4b, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x22, 0x35,
	0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xbb, 0x01, 0x0a, 0x0a, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x0b,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62,
	0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0x17, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4d, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73,
	0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb0, 0x03, 0x0a, 0x07, 0x50, 0x73, 0x75, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x3b, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x40,
	0x0a, 0x0a, 0x66, 0x77, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x01, 0x52, 0x09, 0x66, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3d,
	0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x48, 0x04, 0x52, 0x0a,
	0x6d, 0x69, 0x6e, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a,
	0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x48, 0x05, 0x52, 0x0a, 0x6d,
	0x61, 0x78, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x77, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x69, 0x6e,
	0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x22, 0xd9, 0x06, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x4d, 0x69, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0d, 0x6d,
	0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x12, 0x32, 0x0a, 0x08, 0x62, 0x6f, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62,
	0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x62,
	0x6f, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x62, 0x6f, 0x73, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x72,
	0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x73,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x62, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x27, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x75, 0x70, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x73, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x67, 0x61, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74,
	0x65, 0x52, 0x0f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61,
	0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x6f, 0x73, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x75,
	0x70, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x62,
	0x6f, 0x73, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x12, 0x26,
	0x0a, 0x0f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55,
	0x70, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73,
	0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6b,
	0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x08, 0x70, 0x73, 0x75, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62,
	0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x73, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52,
	0x07, 0x70, 0x73, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x5e, 0x0a, 0x18, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x6f, 0x63,
	0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x6f, 0x63, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x53, 0x6f, 0x63, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x0d, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x73, 0x75, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0xa4, 0x01, 0x0a, 0x0f, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x50, 0x0a, 0x18, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x72, 0x61,
	0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x52, 0x17, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x65, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x45, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x0a, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x16, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0xd5, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a,
	0x0a, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x09, 0x70, 0x6f,
	0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62,
	0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0a, 0x6d,
	0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x69, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x0a, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x12, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x47, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62,
	0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x9a, 0x06, 0x0a, 0x09, 0x48, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x68, 0x69, 0x70, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x69, 0x70, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x40, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69,
	0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x46, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62,
	0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x4d, 0x0a, 0x11, 0x68, 0x69, 0x67,
	0x68, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62,
	0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x0f, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74,
	0x43, 0x68, 0x69, 0x70, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x3a, 0x0a, 0x0a, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62,
	0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x54, 0x65, 0x6d, 0x70, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x11, 0x6c, 0x6f, 0x77, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x6e, 0x6c, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0f,
	0x6c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x6c, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x12,
	0x4b, 0x0a, 0x13, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x6c, 0x65,
	0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62,
	0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x11, 0x68, 0x69, 0x67, 0x68, 0x65,
	0x73, 0x74, 0x4f, 0x75, 0x74, 0x6c, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x28, 0x0a, 0x0d,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x68,
	0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x08, 0x63, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x68, 0x69, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x58, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3c, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22,
	0x3a, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x22, 0x16, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x52, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a,
	0x68, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x0a, 0x68, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x22, 0x7b, 0x0a, 0x17, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e,
	0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x61, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x68, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x73, 0x22, 0x60, 0x0a, 0x18, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x44, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62,
	0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x22, 0x7c, 0x0a, 0x18, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e,
	0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x61, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x68, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x73, 0x22, 0x61, 0x0a, 0x19, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x44, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e,
	0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x68, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x22, 0x45, 0x0a, 0x14, 0x48, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x2a, 0xf8,
	0x01, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x14, 0x50,
	0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52,
	0x4d, 0x5f, 0x41, 0x4d, 0x31, 0x5f, 0x53, 0x39, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4c,
	0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x41, 0x4d, 0x32, 0x5f, 0x53, 0x31, 0x37, 0x10, 0x02,
	0x12, 0x14, 0x0a, 0x10, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x41, 0x4d, 0x33,
	0x5f, 0x42, 0x42, 0x42, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f,
	0x52, 0x4d, 0x5f, 0x41, 0x4d, 0x33, 0x5f, 0x41, 0x4d, 0x4c, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c,
	0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x53, 0x54, 0x4d, 0x33, 0x32, 0x4d, 0x50,
	0x31, 0x35, 0x37, 0x43, 0x5f, 0x49, 0x49, 0x31, 0x5f, 0x41, 0x4d, 0x32, 0x10, 0x05, 0x12, 0x1b,
	0x0a, 0x17, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x43, 0x56, 0x49, 0x54, 0x45,
	0x4b, 0x5f, 0x42, 0x4d, 0x31, 0x5f, 0x41, 0x4d, 0x32, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x50,
	0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x5a, 0x59, 0x4e, 0x51, 0x5f, 0x42, 0x4d, 0x33,
	0x5f, 0x41, 0x4d, 0x32, 0x10, 0x07, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f,
	0x52, 0x4d, 0x5f, 0x53, 0x54, 0x4d, 0x33, 0x32, 0x4d, 0x50, 0x31, 0x35, 0x37, 0x43, 0x5f, 0x49,
	0x49, 0x32, 0x5f, 0x42, 0x4d, 0x4d, 0x31, 0x10, 0x08, 0x2a, 0xf3, 0x01, 0x0a, 0x15, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x6f, 0x63, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x24, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x42,
	0x4f, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x4f, 0x43, 0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a,
	0x1f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x53,
	0x4f, 0x43, 0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x43, 0x56, 0x49, 0x54, 0x45, 0x4b,
	0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x42, 0x4f,
	0x41, 0x52, 0x44, 0x5f, 0x53, 0x4f, 0x43, 0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x42,
	0x42, 0x42, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f,
	0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x4f, 0x43, 0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59,
	0x5f, 0x41, 0x4d, 0x4c, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f,
	0x4c, 0x5f, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x4f, 0x43, 0x5f, 0x46, 0x41, 0x4d, 0x49,
	0x4c, 0x59, 0x5f, 0x5a, 0x59, 0x4e, 0x51, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x4f, 0x43, 0x5f, 0x46,
	0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x42, 0x52, 0x41, 0x49, 0x49, 0x4e, 0x53, 0x10, 0x05, 0x2a,
	0x87, 0x01, 0x0a, 0x07, 0x42, 0x6f, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x42,
	0x4f, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x4f, 0x53, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x42,
	0x4f, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59,
	0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x4f, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53,
	0x44, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x4f, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x4e, 0x41, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x4f, 0x53, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x45, 0x4d, 0x4d, 0x43, 0x10, 0x05, 0x2a, 0x5f, 0x0a, 0x0a, 0x4d, 0x69, 0x6e,
	0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x49, 0x4e, 0x45, 0x52,
	0x5f, 0x42, 0x52, 0x41, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x42, 0x52,
	0x41, 0x4e, 0x44, 0x5f, 0x41, 0x4e, 0x54, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x10, 0x01, 0x12, 0x1a,
	0x0a, 0x16, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x44, 0x5f, 0x57, 0x48,
	0x41, 0x54, 0x53, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x10, 0x02, 0x2a, 0xb5, 0x05, 0x0a, 0x0a, 0x4d,
	0x69, 0x6e, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x49, 0x4e,
	0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x41, 0x4e, 0x54, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x53,
	0x39, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x4c, 0x5f, 0x41, 0x4e, 0x54, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x58, 0x31, 0x37, 0x10,
	0x02, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c,
	0x5f, 0x41, 0x4e, 0x54, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x31, 0x37, 0x10, 0x03, 0x12,
	0x21, 0x0a, 0x1d, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x41,
	0x4e, 0x54, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x31, 0x37, 0x5f, 0x50, 0x4c, 0x55, 0x53,
	0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x4c, 0x5f, 0x41, 0x4e, 0x54, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x31, 0x37, 0x5f, 0x50,
	0x52, 0x4f, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x4c, 0x5f, 0x41, 0x4e, 0x54, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x31, 0x37,
	0x45, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x4c, 0x5f, 0x41, 0x4e, 0x54, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x54, 0x31, 0x37, 0x10,
	0x07, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c,
	0x5f, 0x41, 0x4e, 0x54, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x54, 0x31, 0x37, 0x45, 0x10, 0x08,
	0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f,
	0x41, 0x4e, 0x54, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x54, 0x31, 0x37, 0x5f, 0x50, 0x4c, 0x55,
	0x53, 0x10, 0x09, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x4c, 0x5f, 0x41, 0x4e, 0x54, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x58, 0x31, 0x39, 0x10,
	0x0a, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c,
	0x5f, 0x41, 0x4e, 0x54, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x31, 0x39, 0x10, 0x0b, 0x12,
	0x20, 0x0a, 0x1c, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x41,
	0x4e, 0x54, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x31, 0x39, 0x5f, 0x50, 0x52, 0x4f, 0x10,
	0x0c, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c,
	0x5f, 0x41, 0x4e, 0x54, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x31, 0x39, 0x5f, 0x50, 0x4c,
	0x55, 0x53, 0x10, 0x0d, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x4c, 0x5f, 0x41, 0x4e, 0x54, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x31, 0x39,
	0x4a, 0x10, 0x0e, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x4c, 0x5f, 0x41, 0x4e, 0x54, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x31, 0x39, 0x4a,
	0x5f, 0x50, 0x52, 0x4f, 0x10, 0x0f, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x41, 0x4e, 0x54, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x53,
	0x31, 0x39, 0x41, 0x10, 0x10, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x41, 0x4e, 0x54, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x31,
	0x39, 0x41, 0x5f, 0x50, 0x52, 0x4f, 0x10, 0x11, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x49, 0x4e, 0x45,
	0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x41, 0x4e, 0x54, 0x4d, 0x49, 0x4e, 0x45, 0x52,
	0x5f, 0x53, 0x31, 0x39, 0x58, 0x50, 0x10, 0x12, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x49, 0x4e, 0x45,
	0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x41, 0x4e, 0x54, 0x4d, 0x49, 0x4e, 0x45, 0x52,
	0x5f, 0x54, 0x31, 0x39, 0x10, 0x13, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x41, 0x4e, 0x54, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x53,
	0x31, 0x39, 0x4a, 0x5f, 0x50, 0x52, 0x4f, 0x5f, 0x50, 0x4c, 0x55, 0x53, 0x10, 0x14, 0x1a, 0x02,
	0x18, 0x01, 0x2a, 0xb4, 0x01, 0x0a, 0x0b, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x17,
	0x0a, 0x13, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e,
	0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x49, 0x4e, 0x45, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17,
	0x4d, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x53,
	0x54, 0x52, 0x49, 0x43, 0x54, 0x45, 0x44, 0x10, 0x05, 0x2a, 0xa8, 0x01, 0x0a, 0x14, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x52,
	0x43, 0x48, 0x49, 0x56, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x55,
	0x50, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x5f, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x5f, 0x5a, 0x49, 0x50, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x55,
	0x50, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x5f, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x5f, 0x42, 0x4f, 0x53, 0x10, 0x02, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x55,
	0x50, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x5f, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x5f, 0x5a, 0x49, 0x50, 0x5f, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54,
	0x45, 0x44, 0x10, 0x03, 0x32, 0xa0, 0x06, 0x0a, 0x0c, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x61, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e,
	0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x62, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d,
	0x69, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x26, 0x2e, 0x62, 0x72,
	0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x69, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x24, 0x2e,
	0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x20, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e,
	0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x62, 0x72, 0x61, 0x69,
	0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x12, 0x24, 0x2e,
	0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x28, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x62, 0x72, 0x61, 0x69,
	0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x65, 0x0a, 0x10, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x12, 0x27, 0x2e, 0x62, 0x72, 0x61,
	0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a,
	0x11, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x28, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x62,
	0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2f, 0x62, 0x6f,
	0x73, 0x2d, 0x70, 0x6c, 0x75, 0x73, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x72, 0x61, 0x69, 0x69,
	0x6e, 0x73, 0x2f, 0x62, 0x6f, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x62, 0x6f, 0x73, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bos_v1_miner_proto_rawDescOnce sync.Once
	file_bos_v1_miner_proto_rawDescData = file_bos_v1_miner_proto_rawDesc
)

func file_bos_v1_miner_proto_rawDescGZIP() []byte {
	file_bos_v1_miner_proto_rawDescOnce.Do(func() {
		file_bos_v1_miner_proto_rawDescData = protoimpl.X.CompressGZIP(file_bos_v1_miner_proto_rawDescData)
	})
	return file_bos_v1_miner_proto_rawDescData
}

var file_bos_v1_miner_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_bos_v1_miner_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_bos_v1_miner_proto_goTypes = []interface{}{
	(Platform)(0),                     // 0: braiins.bos.v1.Platform
	(ControlBoardSocFamily)(0),        // 1: braiins.bos.v1.ControlBoardSocFamily
	(BosMode)(0),                      // 2: braiins.bos.v1.BosMode
	(MinerBrand)(0),                   // 3: braiins.bos.v1.MinerBrand
	(MinerModel)(0),                   // 4: braiins.bos.v1.MinerModel
	(MinerStatus)(0),                  // 5: braiins.bos.v1.MinerStatus
	(SupportArchiveFormat)(0),         // 6: braiins.bos.v1.SupportArchiveFormat
	(*MinerIdentity)(nil),             // 7: braiins.bos.v1.MinerIdentity
	(*BosVersion)(nil),                // 8: braiins.bos.v1.BosVersion
	(*ErrorCode)(nil),                 // 9: braiins.bos.v1.ErrorCode
	(*Component)(nil),                 // 10: braiins.bos.v1.Component
	(*MinerError)(nil),                // 11: braiins.bos.v1.MinerError
	(*GetMinerStatusRequest)(nil),     // 12: braiins.bos.v1.GetMinerStatusRequest
	(*GetMinerStatusResponse)(nil),    // 13: braiins.bos.v1.GetMinerStatusResponse
	(*GetMinerDetailsRequest)(nil),    // 14: braiins.bos.v1.GetMinerDetailsRequest
	(*PsuInfo)(nil),                   // 15: braiins.bos.v1.PsuInfo
	(*GetMinerDetailsResponse)(nil),   // 16: braiins.bos.v1.GetMinerDetailsResponse
	(*MinerPowerStats)(nil),           // 17: braiins.bos.v1.MinerPowerStats
	(*GetMinerStatsRequest)(nil),      // 18: braiins.bos.v1.GetMinerStatsRequest
	(*GetMinerStatsResponse)(nil),     // 19: braiins.bos.v1.GetMinerStatsResponse
	(*GetErrorsRequest)(nil),          // 20: braiins.bos.v1.GetErrorsRequest
	(*GetErrorsResponse)(nil),         // 21: braiins.bos.v1.GetErrorsResponse
	(*Hashboard)(nil),                 // 22: braiins.bos.v1.Hashboard
	(*GetSupportArchiveRequest)(nil),  // 23: braiins.bos.v1.GetSupportArchiveRequest
	(*GetSupportArchiveResponse)(nil), // 24: braiins.bos.v1.GetSupportArchiveResponse
	(*GetHashboardsRequest)(nil),      // 25: braiins.bos.v1.GetHashboardsRequest
	(*GetHashboardsResponse)(nil),     // 26: braiins.bos.v1.GetHashboardsResponse
	(*EnableHashboardsRequest)(nil),   // 27: braiins.bos.v1.EnableHashboardsRequest
	(*EnableHashboardsResponse)(nil),  // 28: braiins.bos.v1.EnableHashboardsResponse
	(*DisableHashboardsRequest)(nil),  // 29: braiins.bos.v1.DisableHashboardsRequest
	(*DisableHashboardsResponse)(nil), // 30: braiins.bos.v1.DisableHashboardsResponse
	(*HashboardEnableState)(nil),      // 31: braiins.bos.v1.HashboardEnableState
	(*wrapperspb.UInt32Value)(nil),    // 32: google.protobuf.UInt32Value
	(*Voltage)(nil),                   // 33: braiins.bos.v1.Voltage
	(*GigaHashrate)(nil),              // 34: braiins.bos.v1.GigaHashrate
	(*Power)(nil),                     // 35: braiins.bos.v1.Power
	(*PowerEfficiency)(nil),           // 36: braiins.bos.v1.PowerEfficiency
	(*PoolStats)(nil),                 // 37: braiins.bos.v1.PoolStats
	(*WorkSolverStats)(nil),           // 38: braiins.bos.v1.WorkSolverStats
	(*Frequency)(nil),                 // 39: braiins.bos.v1.Frequency
	(*TemperatureSensor)(nil),         // 40: braiins.bos.v1.TemperatureSensor
	(*Temperature)(nil),               // 41: braiins.bos.v1.Temperature
	(SaveAction)(0),                   // 42: braiins.bos.v1.SaveAction
}
var file_bos_v1_miner_proto_depIdxs = []int32{
	3,  // 0: braiins.bos.v1.MinerIdentity.brand:type_name -> braiins.bos.v1.MinerBrand
	4,  // 1: braiins.bos.v1.MinerIdentity.model:type_name -> braiins.bos.v1.MinerModel
	9,  // 2: braiins.bos.v1.MinerError.error_codes:type_name -> braiins.bos.v1.ErrorCode
	10, // 3: braiins.bos.v1.MinerError.components:type_name -> braiins.bos.v1.Component
	5,  // 4: braiins.bos.v1.GetMinerStatusResponse.status:type_name -> braiins.bos.v1.MinerStatus
	32, // 5: braiins.bos.v1.PsuInfo.version:type_name -> google.protobuf.UInt32Value
	32, // 6: braiins.bos.v1.PsuInfo.fw_version:type_name -> google.protobuf.UInt32Value
	33, // 7: braiins.bos.v1.PsuInfo.min_voltage:type_name -> braiins.bos.v1.Voltage
	33, // 8: braiins.bos.v1.PsuInfo.max_voltage:type_name -> braiins.bos.v1.Voltage
	7,  // 9: braiins.bos.v1.GetMinerDetailsResponse.miner_identity:type_name -> braiins.bos.v1.MinerIdentity
	0,  // 10: braiins.bos.v1.GetMinerDetailsResponse.platform:type_name -> braiins.bos.v1.Platform
	2,  // 11: braiins.bos.v1.GetMinerDetailsResponse.bos_mode:type_name -> braiins.bos.v1.BosMode
	8,  // 12: braiins.bos.v1.GetMinerDetailsResponse.bos_version:type_name -> braiins.bos.v1.BosVersion
	34, // 13: braiins.bos.v1.GetMinerDetailsResponse.sticker_hashrate:type_name -> braiins.bos.v1.GigaHashrate
	5,  // 14: braiins.bos.v1.GetMinerDetailsResponse.status:type_name -> braiins.bos.v1.MinerStatus
	15, // 15: braiins.bos.v1.GetMinerDetailsResponse.psu_info:type_name -> braiins.bos.v1.PsuInfo
	1,  // 16: braiins.bos.v1.GetMinerDetailsResponse.control_board_soc_family:type_name -> braiins.bos.v1.ControlBoardSocFamily
	35, // 17: braiins.bos.v1.MinerPowerStats.approximated_consumption:type_name -> braiins.bos.v1.Power
	36, // 18: braiins.bos.v1.MinerPowerStats.efficiency:type_name -> braiins.bos.v1.PowerEfficiency
	37, // 19: braiins.bos.v1.GetMinerStatsResponse.pool_stats:type_name -> braiins.bos.v1.PoolStats
	38, // 20: braiins.bos.v1.GetMinerStatsResponse.miner_stats:type_name -> braiins.bos.v1.WorkSolverStats
	17, // 21: braiins.bos.v1.GetMinerStatsResponse.power_stats:type_name -> braiins.bos.v1.MinerPowerStats
	11, // 22: braiins.bos.v1.GetErrorsResponse.errors:type_name -> braiins.bos.v1.MinerError
	32, // 23: braiins.bos.v1.Hashboard.chips_count:type_name -> google.protobuf.UInt32Value
	33, // 24: braiins.bos.v1.Hashboard.current_voltage:type_name -> braiins.bos.v1.Voltage
	39, // 25: braiins.bos.v1.Hashboard.current_frequency:type_name -> braiins.bos.v1.Frequency
	40, // 26: braiins.bos.v1.Hashboard.highest_chip_temp:type_name -> braiins.bos.v1.TemperatureSensor
	41, // 27: braiins.bos.v1.Hashboard.board_temp:type_name -> braiins.bos.v1.Temperature
	38, // 28: braiins.bos.v1.Hashboard.stats:type_name -> braiins.bos.v1.WorkSolverStats
	41, // 29: braiins.bos.v1.Hashboard.lowest_inlet_temp:type_name -> braiins.bos.v1.Temperature
	41, // 30: braiins.bos.v1.Hashboard.highest_outlet_temp:type_name -> braiins.bos.v1.Temperature
	6,  // 31: braiins.bos.v1.GetSupportArchiveRequest.format:type_name -> braiins.bos.v1.SupportArchiveFormat
	22, // 32: braiins.bos.v1.GetHashboardsResponse.hashboards:type_name -> braiins.bos.v1.Hashboard
	42, // 33: braiins.bos.v1.EnableHashboardsRequest.save_action:type_name -> braiins.bos.v1.SaveAction
	31, // 34: braiins.bos.v1.EnableHashboardsResponse.hashboards:type_name -> braiins.bos.v1.HashboardEnableState
	42, // 35: braiins.bos.v1.DisableHashboardsRequest.save_action:type_name -> braiins.bos.v1.SaveAction
	31, // 36: braiins.bos.v1.DisableHashboardsResponse.hashboards:type_name -> braiins.bos.v1.HashboardEnableState
	12, // 37: braiins.bos.v1.MinerService.GetMinerStatus:input_type -> braiins.bos.v1.GetMinerStatusRequest
	14, // 38: braiins.bos.v1.MinerService.GetMinerDetails:input_type -> braiins.bos.v1.GetMinerDetailsRequest
	18, // 39: braiins.bos.v1.MinerService.GetMinerStats:input_type -> braiins.bos.v1.GetMinerStatsRequest
	20, // 40: braiins.bos.v1.MinerService.GetErrors:input_type -> braiins.bos.v1.GetErrorsRequest
	25, // 41: braiins.bos.v1.MinerService.GetHashboards:input_type -> braiins.bos.v1.GetHashboardsRequest
	23, // 42: braiins.bos.v1.MinerService.GetSupportArchive:input_type -> braiins.bos.v1.GetSupportArchiveRequest
	27, // 43: braiins.bos.v1.MinerService.EnableHashboards:input_type -> braiins.bos.v1.EnableHashboardsRequest
	29, // 44: braiins.bos.v1.MinerService.DisableHashboards:input_type -> braiins.bos.v1.DisableHashboardsRequest
	13, // 45: braiins.bos.v1.MinerService.GetMinerStatus:output_type -> braiins.bos.v1.GetMinerStatusResponse
	16, // 46: braiins.bos.v1.MinerService.GetMinerDetails:output_type -> braiins.bos.v1.GetMinerDetailsResponse
	19, // 47: braiins.bos.v1.MinerService.GetMinerStats:output_type -> braiins.bos.v1.GetMinerStatsResponse
	21, // 48: braiins.bos.v1.MinerService.GetErrors:output_type -> braiins.bos.v1.GetErrorsResponse
	26, // 49: braiins.bos.v1.MinerService.GetHashboards:output_type -> braiins.bos.v1.GetHashboardsResponse
	24, // 50: braiins.bos.v1.MinerService.GetSupportArchive:output_type -> braiins.bos.v1.GetSupportArchiveResponse
	28, // 51: braiins.bos.v1.MinerService.EnableHashboards:output_type -> braiins.bos.v1.EnableHashboardsResponse
	30, // 52: braiins.bos.v1.MinerService.DisableHashboards:output_type -> braiins.bos.v1.DisableHashboardsResponse
	45, // [45:53] is the sub-list for method output_type
	37, // [37:45] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_bos_v1_miner_proto_init() }
func file_bos_v1_miner_proto_init() {
	if File_bos_v1_miner_proto != nil {
		return
	}
	file_bos_v1_common_proto_init()
	file_bos_v1_cooling_proto_init()
	file_bos_v1_pool_proto_init()
	file_bos_v1_units_proto_init()
	file_bos_v1_work_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bos_v1_miner_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinerIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_miner_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BosVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_miner_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_miner_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_miner_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinerError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_miner_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMinerStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_miner_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMinerStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_miner_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMinerDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_miner_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PsuInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_miner_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMinerDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_miner_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinerPowerStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_miner_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMinerStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_miner_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMinerStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_miner_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetErrorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_miner_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetErrorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_miner_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hashboard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_miner_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSupportArchiveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_miner_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSupportArchiveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_miner_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHashboardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_miner_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHashboardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_miner_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableHashboardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_miner_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableHashboardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_miner_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableHashboardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_miner_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableHashboardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_miner_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashboardEnableState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bos_v1_miner_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_bos_v1_miner_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_bos_v1_miner_proto_msgTypes[15].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bos_v1_miner_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bos_v1_miner_proto_goTypes,
		DependencyIndexes: file_bos_v1_miner_proto_depIdxs,
		EnumInfos:         file_bos_v1_miner_proto_enumTypes,
		MessageInfos:      file_bos_v1_miner_proto_msgTypes,
	}.Build()
	File_bos_v1_miner_proto = out.File
	file_bos_v1_miner_proto_rawDesc = nil
	file_bos_v1_miner_proto_goTypes = nil
	file_bos_v1_miner_proto_depIdxs = nil
}
