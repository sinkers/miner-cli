// Copyright (C) 2023  Braiins Systems s.r.o.
//
// This file is part of Braiins Open-Source Initiative (BOSI).
//
// BOSI is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
// Please, keep in mind that we may also license BOSI or any part thereof
// under a proprietary license. For more information on the terms and conditions
// of such proprietary license or if you have any other questions, please
// contact us at opensource@braiins.com.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: bos/v1/performance.proto

package bos_proto_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TunerMode int32

const (
	TunerMode_TUNER_MODE_UNSPECIFIED     TunerMode = 0
	TunerMode_TUNER_MODE_POWER_TARGET    TunerMode = 1
	TunerMode_TUNER_MODE_HASHRATE_TARGET TunerMode = 2
)

// Enum value maps for TunerMode.
var (
	TunerMode_name = map[int32]string{
		0: "TUNER_MODE_UNSPECIFIED",
		1: "TUNER_MODE_POWER_TARGET",
		2: "TUNER_MODE_HASHRATE_TARGET",
	}
	TunerMode_value = map[string]int32{
		"TUNER_MODE_UNSPECIFIED":     0,
		"TUNER_MODE_POWER_TARGET":    1,
		"TUNER_MODE_HASHRATE_TARGET": 2,
	}
)

func (x TunerMode) Enum() *TunerMode {
	p := new(TunerMode)
	*p = x
	return p
}

func (x TunerMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TunerMode) Descriptor() protoreflect.EnumDescriptor {
	return file_bos_v1_performance_proto_enumTypes[0].Descriptor()
}

func (TunerMode) Type() protoreflect.EnumType {
	return &file_bos_v1_performance_proto_enumTypes[0]
}

func (x TunerMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TunerMode.Descriptor instead.
func (TunerMode) EnumDescriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{0}
}

type DPSMode int32

const (
	DPSMode_DPS_MODE_UNSPECIFIED DPSMode = 0
	DPSMode_DPS_MODE_NORMAL      DPSMode = 1
	DPSMode_DPS_MODE_BOOST       DPSMode = 2
)

// Enum value maps for DPSMode.
var (
	DPSMode_name = map[int32]string{
		0: "DPS_MODE_UNSPECIFIED",
		1: "DPS_MODE_NORMAL",
		2: "DPS_MODE_BOOST",
	}
	DPSMode_value = map[string]int32{
		"DPS_MODE_UNSPECIFIED": 0,
		"DPS_MODE_NORMAL":      1,
		"DPS_MODE_BOOST":       2,
	}
)

func (x DPSMode) Enum() *DPSMode {
	p := new(DPSMode)
	*p = x
	return p
}

func (x DPSMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DPSMode) Descriptor() protoreflect.EnumDescriptor {
	return file_bos_v1_performance_proto_enumTypes[1].Descriptor()
}

func (DPSMode) Type() protoreflect.EnumType {
	return &file_bos_v1_performance_proto_enumTypes[1]
}

func (x DPSMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DPSMode.Descriptor instead.
func (DPSMode) EnumDescriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{1}
}

type TunerState int32

const (
	TunerState_TUNER_STATE_UNSPECIFIED TunerState = 0
	TunerState_TUNER_STATE_DISABLED    TunerState = 1
	TunerState_TUNER_STATE_STABLE      TunerState = 2
	TunerState_TUNER_STATE_TUNING      TunerState = 3
	TunerState_TUNER_STATE_ERROR       TunerState = 4
)

// Enum value maps for TunerState.
var (
	TunerState_name = map[int32]string{
		0: "TUNER_STATE_UNSPECIFIED",
		1: "TUNER_STATE_DISABLED",
		2: "TUNER_STATE_STABLE",
		3: "TUNER_STATE_TUNING",
		4: "TUNER_STATE_ERROR",
	}
	TunerState_value = map[string]int32{
		"TUNER_STATE_UNSPECIFIED": 0,
		"TUNER_STATE_DISABLED":    1,
		"TUNER_STATE_STABLE":      2,
		"TUNER_STATE_TUNING":      3,
		"TUNER_STATE_ERROR":       4,
	}
)

func (x TunerState) Enum() *TunerState {
	p := new(TunerState)
	*p = x
	return p
}

func (x TunerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TunerState) Descriptor() protoreflect.EnumDescriptor {
	return file_bos_v1_performance_proto_enumTypes[2].Descriptor()
}

func (TunerState) Type() protoreflect.EnumType {
	return &file_bos_v1_performance_proto_enumTypes[2]
}

func (x TunerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TunerState.Descriptor instead.
func (TunerState) EnumDescriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{2}
}

type TunerConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flag if tuner is enabled
	Enabled *bool `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	// Tuner mode
	TunerMode *TunerMode `protobuf:"varint,2,opt,name=tuner_mode,json=tunerMode,proto3,enum=braiins.bos.v1.TunerMode,oneof" json:"tuner_mode,omitempty"`
	// Tuner power target
	PowerTarget *Power `protobuf:"bytes,3,opt,name=power_target,json=powerTarget,proto3" json:"power_target,omitempty"`
	// Tuner hashrate target
	HashrateTarget *TeraHashrate `protobuf:"bytes,4,opt,name=hashrate_target,json=hashrateTarget,proto3" json:"hashrate_target,omitempty"`
}

func (x *TunerConfiguration) Reset() {
	*x = TunerConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_performance_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunerConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunerConfiguration) ProtoMessage() {}

func (x *TunerConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_performance_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunerConfiguration.ProtoReflect.Descriptor instead.
func (*TunerConfiguration) Descriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{0}
}

func (x *TunerConfiguration) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *TunerConfiguration) GetTunerMode() TunerMode {
	if x != nil && x.TunerMode != nil {
		return *x.TunerMode
	}
	return TunerMode_TUNER_MODE_UNSPECIFIED
}

func (x *TunerConfiguration) GetPowerTarget() *Power {
	if x != nil {
		return x.PowerTarget
	}
	return nil
}

func (x *TunerConfiguration) GetHashrateTarget() *TeraHashrate {
	if x != nil {
		return x.HashrateTarget
	}
	return nil
}

type TunerConstraints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Tuner power target mode constraints
	PowerTarget *PowerConstraints `protobuf:"bytes,1,opt,name=power_target,json=powerTarget,proto3" json:"power_target,omitempty"`
	// Tuner hashrate target mode constraints
	HashrateTarget *HashrateConstraints `protobuf:"bytes,2,opt,name=hashrate_target,json=hashrateTarget,proto3" json:"hashrate_target,omitempty"`
	// Tuner enabled enabled default value
	Enabled *BooleanConstraint `protobuf:"bytes,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Default tuner mode
	DefaultMode TunerMode `protobuf:"varint,4,opt,name=default_mode,json=defaultMode,proto3,enum=braiins.bos.v1.TunerMode" json:"default_mode,omitempty"`
}

func (x *TunerConstraints) Reset() {
	*x = TunerConstraints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_performance_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunerConstraints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunerConstraints) ProtoMessage() {}

func (x *TunerConstraints) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_performance_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunerConstraints.ProtoReflect.Descriptor instead.
func (*TunerConstraints) Descriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{1}
}

func (x *TunerConstraints) GetPowerTarget() *PowerConstraints {
	if x != nil {
		return x.PowerTarget
	}
	return nil
}

func (x *TunerConstraints) GetHashrateTarget() *HashrateConstraints {
	if x != nil {
		return x.HashrateTarget
	}
	return nil
}

func (x *TunerConstraints) GetEnabled() *BooleanConstraint {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *TunerConstraints) GetDefaultMode() TunerMode {
	if x != nil {
		return x.DefaultMode
	}
	return TunerMode_TUNER_MODE_UNSPECIFIED
}

type DPSConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flag if Dynamic Performance Scaling is enabled
	Enabled *bool `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	// Dynamic Performance Scaling power step
	PowerStep *Power `protobuf:"bytes,2,opt,name=power_step,json=powerStep,proto3" json:"power_step,omitempty"`
	// Dynamic Performance Scaling hashrate step
	HashrateStep *TeraHashrate `protobuf:"bytes,3,opt,name=hashrate_step,json=hashrateStep,proto3" json:"hashrate_step,omitempty"`
	// Dynamic Performance Scaling minimal power target
	MinPowerTarget *Power `protobuf:"bytes,4,opt,name=min_power_target,json=minPowerTarget,proto3" json:"min_power_target,omitempty"`
	// Dynamic Performance Scaling minimal hashrate target
	MinHashrateTarget *TeraHashrate `protobuf:"bytes,5,opt,name=min_hashrate_target,json=minHashrateTarget,proto3" json:"min_hashrate_target,omitempty"`
	// Flag if shutdown for Dynamic Performance Scaling is enabled
	ShutdownEnabled *bool `protobuf:"varint,6,opt,name=shutdown_enabled,json=shutdownEnabled,proto3,oneof" json:"shutdown_enabled,omitempty"`
	// Dynamic Performance Scaling shutdown duration
	ShutdownDuration *Hours `protobuf:"bytes,7,opt,name=shutdown_duration,json=shutdownDuration,proto3" json:"shutdown_duration,omitempty"`
	// Dynamic Performance Scaling mode
	Mode *DPSMode `protobuf:"varint,8,opt,name=mode,proto3,enum=braiins.bos.v1.DPSMode,oneof" json:"mode,omitempty"`
}

func (x *DPSConfiguration) Reset() {
	*x = DPSConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_performance_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DPSConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DPSConfiguration) ProtoMessage() {}

func (x *DPSConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_performance_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DPSConfiguration.ProtoReflect.Descriptor instead.
func (*DPSConfiguration) Descriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{2}
}

func (x *DPSConfiguration) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *DPSConfiguration) GetPowerStep() *Power {
	if x != nil {
		return x.PowerStep
	}
	return nil
}

func (x *DPSConfiguration) GetHashrateStep() *TeraHashrate {
	if x != nil {
		return x.HashrateStep
	}
	return nil
}

func (x *DPSConfiguration) GetMinPowerTarget() *Power {
	if x != nil {
		return x.MinPowerTarget
	}
	return nil
}

func (x *DPSConfiguration) GetMinHashrateTarget() *TeraHashrate {
	if x != nil {
		return x.MinHashrateTarget
	}
	return nil
}

func (x *DPSConfiguration) GetShutdownEnabled() bool {
	if x != nil && x.ShutdownEnabled != nil {
		return *x.ShutdownEnabled
	}
	return false
}

func (x *DPSConfiguration) GetShutdownDuration() *Hours {
	if x != nil {
		return x.ShutdownDuration
	}
	return nil
}

func (x *DPSConfiguration) GetMode() DPSMode {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return DPSMode_DPS_MODE_UNSPECIFIED
}

type HashboardPerformanceConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common frequency for all HB
	GlobalFrequency *Frequency `protobuf:"bytes,1,opt,name=global_frequency,json=globalFrequency,proto3" json:"global_frequency,omitempty"`
	// Common voltage for all HB
	GlobalVoltage *Voltage `protobuf:"bytes,2,opt,name=global_voltage,json=globalVoltage,proto3" json:"global_voltage,omitempty"`
	// Per hashboard frequency/voltage. It has higher priority than global one
	Hashboards []*HashboardConfig `protobuf:"bytes,3,rep,name=hashboards,proto3" json:"hashboards,omitempty"`
	// Quick ramping time up in seconds. Used in curtailments
	QuickRampingTimeUpS *uint32 `protobuf:"varint,4,opt,name=quick_ramping_time_up_s,json=quickRampingTimeUpS,proto3,oneof" json:"quick_ramping_time_up_s,omitempty"`
	// Quick ramping time down in seconds. Used in curtailments
	QuickRampingTimeDownS *uint32 `protobuf:"varint,5,opt,name=quick_ramping_time_down_s,json=quickRampingTimeDownS,proto3,oneof" json:"quick_ramping_time_down_s,omitempty"`
}

func (x *HashboardPerformanceConfiguration) Reset() {
	*x = HashboardPerformanceConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_performance_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashboardPerformanceConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashboardPerformanceConfiguration) ProtoMessage() {}

func (x *HashboardPerformanceConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_performance_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashboardPerformanceConfiguration.ProtoReflect.Descriptor instead.
func (*HashboardPerformanceConfiguration) Descriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{3}
}

func (x *HashboardPerformanceConfiguration) GetGlobalFrequency() *Frequency {
	if x != nil {
		return x.GlobalFrequency
	}
	return nil
}

func (x *HashboardPerformanceConfiguration) GetGlobalVoltage() *Voltage {
	if x != nil {
		return x.GlobalVoltage
	}
	return nil
}

func (x *HashboardPerformanceConfiguration) GetHashboards() []*HashboardConfig {
	if x != nil {
		return x.Hashboards
	}
	return nil
}

func (x *HashboardPerformanceConfiguration) GetQuickRampingTimeUpS() uint32 {
	if x != nil && x.QuickRampingTimeUpS != nil {
		return *x.QuickRampingTimeUpS
	}
	return 0
}

func (x *HashboardPerformanceConfiguration) GetQuickRampingTimeDownS() uint32 {
	if x != nil && x.QuickRampingTimeDownS != nil {
		return *x.QuickRampingTimeDownS
	}
	return 0
}

type DPSConstraints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Dynamic Performance Scaling power step constraints
	PowerStep *PowerConstraints `protobuf:"bytes,1,opt,name=power_step,json=powerStep,proto3" json:"power_step,omitempty"`
	// Dynamic Performance Scaling hashrate step constraints
	HashrateStep *HashrateConstraints `protobuf:"bytes,2,opt,name=hashrate_step,json=hashrateStep,proto3" json:"hashrate_step,omitempty"`
	// Dynamic Performance Scaling minimal power target constraints
	MinPowerTarget *PowerConstraints `protobuf:"bytes,3,opt,name=min_power_target,json=minPowerTarget,proto3" json:"min_power_target,omitempty"`
	// Dynamic Performance Scaling minimal hashrate target constraints
	MinHashrateTarget *HashrateConstraints `protobuf:"bytes,4,opt,name=min_hashrate_target,json=minHashrateTarget,proto3" json:"min_hashrate_target,omitempty"`
	// Dynamic Performance Scaling enabled shutdown default value
	ShutdownEnabled *BooleanConstraint `protobuf:"bytes,5,opt,name=shutdown_enabled,json=shutdownEnabled,proto3" json:"shutdown_enabled,omitempty"`
	// Dynamic Performance Scaling shutdown duration constraints
	ShutdownDuration *DurationConstraints `protobuf:"bytes,6,opt,name=shutdown_duration,json=shutdownDuration,proto3" json:"shutdown_duration,omitempty"`
	// Dynamic Performance Scaling enabled default value
	Enabled *BooleanConstraint `protobuf:"bytes,7,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Dynamic Performance Scaling default mode
	Mode DPSMode `protobuf:"varint,8,opt,name=mode,proto3,enum=braiins.bos.v1.DPSMode" json:"mode,omitempty"`
}

func (x *DPSConstraints) Reset() {
	*x = DPSConstraints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_performance_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DPSConstraints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DPSConstraints) ProtoMessage() {}

func (x *DPSConstraints) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_performance_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DPSConstraints.ProtoReflect.Descriptor instead.
func (*DPSConstraints) Descriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{4}
}

func (x *DPSConstraints) GetPowerStep() *PowerConstraints {
	if x != nil {
		return x.PowerStep
	}
	return nil
}

func (x *DPSConstraints) GetHashrateStep() *HashrateConstraints {
	if x != nil {
		return x.HashrateStep
	}
	return nil
}

func (x *DPSConstraints) GetMinPowerTarget() *PowerConstraints {
	if x != nil {
		return x.MinPowerTarget
	}
	return nil
}

func (x *DPSConstraints) GetMinHashrateTarget() *HashrateConstraints {
	if x != nil {
		return x.MinHashrateTarget
	}
	return nil
}

func (x *DPSConstraints) GetShutdownEnabled() *BooleanConstraint {
	if x != nil {
		return x.ShutdownEnabled
	}
	return nil
}

func (x *DPSConstraints) GetShutdownDuration() *DurationConstraints {
	if x != nil {
		return x.ShutdownDuration
	}
	return nil
}

func (x *DPSConstraints) GetEnabled() *BooleanConstraint {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *DPSConstraints) GetMode() DPSMode {
	if x != nil {
		return x.Mode
	}
	return DPSMode_DPS_MODE_UNSPECIFIED
}

type HashboardConstraints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of possible HB indices
	HashboardIds []string `protobuf:"bytes,1,rep,name=hashboard_ids,json=hashboardIds,proto3" json:"hashboard_ids,omitempty"`
	// Default value for flag if hashboards are enabled
	Enabled *BooleanConstraint `protobuf:"bytes,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// HB frequency constraints
	Frequency *FrequencyConstraints `protobuf:"bytes,3,opt,name=frequency,proto3" json:"frequency,omitempty"`
	// HB frequency constraints
	Voltage *VoltageConstraints `protobuf:"bytes,4,opt,name=voltage,proto3" json:"voltage,omitempty"`
	// Quick ramping time constraints in seconds. Used in curtailments
	QuickRampingTimeS *UInt32Constraints `protobuf:"bytes,5,opt,name=quick_ramping_time_s,json=quickRampingTimeS,proto3" json:"quick_ramping_time_s,omitempty"`
}

func (x *HashboardConstraints) Reset() {
	*x = HashboardConstraints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_performance_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashboardConstraints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashboardConstraints) ProtoMessage() {}

func (x *HashboardConstraints) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_performance_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashboardConstraints.ProtoReflect.Descriptor instead.
func (*HashboardConstraints) Descriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{5}
}

func (x *HashboardConstraints) GetHashboardIds() []string {
	if x != nil {
		return x.HashboardIds
	}
	return nil
}

func (x *HashboardConstraints) GetEnabled() *BooleanConstraint {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *HashboardConstraints) GetFrequency() *FrequencyConstraints {
	if x != nil {
		return x.Frequency
	}
	return nil
}

func (x *HashboardConstraints) GetVoltage() *VoltageConstraints {
	if x != nil {
		return x.Voltage
	}
	return nil
}

func (x *HashboardConstraints) GetQuickRampingTimeS() *UInt32Constraints {
	if x != nil {
		return x.QuickRampingTimeS
	}
	return nil
}

// Structure to handle power target profile
type PowerTargetProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Creation timestamp
	Created *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created,proto3" json:"created,omitempty"`
	// Tuned power target
	Target *Power `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	// Measured hashrate
	MeasuredHashrate *GigaHashrate `protobuf:"bytes,3,opt,name=measured_hashrate,json=measuredHashrate,proto3" json:"measured_hashrate,omitempty"`
	// Estimated power consumption
	EstimatedPowerConsumption *Power `protobuf:"bytes,4,opt,name=estimated_power_consumption,json=estimatedPowerConsumption,proto3" json:"estimated_power_consumption,omitempty"`
}

func (x *PowerTargetProfile) Reset() {
	*x = PowerTargetProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_performance_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerTargetProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerTargetProfile) ProtoMessage() {}

func (x *PowerTargetProfile) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_performance_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerTargetProfile.ProtoReflect.Descriptor instead.
func (*PowerTargetProfile) Descriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{6}
}

func (x *PowerTargetProfile) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *PowerTargetProfile) GetTarget() *Power {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *PowerTargetProfile) GetMeasuredHashrate() *GigaHashrate {
	if x != nil {
		return x.MeasuredHashrate
	}
	return nil
}

func (x *PowerTargetProfile) GetEstimatedPowerConsumption() *Power {
	if x != nil {
		return x.EstimatedPowerConsumption
	}
	return nil
}

// Structure to handle hashrate target profile
type HashrateTargetProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Creation timestamp
	Created *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created,proto3" json:"created,omitempty"`
	// Tuned hashrate target
	Target *TeraHashrate `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	// Measured hashrate
	MeasuredHashrate *GigaHashrate `protobuf:"bytes,3,opt,name=measured_hashrate,json=measuredHashrate,proto3" json:"measured_hashrate,omitempty"`
	// Estimated power consumption
	EstimatedPowerConsumption *Power `protobuf:"bytes,4,opt,name=estimated_power_consumption,json=estimatedPowerConsumption,proto3" json:"estimated_power_consumption,omitempty"`
}

func (x *HashrateTargetProfile) Reset() {
	*x = HashrateTargetProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_performance_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashrateTargetProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashrateTargetProfile) ProtoMessage() {}

func (x *HashrateTargetProfile) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_performance_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashrateTargetProfile.ProtoReflect.Descriptor instead.
func (*HashrateTargetProfile) Descriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{7}
}

func (x *HashrateTargetProfile) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *HashrateTargetProfile) GetTarget() *TeraHashrate {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *HashrateTargetProfile) GetMeasuredHashrate() *GigaHashrate {
	if x != nil {
		return x.MeasuredHashrate
	}
	return nil
}

func (x *HashrateTargetProfile) GetEstimatedPowerConsumption() *Power {
	if x != nil {
		return x.EstimatedPowerConsumption
	}
	return nil
}

// Request for getting the current performance data
type GetTunerStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetTunerStateRequest) Reset() {
	*x = GetTunerStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_performance_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTunerStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTunerStateRequest) ProtoMessage() {}

func (x *GetTunerStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_performance_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTunerStateRequest.ProtoReflect.Descriptor instead.
func (*GetTunerStateRequest) Descriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{8}
}

// Response with the current tuner details
type GetTunerStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Tuner state
	OverallTunerState TunerState `protobuf:"varint,1,opt,name=overall_tuner_state,json=overallTunerState,proto3,enum=braiins.bos.v1.TunerState" json:"overall_tuner_state,omitempty"`
	// Types that are assignable to ModeState:
	//
	//	*GetTunerStateResponse_PowerTargetModeState
	//	*GetTunerStateResponse_HashrateTargetModeState
	ModeState isGetTunerStateResponse_ModeState `protobuf_oneof:"mode_state"`
}

func (x *GetTunerStateResponse) Reset() {
	*x = GetTunerStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_performance_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTunerStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTunerStateResponse) ProtoMessage() {}

func (x *GetTunerStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_performance_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTunerStateResponse.ProtoReflect.Descriptor instead.
func (*GetTunerStateResponse) Descriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{9}
}

func (x *GetTunerStateResponse) GetOverallTunerState() TunerState {
	if x != nil {
		return x.OverallTunerState
	}
	return TunerState_TUNER_STATE_UNSPECIFIED
}

func (m *GetTunerStateResponse) GetModeState() isGetTunerStateResponse_ModeState {
	if m != nil {
		return m.ModeState
	}
	return nil
}

func (x *GetTunerStateResponse) GetPowerTargetModeState() *PowerTargetModeState {
	if x, ok := x.GetModeState().(*GetTunerStateResponse_PowerTargetModeState); ok {
		return x.PowerTargetModeState
	}
	return nil
}

func (x *GetTunerStateResponse) GetHashrateTargetModeState() *HashrateTargetModeState {
	if x, ok := x.GetModeState().(*GetTunerStateResponse_HashrateTargetModeState); ok {
		return x.HashrateTargetModeState
	}
	return nil
}

type isGetTunerStateResponse_ModeState interface {
	isGetTunerStateResponse_ModeState()
}

type GetTunerStateResponse_PowerTargetModeState struct {
	PowerTargetModeState *PowerTargetModeState `protobuf:"bytes,2,opt,name=power_target_mode_state,json=powerTargetModeState,proto3,oneof"`
}

type GetTunerStateResponse_HashrateTargetModeState struct {
	HashrateTargetModeState *HashrateTargetModeState `protobuf:"bytes,3,opt,name=hashrate_target_mode_state,json=hashrateTargetModeState,proto3,oneof"`
}

func (*GetTunerStateResponse_PowerTargetModeState) isGetTunerStateResponse_ModeState() {}

func (*GetTunerStateResponse_HashrateTargetModeState) isGetTunerStateResponse_ModeState() {}

type PowerTargetModeState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// current power target profile
	Profile *PowerTargetProfile `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
	// Current power target
	CurrentTarget *Power `protobuf:"bytes,2,opt,name=current_target,json=currentTarget,proto3" json:"current_target,omitempty"`
}

func (x *PowerTargetModeState) Reset() {
	*x = PowerTargetModeState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_performance_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerTargetModeState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerTargetModeState) ProtoMessage() {}

func (x *PowerTargetModeState) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_performance_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerTargetModeState.ProtoReflect.Descriptor instead.
func (*PowerTargetModeState) Descriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{10}
}

func (x *PowerTargetModeState) GetProfile() *PowerTargetProfile {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *PowerTargetModeState) GetCurrentTarget() *Power {
	if x != nil {
		return x.CurrentTarget
	}
	return nil
}

type HashrateTargetModeState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Currently used profile
	Profile *HashrateTargetProfile `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
	// Current hashrate target
	CurrentTarget *TeraHashrate `protobuf:"bytes,2,opt,name=current_target,json=currentTarget,proto3" json:"current_target,omitempty"`
}

func (x *HashrateTargetModeState) Reset() {
	*x = HashrateTargetModeState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_performance_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashrateTargetModeState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashrateTargetModeState) ProtoMessage() {}

func (x *HashrateTargetModeState) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_performance_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashrateTargetModeState.ProtoReflect.Descriptor instead.
func (*HashrateTargetModeState) Descriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{11}
}

func (x *HashrateTargetModeState) GetProfile() *HashrateTargetProfile {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *HashrateTargetModeState) GetCurrentTarget() *TeraHashrate {
	if x != nil {
		return x.CurrentTarget
	}
	return nil
}

type ListTargetProfilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListTargetProfilesRequest) Reset() {
	*x = ListTargetProfilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_performance_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTargetProfilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTargetProfilesRequest) ProtoMessage() {}

func (x *ListTargetProfilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_performance_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTargetProfilesRequest.ProtoReflect.Descriptor instead.
func (*ListTargetProfilesRequest) Descriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{12}
}

type ListTargetProfilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Tuner profiles for power target mode
	PowerTargetProfiles    []*PowerTargetProfile    `protobuf:"bytes,1,rep,name=power_target_profiles,json=powerTargetProfiles,proto3" json:"power_target_profiles,omitempty"`
	HashrateTargetProfiles []*HashrateTargetProfile `protobuf:"bytes,2,rep,name=hashrate_target_profiles,json=hashrateTargetProfiles,proto3" json:"hashrate_target_profiles,omitempty"`
}

func (x *ListTargetProfilesResponse) Reset() {
	*x = ListTargetProfilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_performance_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTargetProfilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTargetProfilesResponse) ProtoMessage() {}

func (x *ListTargetProfilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_performance_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTargetProfilesResponse.ProtoReflect.Descriptor instead.
func (*ListTargetProfilesResponse) Descriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{13}
}

func (x *ListTargetProfilesResponse) GetPowerTargetProfiles() []*PowerTargetProfile {
	if x != nil {
		return x.PowerTargetProfiles
	}
	return nil
}

func (x *ListTargetProfilesResponse) GetHashrateTargetProfiles() []*HashrateTargetProfile {
	if x != nil {
		return x.HashrateTargetProfiles
	}
	return nil
}

// Request for set default power target action.
type SetDefaultPowerTargetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Save action
	SaveAction SaveAction `protobuf:"varint,1,opt,name=save_action,json=saveAction,proto3,enum=braiins.bos.v1.SaveAction" json:"save_action,omitempty"`
}

func (x *SetDefaultPowerTargetRequest) Reset() {
	*x = SetDefaultPowerTargetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_performance_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDefaultPowerTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDefaultPowerTargetRequest) ProtoMessage() {}

func (x *SetDefaultPowerTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_performance_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDefaultPowerTargetRequest.ProtoReflect.Descriptor instead.
func (*SetDefaultPowerTargetRequest) Descriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{14}
}

func (x *SetDefaultPowerTargetRequest) GetSaveAction() SaveAction {
	if x != nil {
		return x.SaveAction
	}
	return SaveAction_SAVE_ACTION_UNSPECIFIED
}

// Request for set absolute power target action.
type SetPowerTargetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Save action
	SaveAction SaveAction `protobuf:"varint,1,opt,name=save_action,json=saveAction,proto3,enum=braiins.bos.v1.SaveAction" json:"save_action,omitempty"`
	// Absolute value of power target
	PowerTarget *Power `protobuf:"bytes,2,opt,name=power_target,json=powerTarget,proto3" json:"power_target,omitempty"`
}

func (x *SetPowerTargetRequest) Reset() {
	*x = SetPowerTargetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_performance_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPowerTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPowerTargetRequest) ProtoMessage() {}

func (x *SetPowerTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_performance_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPowerTargetRequest.ProtoReflect.Descriptor instead.
func (*SetPowerTargetRequest) Descriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{15}
}

func (x *SetPowerTargetRequest) GetSaveAction() SaveAction {
	if x != nil {
		return x.SaveAction
	}
	return SaveAction_SAVE_ACTION_UNSPECIFIED
}

func (x *SetPowerTargetRequest) GetPowerTarget() *Power {
	if x != nil {
		return x.PowerTarget
	}
	return nil
}

// Request for increment power target action.
type IncrementPowerTargetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Save action
	SaveAction SaveAction `protobuf:"varint,1,opt,name=save_action,json=saveAction,proto3,enum=braiins.bos.v1.SaveAction" json:"save_action,omitempty"`
	// Incremental value of power target
	PowerTargetIncrement *Power `protobuf:"bytes,2,opt,name=power_target_increment,json=powerTargetIncrement,proto3" json:"power_target_increment,omitempty"`
}

func (x *IncrementPowerTargetRequest) Reset() {
	*x = IncrementPowerTargetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_performance_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncrementPowerTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrementPowerTargetRequest) ProtoMessage() {}

func (x *IncrementPowerTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_performance_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrementPowerTargetRequest.ProtoReflect.Descriptor instead.
func (*IncrementPowerTargetRequest) Descriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{16}
}

func (x *IncrementPowerTargetRequest) GetSaveAction() SaveAction {
	if x != nil {
		return x.SaveAction
	}
	return SaveAction_SAVE_ACTION_UNSPECIFIED
}

func (x *IncrementPowerTargetRequest) GetPowerTargetIncrement() *Power {
	if x != nil {
		return x.PowerTargetIncrement
	}
	return nil
}

// Request for decrement power target action.
type DecrementPowerTargetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Save action
	SaveAction SaveAction `protobuf:"varint,1,opt,name=save_action,json=saveAction,proto3,enum=braiins.bos.v1.SaveAction" json:"save_action,omitempty"`
	// Decremental value of power target
	PowerTargetDecrement *Power `protobuf:"bytes,2,opt,name=power_target_decrement,json=powerTargetDecrement,proto3" json:"power_target_decrement,omitempty"`
}

func (x *DecrementPowerTargetRequest) Reset() {
	*x = DecrementPowerTargetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_performance_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecrementPowerTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecrementPowerTargetRequest) ProtoMessage() {}

func (x *DecrementPowerTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_performance_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecrementPowerTargetRequest.ProtoReflect.Descriptor instead.
func (*DecrementPowerTargetRequest) Descriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{17}
}

func (x *DecrementPowerTargetRequest) GetSaveAction() SaveAction {
	if x != nil {
		return x.SaveAction
	}
	return SaveAction_SAVE_ACTION_UNSPECIFIED
}

func (x *DecrementPowerTargetRequest) GetPowerTargetDecrement() *Power {
	if x != nil {
		return x.PowerTargetDecrement
	}
	return nil
}

// Response for set power target action.
type SetPowerTargetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// New value of power target
	PowerTarget *Power `protobuf:"bytes,1,opt,name=power_target,json=powerTarget,proto3" json:"power_target,omitempty"`
}

func (x *SetPowerTargetResponse) Reset() {
	*x = SetPowerTargetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_performance_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPowerTargetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPowerTargetResponse) ProtoMessage() {}

func (x *SetPowerTargetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_performance_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPowerTargetResponse.ProtoReflect.Descriptor instead.
func (*SetPowerTargetResponse) Descriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{18}
}

func (x *SetPowerTargetResponse) GetPowerTarget() *Power {
	if x != nil {
		return x.PowerTarget
	}
	return nil
}

// Request for set default hashrate target action.
type SetDefaultHashrateTargetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Save action
	SaveAction SaveAction `protobuf:"varint,1,opt,name=save_action,json=saveAction,proto3,enum=braiins.bos.v1.SaveAction" json:"save_action,omitempty"`
}

func (x *SetDefaultHashrateTargetRequest) Reset() {
	*x = SetDefaultHashrateTargetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_performance_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDefaultHashrateTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDefaultHashrateTargetRequest) ProtoMessage() {}

func (x *SetDefaultHashrateTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_performance_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDefaultHashrateTargetRequest.ProtoReflect.Descriptor instead.
func (*SetDefaultHashrateTargetRequest) Descriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{19}
}

func (x *SetDefaultHashrateTargetRequest) GetSaveAction() SaveAction {
	if x != nil {
		return x.SaveAction
	}
	return SaveAction_SAVE_ACTION_UNSPECIFIED
}

// Request for set absolute hashrate target action.
type SetHashrateTargetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Save action
	SaveAction SaveAction `protobuf:"varint,1,opt,name=save_action,json=saveAction,proto3,enum=braiins.bos.v1.SaveAction" json:"save_action,omitempty"`
	// Absolute value of hashrate target
	HashrateTarget *TeraHashrate `protobuf:"bytes,2,opt,name=hashrate_target,json=hashrateTarget,proto3" json:"hashrate_target,omitempty"`
}

func (x *SetHashrateTargetRequest) Reset() {
	*x = SetHashrateTargetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_performance_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetHashrateTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetHashrateTargetRequest) ProtoMessage() {}

func (x *SetHashrateTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_performance_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetHashrateTargetRequest.ProtoReflect.Descriptor instead.
func (*SetHashrateTargetRequest) Descriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{20}
}

func (x *SetHashrateTargetRequest) GetSaveAction() SaveAction {
	if x != nil {
		return x.SaveAction
	}
	return SaveAction_SAVE_ACTION_UNSPECIFIED
}

func (x *SetHashrateTargetRequest) GetHashrateTarget() *TeraHashrate {
	if x != nil {
		return x.HashrateTarget
	}
	return nil
}

// Request for increment hashrate target action.
type IncrementHashrateTargetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Save action
	SaveAction SaveAction `protobuf:"varint,1,opt,name=save_action,json=saveAction,proto3,enum=braiins.bos.v1.SaveAction" json:"save_action,omitempty"`
	// Incremental value of hashrate target
	HashrateTargetIncrement *TeraHashrate `protobuf:"bytes,2,opt,name=hashrate_target_increment,json=hashrateTargetIncrement,proto3" json:"hashrate_target_increment,omitempty"`
}

func (x *IncrementHashrateTargetRequest) Reset() {
	*x = IncrementHashrateTargetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_performance_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncrementHashrateTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrementHashrateTargetRequest) ProtoMessage() {}

func (x *IncrementHashrateTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_performance_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrementHashrateTargetRequest.ProtoReflect.Descriptor instead.
func (*IncrementHashrateTargetRequest) Descriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{21}
}

func (x *IncrementHashrateTargetRequest) GetSaveAction() SaveAction {
	if x != nil {
		return x.SaveAction
	}
	return SaveAction_SAVE_ACTION_UNSPECIFIED
}

func (x *IncrementHashrateTargetRequest) GetHashrateTargetIncrement() *TeraHashrate {
	if x != nil {
		return x.HashrateTargetIncrement
	}
	return nil
}

// Request for decrement hashrate target action.
type DecrementHashrateTargetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Save action
	SaveAction SaveAction `protobuf:"varint,1,opt,name=save_action,json=saveAction,proto3,enum=braiins.bos.v1.SaveAction" json:"save_action,omitempty"`
	// Decremental value of hashrate target
	HashrateTargetDecrement *TeraHashrate `protobuf:"bytes,2,opt,name=hashrate_target_decrement,json=hashrateTargetDecrement,proto3" json:"hashrate_target_decrement,omitempty"`
}

func (x *DecrementHashrateTargetRequest) Reset() {
	*x = DecrementHashrateTargetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_performance_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecrementHashrateTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecrementHashrateTargetRequest) ProtoMessage() {}

func (x *DecrementHashrateTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_performance_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecrementHashrateTargetRequest.ProtoReflect.Descriptor instead.
func (*DecrementHashrateTargetRequest) Descriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{22}
}

func (x *DecrementHashrateTargetRequest) GetSaveAction() SaveAction {
	if x != nil {
		return x.SaveAction
	}
	return SaveAction_SAVE_ACTION_UNSPECIFIED
}

func (x *DecrementHashrateTargetRequest) GetHashrateTargetDecrement() *TeraHashrate {
	if x != nil {
		return x.HashrateTargetDecrement
	}
	return nil
}

// Response for set hashrate target action.
type SetHashrateTargetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// New value of hashrate target
	HashrateTarget *TeraHashrate `protobuf:"bytes,1,opt,name=hashrate_target,json=hashrateTarget,proto3" json:"hashrate_target,omitempty"`
}

func (x *SetHashrateTargetResponse) Reset() {
	*x = SetHashrateTargetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_performance_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetHashrateTargetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetHashrateTargetResponse) ProtoMessage() {}

func (x *SetHashrateTargetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_performance_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetHashrateTargetResponse.ProtoReflect.Descriptor instead.
func (*SetHashrateTargetResponse) Descriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{23}
}

func (x *SetHashrateTargetResponse) GetHashrateTarget() *TeraHashrate {
	if x != nil {
		return x.HashrateTarget
	}
	return nil
}

type DPSPowerTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Dynamic Performance Scaling power step
	PowerStep *Power `protobuf:"bytes,1,opt,name=power_step,json=powerStep,proto3" json:"power_step,omitempty"`
	// Dynamic Performance Scaling minimal power target
	MinPowerTarget *Power `protobuf:"bytes,2,opt,name=min_power_target,json=minPowerTarget,proto3" json:"min_power_target,omitempty"`
}

func (x *DPSPowerTarget) Reset() {
	*x = DPSPowerTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_performance_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DPSPowerTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DPSPowerTarget) ProtoMessage() {}

func (x *DPSPowerTarget) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_performance_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DPSPowerTarget.ProtoReflect.Descriptor instead.
func (*DPSPowerTarget) Descriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{24}
}

func (x *DPSPowerTarget) GetPowerStep() *Power {
	if x != nil {
		return x.PowerStep
	}
	return nil
}

func (x *DPSPowerTarget) GetMinPowerTarget() *Power {
	if x != nil {
		return x.MinPowerTarget
	}
	return nil
}

type DPSHashrateTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Dynamic Performance Scaling hashrate step
	HashrateStep *TeraHashrate `protobuf:"bytes,1,opt,name=hashrate_step,json=hashrateStep,proto3" json:"hashrate_step,omitempty"`
	// Dynamic Performance Scaling minimal hashrate target
	MinHashrateTarget *TeraHashrate `protobuf:"bytes,2,opt,name=min_hashrate_target,json=minHashrateTarget,proto3" json:"min_hashrate_target,omitempty"`
}

func (x *DPSHashrateTarget) Reset() {
	*x = DPSHashrateTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_performance_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DPSHashrateTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DPSHashrateTarget) ProtoMessage() {}

func (x *DPSHashrateTarget) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_performance_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DPSHashrateTarget.ProtoReflect.Descriptor instead.
func (*DPSHashrateTarget) Descriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{25}
}

func (x *DPSHashrateTarget) GetHashrateStep() *TeraHashrate {
	if x != nil {
		return x.HashrateStep
	}
	return nil
}

func (x *DPSHashrateTarget) GetMinHashrateTarget() *TeraHashrate {
	if x != nil {
		return x.MinHashrateTarget
	}
	return nil
}

type DPSTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Target:
	//
	//	*DPSTarget_PowerTarget
	//	*DPSTarget_HashrateTarget
	Target isDPSTarget_Target `protobuf_oneof:"target"`
}

func (x *DPSTarget) Reset() {
	*x = DPSTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_performance_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DPSTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DPSTarget) ProtoMessage() {}

func (x *DPSTarget) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_performance_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DPSTarget.ProtoReflect.Descriptor instead.
func (*DPSTarget) Descriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{26}
}

func (m *DPSTarget) GetTarget() isDPSTarget_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (x *DPSTarget) GetPowerTarget() *DPSPowerTarget {
	if x, ok := x.GetTarget().(*DPSTarget_PowerTarget); ok {
		return x.PowerTarget
	}
	return nil
}

func (x *DPSTarget) GetHashrateTarget() *DPSHashrateTarget {
	if x, ok := x.GetTarget().(*DPSTarget_HashrateTarget); ok {
		return x.HashrateTarget
	}
	return nil
}

type isDPSTarget_Target interface {
	isDPSTarget_Target()
}

type DPSTarget_PowerTarget struct {
	// Power target settings for Dynamic Performance Scaling
	PowerTarget *DPSPowerTarget `protobuf:"bytes,1,opt,name=power_target,json=powerTarget,proto3,oneof"`
}

type DPSTarget_HashrateTarget struct {
	// Hashrate target settings for Dynamic Performance Scaling
	HashrateTarget *DPSHashrateTarget `protobuf:"bytes,2,opt,name=hashrate_target,json=hashrateTarget,proto3,oneof"`
}

func (*DPSTarget_PowerTarget) isDPSTarget_Target() {}

func (*DPSTarget_HashrateTarget) isDPSTarget_Target() {}

type SetDPSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Save action
	SaveAction SaveAction `protobuf:"varint,1,opt,name=save_action,json=saveAction,proto3,enum=braiins.bos.v1.SaveAction" json:"save_action,omitempty"`
	// Flag if Dynamic Performance Scaling should be enabled
	Enable *bool `protobuf:"varint,2,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
	// Flag if shutdown for Dynamic Performance Scaling should be enabled
	EnableShutdown *bool `protobuf:"varint,3,opt,name=enable_shutdown,json=enableShutdown,proto3,oneof" json:"enable_shutdown,omitempty"`
	// Dynamic Performance Scaling shutdown duration
	ShutdownDuration *Hours `protobuf:"bytes,4,opt,name=shutdown_duration,json=shutdownDuration,proto3,oneof" json:"shutdown_duration,omitempty"`
	// Dynamic Performance Scaling target
	Target *DPSTarget `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty"`
	// Dynamic Performance Scaling mode
	Mode *DPSMode `protobuf:"varint,6,opt,name=mode,proto3,enum=braiins.bos.v1.DPSMode,oneof" json:"mode,omitempty"`
}

func (x *SetDPSRequest) Reset() {
	*x = SetDPSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_performance_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDPSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDPSRequest) ProtoMessage() {}

func (x *SetDPSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_performance_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDPSRequest.ProtoReflect.Descriptor instead.
func (*SetDPSRequest) Descriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{27}
}

func (x *SetDPSRequest) GetSaveAction() SaveAction {
	if x != nil {
		return x.SaveAction
	}
	return SaveAction_SAVE_ACTION_UNSPECIFIED
}

func (x *SetDPSRequest) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *SetDPSRequest) GetEnableShutdown() bool {
	if x != nil && x.EnableShutdown != nil {
		return *x.EnableShutdown
	}
	return false
}

func (x *SetDPSRequest) GetShutdownDuration() *Hours {
	if x != nil {
		return x.ShutdownDuration
	}
	return nil
}

func (x *SetDPSRequest) GetTarget() *DPSTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *SetDPSRequest) GetMode() DPSMode {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return DPSMode_DPS_MODE_UNSPECIFIED
}

type SetDPSResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flag if Dynamic Performance Scaling is enabled
	Enabled *bool `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	// Flag if shutdown for Dynamic Performance Scaling should be enabled
	ShutdownEnabled *bool `protobuf:"varint,2,opt,name=shutdown_enabled,json=shutdownEnabled,proto3,oneof" json:"shutdown_enabled,omitempty"`
	// Dynamic Performance Scaling shutdown duration
	ShutdownDuration *Hours `protobuf:"bytes,3,opt,name=shutdown_duration,json=shutdownDuration,proto3,oneof" json:"shutdown_duration,omitempty"`
	// Dynamic Performance Scaling Power target
	PowerTarget *DPSPowerTarget `protobuf:"bytes,4,opt,name=power_target,json=powerTarget,proto3" json:"power_target,omitempty"`
	// Dynamic Performance Scaling hashrate target
	HashrateTarget *DPSHashrateTarget `protobuf:"bytes,5,opt,name=hashrate_target,json=hashrateTarget,proto3" json:"hashrate_target,omitempty"`
	// Dynamic Performance Scaling mode
	Mode *DPSMode `protobuf:"varint,6,opt,name=mode,proto3,enum=braiins.bos.v1.DPSMode,oneof" json:"mode,omitempty"`
}

func (x *SetDPSResponse) Reset() {
	*x = SetDPSResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_performance_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDPSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDPSResponse) ProtoMessage() {}

func (x *SetDPSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_performance_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDPSResponse.ProtoReflect.Descriptor instead.
func (*SetDPSResponse) Descriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{28}
}

func (x *SetDPSResponse) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *SetDPSResponse) GetShutdownEnabled() bool {
	if x != nil && x.ShutdownEnabled != nil {
		return *x.ShutdownEnabled
	}
	return false
}

func (x *SetDPSResponse) GetShutdownDuration() *Hours {
	if x != nil {
		return x.ShutdownDuration
	}
	return nil
}

func (x *SetDPSResponse) GetPowerTarget() *DPSPowerTarget {
	if x != nil {
		return x.PowerTarget
	}
	return nil
}

func (x *SetDPSResponse) GetHashrateTarget() *DPSHashrateTarget {
	if x != nil {
		return x.HashrateTarget
	}
	return nil
}

func (x *SetDPSResponse) GetMode() DPSMode {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return DPSMode_DPS_MODE_UNSPECIFIED
}

type HashboardPerformanceSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hashboard id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Hashboard frequency
	Frequency *Frequency `protobuf:"bytes,2,opt,name=frequency,proto3" json:"frequency,omitempty"`
	// Hashboard voltage
	Voltage *Voltage `protobuf:"bytes,3,opt,name=voltage,proto3" json:"voltage,omitempty"`
}

func (x *HashboardPerformanceSettings) Reset() {
	*x = HashboardPerformanceSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_performance_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashboardPerformanceSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashboardPerformanceSettings) ProtoMessage() {}

func (x *HashboardPerformanceSettings) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_performance_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashboardPerformanceSettings.ProtoReflect.Descriptor instead.
func (*HashboardPerformanceSettings) Descriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{29}
}

func (x *HashboardPerformanceSettings) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HashboardPerformanceSettings) GetFrequency() *Frequency {
	if x != nil {
		return x.Frequency
	}
	return nil
}

func (x *HashboardPerformanceSettings) GetVoltage() *Voltage {
	if x != nil {
		return x.Voltage
	}
	return nil
}

type HashboardConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hashboard id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Flag if HB si enabled
	Enabled *bool `protobuf:"varint,2,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	// Hashboard frequency
	Frequency *Frequency `protobuf:"bytes,3,opt,name=frequency,proto3" json:"frequency,omitempty"`
	// Hashboard voltage
	Voltage *Voltage `protobuf:"bytes,4,opt,name=voltage,proto3" json:"voltage,omitempty"`
}

func (x *HashboardConfig) Reset() {
	*x = HashboardConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_performance_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashboardConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashboardConfig) ProtoMessage() {}

func (x *HashboardConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_performance_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashboardConfig.ProtoReflect.Descriptor instead.
func (*HashboardConfig) Descriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{30}
}

func (x *HashboardConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HashboardConfig) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *HashboardConfig) GetFrequency() *Frequency {
	if x != nil {
		return x.Frequency
	}
	return nil
}

func (x *HashboardConfig) GetVoltage() *Voltage {
	if x != nil {
		return x.Voltage
	}
	return nil
}

type ManualPerformanceMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Global hashboard frequency
	GlobalFrequency *Frequency `protobuf:"bytes,1,opt,name=global_frequency,json=globalFrequency,proto3" json:"global_frequency,omitempty"`
	// Global hashboard voltage
	GlobalVoltage *Voltage `protobuf:"bytes,2,opt,name=global_voltage,json=globalVoltage,proto3" json:"global_voltage,omitempty"`
	// Per hashboard frequency/voltage. It has higher priority than global one
	Hashboards []*HashboardPerformanceSettings `protobuf:"bytes,3,rep,name=hashboards,proto3" json:"hashboards,omitempty"`
}

func (x *ManualPerformanceMode) Reset() {
	*x = ManualPerformanceMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_performance_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualPerformanceMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualPerformanceMode) ProtoMessage() {}

func (x *ManualPerformanceMode) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_performance_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualPerformanceMode.ProtoReflect.Descriptor instead.
func (*ManualPerformanceMode) Descriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{31}
}

func (x *ManualPerformanceMode) GetGlobalFrequency() *Frequency {
	if x != nil {
		return x.GlobalFrequency
	}
	return nil
}

func (x *ManualPerformanceMode) GetGlobalVoltage() *Voltage {
	if x != nil {
		return x.GlobalVoltage
	}
	return nil
}

func (x *ManualPerformanceMode) GetHashboards() []*HashboardPerformanceSettings {
	if x != nil {
		return x.Hashboards
	}
	return nil
}

type PowerTargetMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Power target
	PowerTarget *Power `protobuf:"bytes,1,opt,name=power_target,json=powerTarget,proto3" json:"power_target,omitempty"`
}

func (x *PowerTargetMode) Reset() {
	*x = PowerTargetMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_performance_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerTargetMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerTargetMode) ProtoMessage() {}

func (x *PowerTargetMode) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_performance_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerTargetMode.ProtoReflect.Descriptor instead.
func (*PowerTargetMode) Descriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{32}
}

func (x *PowerTargetMode) GetPowerTarget() *Power {
	if x != nil {
		return x.PowerTarget
	}
	return nil
}

type HashrateTargetMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hashrate target
	HashrateTarget *TeraHashrate `protobuf:"bytes,1,opt,name=hashrate_target,json=hashrateTarget,proto3" json:"hashrate_target,omitempty"`
}

func (x *HashrateTargetMode) Reset() {
	*x = HashrateTargetMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_performance_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashrateTargetMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashrateTargetMode) ProtoMessage() {}

func (x *HashrateTargetMode) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_performance_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashrateTargetMode.ProtoReflect.Descriptor instead.
func (*HashrateTargetMode) Descriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{33}
}

func (x *HashrateTargetMode) GetHashrateTarget() *TeraHashrate {
	if x != nil {
		return x.HashrateTarget
	}
	return nil
}

type TunerPerformanceMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Target:
	//
	//	*TunerPerformanceMode_PowerTarget
	//	*TunerPerformanceMode_HashrateTarget
	Target isTunerPerformanceMode_Target `protobuf_oneof:"target"`
}

func (x *TunerPerformanceMode) Reset() {
	*x = TunerPerformanceMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_performance_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunerPerformanceMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunerPerformanceMode) ProtoMessage() {}

func (x *TunerPerformanceMode) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_performance_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunerPerformanceMode.ProtoReflect.Descriptor instead.
func (*TunerPerformanceMode) Descriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{34}
}

func (m *TunerPerformanceMode) GetTarget() isTunerPerformanceMode_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (x *TunerPerformanceMode) GetPowerTarget() *PowerTargetMode {
	if x, ok := x.GetTarget().(*TunerPerformanceMode_PowerTarget); ok {
		return x.PowerTarget
	}
	return nil
}

func (x *TunerPerformanceMode) GetHashrateTarget() *HashrateTargetMode {
	if x, ok := x.GetTarget().(*TunerPerformanceMode_HashrateTarget); ok {
		return x.HashrateTarget
	}
	return nil
}

type isTunerPerformanceMode_Target interface {
	isTunerPerformanceMode_Target()
}

type TunerPerformanceMode_PowerTarget struct {
	// Tuner power target
	PowerTarget *PowerTargetMode `protobuf:"bytes,1,opt,name=power_target,json=powerTarget,proto3,oneof"`
}

type TunerPerformanceMode_HashrateTarget struct {
	// Tuner hashrate target
	HashrateTarget *HashrateTargetMode `protobuf:"bytes,2,opt,name=hashrate_target,json=hashrateTarget,proto3,oneof"`
}

func (*TunerPerformanceMode_PowerTarget) isTunerPerformanceMode_Target() {}

func (*TunerPerformanceMode_HashrateTarget) isTunerPerformanceMode_Target() {}

type SetPerformanceModeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Save action
	SaveAction SaveAction       `protobuf:"varint,1,opt,name=save_action,json=saveAction,proto3,enum=braiins.bos.v1.SaveAction" json:"save_action,omitempty"`
	Mode       *PerformanceMode `protobuf:"bytes,2,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (x *SetPerformanceModeRequest) Reset() {
	*x = SetPerformanceModeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_performance_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPerformanceModeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPerformanceModeRequest) ProtoMessage() {}

func (x *SetPerformanceModeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_performance_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPerformanceModeRequest.ProtoReflect.Descriptor instead.
func (*SetPerformanceModeRequest) Descriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{35}
}

func (x *SetPerformanceModeRequest) GetSaveAction() SaveAction {
	if x != nil {
		return x.SaveAction
	}
	return SaveAction_SAVE_ACTION_UNSPECIFIED
}

func (x *SetPerformanceModeRequest) GetMode() *PerformanceMode {
	if x != nil {
		return x.Mode
	}
	return nil
}

type PerformanceMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Mode:
	//
	//	*PerformanceMode_ManualMode
	//	*PerformanceMode_TunerMode
	Mode isPerformanceMode_Mode `protobuf_oneof:"mode"`
}

func (x *PerformanceMode) Reset() {
	*x = PerformanceMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_performance_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformanceMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceMode) ProtoMessage() {}

func (x *PerformanceMode) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_performance_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceMode.ProtoReflect.Descriptor instead.
func (*PerformanceMode) Descriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{36}
}

func (m *PerformanceMode) GetMode() isPerformanceMode_Mode {
	if m != nil {
		return m.Mode
	}
	return nil
}

func (x *PerformanceMode) GetManualMode() *ManualPerformanceMode {
	if x, ok := x.GetMode().(*PerformanceMode_ManualMode); ok {
		return x.ManualMode
	}
	return nil
}

func (x *PerformanceMode) GetTunerMode() *TunerPerformanceMode {
	if x, ok := x.GetMode().(*PerformanceMode_TunerMode); ok {
		return x.TunerMode
	}
	return nil
}

type isPerformanceMode_Mode interface {
	isPerformanceMode_Mode()
}

type PerformanceMode_ManualMode struct {
	ManualMode *ManualPerformanceMode `protobuf:"bytes,1,opt,name=manual_mode,json=manualMode,proto3,oneof"`
}

type PerformanceMode_TunerMode struct {
	TunerMode *TunerPerformanceMode `protobuf:"bytes,2,opt,name=tuner_mode,json=tunerMode,proto3,oneof"`
}

func (*PerformanceMode_ManualMode) isPerformanceMode_Mode() {}

func (*PerformanceMode_TunerMode) isPerformanceMode_Mode() {}

type GetPerformanceModeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetPerformanceModeRequest) Reset() {
	*x = GetPerformanceModeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_performance_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPerformanceModeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPerformanceModeRequest) ProtoMessage() {}

func (x *GetPerformanceModeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_performance_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPerformanceModeRequest.ProtoReflect.Descriptor instead.
func (*GetPerformanceModeRequest) Descriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{37}
}

type RemoveTunedProfilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveTunedProfilesRequest) Reset() {
	*x = RemoveTunedProfilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_performance_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTunedProfilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTunedProfilesRequest) ProtoMessage() {}

func (x *RemoveTunedProfilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_performance_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTunedProfilesRequest.ProtoReflect.Descriptor instead.
func (*RemoveTunedProfilesRequest) Descriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{38}
}

type RemoveTunedProfilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveTunedProfilesResponse) Reset() {
	*x = RemoveTunedProfilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_performance_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTunedProfilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTunedProfilesResponse) ProtoMessage() {}

func (x *RemoveTunedProfilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_performance_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTunedProfilesResponse.ProtoReflect.Descriptor instead.
func (*RemoveTunedProfilesResponse) Descriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{39}
}

type SetQuickRampingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Save action
	SaveAction SaveAction `protobuf:"varint,1,opt,name=save_action,json=saveAction,proto3,enum=braiins.bos.v1.SaveAction" json:"save_action,omitempty"`
	// Quick ramping time up in seconds when RESUMING the miner. Sets how fast the miner will power up. Used in curtailments
	UpS uint32 `protobuf:"varint,2,opt,name=up_s,json=upS,proto3" json:"up_s,omitempty"`
	// Quick ramping time down in seconds when PAUSING the miner. Sets how fast the miner will power off. Used in curtailments
	DownS uint32 `protobuf:"varint,3,opt,name=down_s,json=downS,proto3" json:"down_s,omitempty"`
}

func (x *SetQuickRampingRequest) Reset() {
	*x = SetQuickRampingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_performance_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetQuickRampingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetQuickRampingRequest) ProtoMessage() {}

func (x *SetQuickRampingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_performance_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetQuickRampingRequest.ProtoReflect.Descriptor instead.
func (*SetQuickRampingRequest) Descriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{40}
}

func (x *SetQuickRampingRequest) GetSaveAction() SaveAction {
	if x != nil {
		return x.SaveAction
	}
	return SaveAction_SAVE_ACTION_UNSPECIFIED
}

func (x *SetQuickRampingRequest) GetUpS() uint32 {
	if x != nil {
		return x.UpS
	}
	return 0
}

func (x *SetQuickRampingRequest) GetDownS() uint32 {
	if x != nil {
		return x.DownS
	}
	return 0
}

type QuickRampingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Quick ramping time up in seconds when RESUMING the miner. Sets how fast the miner will power up. Used in curtailments
	UpS uint32 `protobuf:"varint,1,opt,name=up_s,json=upS,proto3" json:"up_s,omitempty"`
	// Quick ramping time down in seconds when PAUSING the miner. Sets how fast the miner will power off. Used in curtailments
	DownS uint32 `protobuf:"varint,2,opt,name=down_s,json=downS,proto3" json:"down_s,omitempty"`
}

func (x *QuickRampingResponse) Reset() {
	*x = QuickRampingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_performance_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuickRampingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuickRampingResponse) ProtoMessage() {}

func (x *QuickRampingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_performance_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuickRampingResponse.ProtoReflect.Descriptor instead.
func (*QuickRampingResponse) Descriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{41}
}

func (x *QuickRampingResponse) GetUpS() uint32 {
	if x != nil {
		return x.UpS
	}
	return 0
}

func (x *QuickRampingResponse) GetDownS() uint32 {
	if x != nil {
		return x.DownS
	}
	return 0
}

type SetDefaultQuickRampingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Save action
	SaveAction SaveAction `protobuf:"varint,1,opt,name=save_action,json=saveAction,proto3,enum=braiins.bos.v1.SaveAction" json:"save_action,omitempty"`
}

func (x *SetDefaultQuickRampingRequest) Reset() {
	*x = SetDefaultQuickRampingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_performance_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDefaultQuickRampingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDefaultQuickRampingRequest) ProtoMessage() {}

func (x *SetDefaultQuickRampingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_performance_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDefaultQuickRampingRequest.ProtoReflect.Descriptor instead.
func (*SetDefaultQuickRampingRequest) Descriptor() ([]byte, []int) {
	return file_bos_v1_performance_proto_rawDescGZIP(), []int{42}
}

func (x *SetDefaultQuickRampingRequest) GetSaveAction() SaveAction {
	if x != nil {
		return x.SaveAction
	}
	return SaveAction_SAVE_ACTION_UNSPECIFIED
}

var File_bos_v1_performance_proto protoreflect.FileDescriptor

var file_bos_v1_performance_proto_rawDesc = []byte{
	0x0a, 0x18, 0x62, 0x6f, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x62, 0x72, 0x61, 0x69,
	0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x13, 0x62, 0x6f, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x18, 0x62, 0x6f, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x62, 0x6f, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8e,
	0x02, 0x0a, 0x12, 0x54, 0x75, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0a, 0x74, 0x75, 0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69,
	0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x6e, 0x65, 0x72, 0x4d,
	0x6f, 0x64, 0x65, 0x48, 0x01, 0x52, 0x09, 0x74, 0x75, 0x6e, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0c, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x72, 0x61, 0x69,
	0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x52, 0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x45, 0x0a,
	0x0f, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73,
	0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x72, 0x61, 0x48, 0x61, 0x73, 0x68,
	0x72, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x75, 0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x22,
	0xa0, 0x02, 0x0a, 0x10, 0x54, 0x75, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x72, 0x61,
	0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x0b, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x4c, 0x0a, 0x0f, 0x68, 0x61, 0x73,
	0x68, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69,
	0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x62, 0x72, 0x61,
	0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x6e, 0x65,
	0x72, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x22, 0x89, 0x04, 0x0a, 0x10, 0x44, 0x50, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x0a, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x72, 0x61,
	0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x52, 0x09, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x65, 0x70, 0x12, 0x41, 0x0a, 0x0d,
	0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x72, 0x61, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74,
	0x65, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12,
	0x3f, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x72, 0x61, 0x69,
	0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x4c, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x65, 0x72, 0x61, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x52, 0x11, 0x6d, 0x69, 0x6e,
	0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2e,
	0x0a, 0x10, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0f, 0x73, 0x68, 0x75, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x42,
	0x0a, 0x11, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x72, 0x61, 0x69,
	0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x75, 0x72, 0x73,
	0x52, 0x10, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x50, 0x53, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x02, 0x52, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x9e,
	0x03, 0x0a, 0x21, 0x48, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x10, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0f, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3e, 0x0a, 0x0e, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x68, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x48, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0a, 0x68, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x17, 0x71,
	0x75, 0x69, 0x63, 0x6b, 0x5f, 0x72, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x75, 0x70, 0x5f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x13,
	0x71, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65,
	0x55, 0x70, 0x53, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x19, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f,
	0x72, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x6f, 0x77,
	0x6e, 0x5f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x15, 0x71, 0x75, 0x69,
	0x63, 0x6b, 0x52, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x6f, 0x77,
	0x6e, 0x53, 0x88, 0x01, 0x01, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f,
	0x72, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x5f,
	0x73, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f, 0x72, 0x61, 0x6d, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x73, 0x22,
	0xc6, 0x04, 0x0a, 0x0e, 0x44, 0x50, 0x53, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73,
	0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x09, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x53,
	0x74, 0x65, 0x70, 0x12, 0x48, 0x0a, 0x0d, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x72, 0x61,
	0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x68,
	0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52,
	0x0c, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x4a, 0x0a,
	0x10, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e,
	0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x53, 0x0a, 0x13, 0x6d, 0x69, 0x6e,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73,
	0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x11, 0x6d, 0x69, 0x6e,
	0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x4c,
	0x0a, 0x10, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69,
	0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x0f, 0x73, 0x68, 0x75,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x50, 0x0a, 0x11,
	0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e,
	0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x10, 0x73, 0x68,
	0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x62, 0x72, 0x61, 0x69,
	0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x50, 0x53, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xce, 0x02, 0x0a, 0x14, 0x48, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x73, 0x12, 0x3b, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e,
	0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73,
	0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x09, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3c, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69,
	0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x07, 0x76, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x52, 0x0a, 0x14, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f, 0x72,
	0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x11, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x61, 0x6d,
	0x70, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x22, 0x9b, 0x02, 0x0a, 0x12, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73,
	0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x49, 0x0a, 0x11, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x69, 0x67, 0x61, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x52, 0x10,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x55, 0x0a, 0x1b, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e,
	0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x19, 0x65, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa5, 0x02, 0x0a, 0x15, 0x48, 0x61, 0x73, 0x68,
	0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e,
	0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x72, 0x61, 0x48, 0x61, 0x73,
	0x68, 0x72, 0x61, 0x74, 0x65, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x49, 0x0a,
	0x11, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69,
	0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x67, 0x61, 0x48, 0x61,
	0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x52, 0x10, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64,
	0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x1b, 0x65, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x52, 0x19, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x16, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb8, 0x02, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54,
	0x75, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4a, 0x0a, 0x13, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x75, 0x6e,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x75, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x11, 0x6f, 0x76, 0x65, 0x72,
	0x61, 0x6c, 0x6c, 0x54, 0x75, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5d, 0x0a,
	0x17, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x14, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x66, 0x0a, 0x1a,
	0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x17, 0x68, 0x61, 0x73,
	0x68, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x14, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62,
	0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x9f, 0x01, 0x0a, 0x17, 0x48, 0x61, 0x73, 0x68,
	0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62,
	0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62,
	0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65,
	0x72, 0x61, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xd5, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x15, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62,
	0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x13, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x5f, 0x0a,
	0x18, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x16, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x5b,
	0x0a, 0x1c, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b,
	0x0a, 0x0b, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x73, 0x61, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8e, 0x01, 0x0a, 0x15,
	0x53, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x62, 0x72, 0x61,
	0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x61, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0c, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69,
	0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52,
	0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0xa7, 0x01, 0x0a,
	0x1b, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0b,
	0x73, 0x61, 0x76, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73,
	0x61, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x16, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x72, 0x61, 0x69,
	0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x52, 0x14, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xa7, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x62, 0x72,
	0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x76,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x61, 0x76, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x16, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x14, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x52, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x22, 0x5e, 0x0a, 0x1f, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x61, 0x76, 0x65, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x62,
	0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61,
	0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x61, 0x76, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9e, 0x01, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73,
	0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x61, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45,
	0x0a, 0x0f, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e,
	0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x72, 0x61, 0x48, 0x61, 0x73,
	0x68, 0x72, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0xb7, 0x01, 0x0a, 0x1e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x61, 0x76, 0x65,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x61, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x61, 0x76, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x19, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69,
	0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x72, 0x61, 0x48, 0x61,
	0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x52, 0x17, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0xb7, 0x01, 0x0a, 0x1e, 0x44, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73,
	0x68, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e,
	0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x61, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x58, 0x0a, 0x19, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x72, 0x61, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65,
	0x52, 0x17, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x44, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x62, 0x0a, 0x19, 0x53, 0x65, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x65, 0x72, 0x61, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x68,
	0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x87, 0x01,
	0x0a, 0x0e, 0x44, 0x50, 0x53, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x34, 0x0a, 0x0a, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62,
	0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x09, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x53, 0x74, 0x65, 0x70, 0x12, 0x3f, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0xa4, 0x01, 0x0a, 0x11, 0x44, 0x50, 0x53, 0x48,
	0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x41, 0x0a,
	0x0d, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62,
	0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x72, 0x61, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61,
	0x74, 0x65, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x12, 0x4c, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x65, 0x72, 0x61, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x52, 0x11, 0x6d, 0x69, 0x6e,
	0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0xa8,
	0x01, 0x0a, 0x09, 0x44, 0x50, 0x53, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x43, 0x0a, 0x0c,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x50, 0x53, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x4c, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x72, 0x61,
	0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x50, 0x53, 0x48,
	0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x00, 0x52,
	0x0e, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42,
	0x08, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x83, 0x03, 0x0a, 0x0d, 0x53, 0x65,
	0x74, 0x44, 0x50, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x73,
	0x61, 0x76, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x61,
	0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01,
	0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x11, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x48, 0x6f, 0x75, 0x72, 0x73, 0x48, 0x02, 0x52, 0x10, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77,
	0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62,
	0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x50,
	0x53, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x30, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x50, 0x53, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x03, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x22,
	0xa9, 0x03, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x44, 0x50, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x2e, 0x0a, 0x10, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0f, 0x73,
	0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x47, 0x0a, 0x11, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62,
	0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f,
	0x75, 0x72, 0x73, 0x48, 0x02, 0x52, 0x10, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0c, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x50, 0x53, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x52, 0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x4a, 0x0a,
	0x0f, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73,
	0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x50, 0x53, 0x48, 0x61, 0x73, 0x68, 0x72,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x68, 0x72,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e,
	0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x50, 0x53, 0x4d, 0x6f, 0x64, 0x65,
	0x48, 0x03, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x68, 0x75, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x1c,
	0x48, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x09,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x31, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73,
	0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x52,
	0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x0f, 0x48, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x09, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x31, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e,
	0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x52, 0x07,
	0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x22, 0xeb, 0x01, 0x0a, 0x15, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a,
	0x10, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e,
	0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x0f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x3e, 0x0a, 0x0e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x76, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x72,
	0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e,
	0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x22, 0x4b, 0x0a, 0x0f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x72, 0x61,
	0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x52, 0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x5b,
	0x0a, 0x12, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x65, 0x72, 0x61, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x68, 0x61, 0x73,
	0x68, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0xb5, 0x01, 0x0a, 0x14,
	0x54, 0x75, 0x6e, 0x65, 0x72, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x72, 0x61,
	0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x4d, 0x0a, 0x0f, 0x68, 0x61,
	0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x68, 0x72,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73,
	0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x61, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33,
	0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62,
	0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x0f, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62,
	0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x45, 0x0a, 0x0a, 0x74, 0x75, 0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e,
	0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x6e, 0x65, 0x72, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x09, 0x74,
	0x75, 0x6e, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x22, 0x1b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1c, 0x0a,
	0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x75, 0x6e, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1d, 0x0a, 0x1b, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x75, 0x6e, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7f, 0x0a, 0x16, 0x53, 0x65,
	0x74, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x62, 0x72, 0x61, 0x69,
	0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x61, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x11, 0x0a, 0x04, 0x75, 0x70, 0x5f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x75, 0x70, 0x53, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x6f, 0x77, 0x6e, 0x53, 0x22, 0x40, 0x0a, 0x14, 0x51,
	0x75, 0x69, 0x63, 0x6b, 0x52, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x11, 0x0a, 0x04, 0x75, 0x70, 0x5f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x75, 0x70, 0x53, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x6f, 0x77, 0x6e, 0x53, 0x22, 0x5c, 0x0a,
	0x1d, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x51, 0x75, 0x69, 0x63, 0x6b,
	0x52, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b,
	0x0a, 0x0b, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x73, 0x61, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x64, 0x0a, 0x09, 0x54,
	0x75, 0x6e, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x55, 0x4e, 0x45,
	0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x55, 0x4e, 0x45, 0x52, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x10,
	0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x55, 0x4e, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x48, 0x41, 0x53, 0x48, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x10,
	0x02, 0x2a, 0x4c, 0x0a, 0x07, 0x44, 0x50, 0x53, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x14,
	0x44, 0x50, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x50, 0x53, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x44,
	0x50, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x53, 0x54, 0x10, 0x02, 0x2a,
	0x8a, 0x01, 0x0a, 0x0a, 0x54, 0x75, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b,
	0x0a, 0x17, 0x54, 0x55, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x54,
	0x55, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42,
	0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x55, 0x4e, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a,
	0x12, 0x54, 0x55, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x55, 0x4e,
	0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x55, 0x4e, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x32, 0xaa, 0x0d, 0x0a,
	0x12, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62,
	0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x62, 0x72, 0x61,
	0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x75, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x6b, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e,
	0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d,
	0x0a, 0x15, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2c, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e,
	0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e,
	0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a,
	0x0e, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x25, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73,
	0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b,
	0x0a, 0x14, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2b, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73,
	0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x14, 0x44,
	0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x2b, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x2f, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62,
	0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e,
	0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x68, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x28, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e,
	0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x17, 0x49, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2e, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e,
	0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e,
	0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x74, 0x0a, 0x17, 0x44, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73,
	0x68, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2e, 0x2e, 0x62, 0x72,
	0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x62, 0x72,
	0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x53, 0x65, 0x74, 0x44, 0x50, 0x53,
	0x12, 0x1d, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x50, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x74, 0x44, 0x50, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x60, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e,
	0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x66, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x2e,
	0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69,
	0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x6e, 0x0a, 0x13, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x54, 0x75, 0x6e, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x12, 0x2a, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x75, 0x6e, 0x65, 0x64, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x62,
	0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x54, 0x75, 0x6e, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x0f, 0x53, 0x65, 0x74,
	0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x2e, 0x62,
	0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x74, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62,
	0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x61, 0x6d, 0x70, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x16, 0x53, 0x65,
	0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x61, 0x6d,
	0x70, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62,
	0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x52, 0x61, 0x6d, 0x70, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2f,
	0x62, 0x6f, 0x73, 0x2d, 0x70, 0x6c, 0x75, 0x73, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x72, 0x61,
	0x69, 0x69, 0x6e, 0x73, 0x2f, 0x62, 0x6f, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x62, 0x6f, 0x73, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bos_v1_performance_proto_rawDescOnce sync.Once
	file_bos_v1_performance_proto_rawDescData = file_bos_v1_performance_proto_rawDesc
)

func file_bos_v1_performance_proto_rawDescGZIP() []byte {
	file_bos_v1_performance_proto_rawDescOnce.Do(func() {
		file_bos_v1_performance_proto_rawDescData = protoimpl.X.CompressGZIP(file_bos_v1_performance_proto_rawDescData)
	})
	return file_bos_v1_performance_proto_rawDescData
}

var file_bos_v1_performance_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_bos_v1_performance_proto_msgTypes = make([]protoimpl.MessageInfo, 43)
var file_bos_v1_performance_proto_goTypes = []interface{}{
	(TunerMode)(0),                            // 0: braiins.bos.v1.TunerMode
	(DPSMode)(0),                              // 1: braiins.bos.v1.DPSMode
	(TunerState)(0),                           // 2: braiins.bos.v1.TunerState
	(*TunerConfiguration)(nil),                // 3: braiins.bos.v1.TunerConfiguration
	(*TunerConstraints)(nil),                  // 4: braiins.bos.v1.TunerConstraints
	(*DPSConfiguration)(nil),                  // 5: braiins.bos.v1.DPSConfiguration
	(*HashboardPerformanceConfiguration)(nil), // 6: braiins.bos.v1.HashboardPerformanceConfiguration
	(*DPSConstraints)(nil),                    // 7: braiins.bos.v1.DPSConstraints
	(*HashboardConstraints)(nil),              // 8: braiins.bos.v1.HashboardConstraints
	(*PowerTargetProfile)(nil),                // 9: braiins.bos.v1.PowerTargetProfile
	(*HashrateTargetProfile)(nil),             // 10: braiins.bos.v1.HashrateTargetProfile
	(*GetTunerStateRequest)(nil),              // 11: braiins.bos.v1.GetTunerStateRequest
	(*GetTunerStateResponse)(nil),             // 12: braiins.bos.v1.GetTunerStateResponse
	(*PowerTargetModeState)(nil),              // 13: braiins.bos.v1.PowerTargetModeState
	(*HashrateTargetModeState)(nil),           // 14: braiins.bos.v1.HashrateTargetModeState
	(*ListTargetProfilesRequest)(nil),         // 15: braiins.bos.v1.ListTargetProfilesRequest
	(*ListTargetProfilesResponse)(nil),        // 16: braiins.bos.v1.ListTargetProfilesResponse
	(*SetDefaultPowerTargetRequest)(nil),      // 17: braiins.bos.v1.SetDefaultPowerTargetRequest
	(*SetPowerTargetRequest)(nil),             // 18: braiins.bos.v1.SetPowerTargetRequest
	(*IncrementPowerTargetRequest)(nil),       // 19: braiins.bos.v1.IncrementPowerTargetRequest
	(*DecrementPowerTargetRequest)(nil),       // 20: braiins.bos.v1.DecrementPowerTargetRequest
	(*SetPowerTargetResponse)(nil),            // 21: braiins.bos.v1.SetPowerTargetResponse
	(*SetDefaultHashrateTargetRequest)(nil),   // 22: braiins.bos.v1.SetDefaultHashrateTargetRequest
	(*SetHashrateTargetRequest)(nil),          // 23: braiins.bos.v1.SetHashrateTargetRequest
	(*IncrementHashrateTargetRequest)(nil),    // 24: braiins.bos.v1.IncrementHashrateTargetRequest
	(*DecrementHashrateTargetRequest)(nil),    // 25: braiins.bos.v1.DecrementHashrateTargetRequest
	(*SetHashrateTargetResponse)(nil),         // 26: braiins.bos.v1.SetHashrateTargetResponse
	(*DPSPowerTarget)(nil),                    // 27: braiins.bos.v1.DPSPowerTarget
	(*DPSHashrateTarget)(nil),                 // 28: braiins.bos.v1.DPSHashrateTarget
	(*DPSTarget)(nil),                         // 29: braiins.bos.v1.DPSTarget
	(*SetDPSRequest)(nil),                     // 30: braiins.bos.v1.SetDPSRequest
	(*SetDPSResponse)(nil),                    // 31: braiins.bos.v1.SetDPSResponse
	(*HashboardPerformanceSettings)(nil),      // 32: braiins.bos.v1.HashboardPerformanceSettings
	(*HashboardConfig)(nil),                   // 33: braiins.bos.v1.HashboardConfig
	(*ManualPerformanceMode)(nil),             // 34: braiins.bos.v1.ManualPerformanceMode
	(*PowerTargetMode)(nil),                   // 35: braiins.bos.v1.PowerTargetMode
	(*HashrateTargetMode)(nil),                // 36: braiins.bos.v1.HashrateTargetMode
	(*TunerPerformanceMode)(nil),              // 37: braiins.bos.v1.TunerPerformanceMode
	(*SetPerformanceModeRequest)(nil),         // 38: braiins.bos.v1.SetPerformanceModeRequest
	(*PerformanceMode)(nil),                   // 39: braiins.bos.v1.PerformanceMode
	(*GetPerformanceModeRequest)(nil),         // 40: braiins.bos.v1.GetPerformanceModeRequest
	(*RemoveTunedProfilesRequest)(nil),        // 41: braiins.bos.v1.RemoveTunedProfilesRequest
	(*RemoveTunedProfilesResponse)(nil),       // 42: braiins.bos.v1.RemoveTunedProfilesResponse
	(*SetQuickRampingRequest)(nil),            // 43: braiins.bos.v1.SetQuickRampingRequest
	(*QuickRampingResponse)(nil),              // 44: braiins.bos.v1.QuickRampingResponse
	(*SetDefaultQuickRampingRequest)(nil),     // 45: braiins.bos.v1.SetDefaultQuickRampingRequest
	(*Power)(nil),                             // 46: braiins.bos.v1.Power
	(*TeraHashrate)(nil),                      // 47: braiins.bos.v1.TeraHashrate
	(*PowerConstraints)(nil),                  // 48: braiins.bos.v1.PowerConstraints
	(*HashrateConstraints)(nil),               // 49: braiins.bos.v1.HashrateConstraints
	(*BooleanConstraint)(nil),                 // 50: braiins.bos.v1.BooleanConstraint
	(*Hours)(nil),                             // 51: braiins.bos.v1.Hours
	(*Frequency)(nil),                         // 52: braiins.bos.v1.Frequency
	(*Voltage)(nil),                           // 53: braiins.bos.v1.Voltage
	(*DurationConstraints)(nil),               // 54: braiins.bos.v1.DurationConstraints
	(*FrequencyConstraints)(nil),              // 55: braiins.bos.v1.FrequencyConstraints
	(*VoltageConstraints)(nil),                // 56: braiins.bos.v1.VoltageConstraints
	(*UInt32Constraints)(nil),                 // 57: braiins.bos.v1.UInt32Constraints
	(*timestamppb.Timestamp)(nil),             // 58: google.protobuf.Timestamp
	(*GigaHashrate)(nil),                      // 59: braiins.bos.v1.GigaHashrate
	(SaveAction)(0),                           // 60: braiins.bos.v1.SaveAction
}
var file_bos_v1_performance_proto_depIdxs = []int32{
	0,   // 0: braiins.bos.v1.TunerConfiguration.tuner_mode:type_name -> braiins.bos.v1.TunerMode
	46,  // 1: braiins.bos.v1.TunerConfiguration.power_target:type_name -> braiins.bos.v1.Power
	47,  // 2: braiins.bos.v1.TunerConfiguration.hashrate_target:type_name -> braiins.bos.v1.TeraHashrate
	48,  // 3: braiins.bos.v1.TunerConstraints.power_target:type_name -> braiins.bos.v1.PowerConstraints
	49,  // 4: braiins.bos.v1.TunerConstraints.hashrate_target:type_name -> braiins.bos.v1.HashrateConstraints
	50,  // 5: braiins.bos.v1.TunerConstraints.enabled:type_name -> braiins.bos.v1.BooleanConstraint
	0,   // 6: braiins.bos.v1.TunerConstraints.default_mode:type_name -> braiins.bos.v1.TunerMode
	46,  // 7: braiins.bos.v1.DPSConfiguration.power_step:type_name -> braiins.bos.v1.Power
	47,  // 8: braiins.bos.v1.DPSConfiguration.hashrate_step:type_name -> braiins.bos.v1.TeraHashrate
	46,  // 9: braiins.bos.v1.DPSConfiguration.min_power_target:type_name -> braiins.bos.v1.Power
	47,  // 10: braiins.bos.v1.DPSConfiguration.min_hashrate_target:type_name -> braiins.bos.v1.TeraHashrate
	51,  // 11: braiins.bos.v1.DPSConfiguration.shutdown_duration:type_name -> braiins.bos.v1.Hours
	1,   // 12: braiins.bos.v1.DPSConfiguration.mode:type_name -> braiins.bos.v1.DPSMode
	52,  // 13: braiins.bos.v1.HashboardPerformanceConfiguration.global_frequency:type_name -> braiins.bos.v1.Frequency
	53,  // 14: braiins.bos.v1.HashboardPerformanceConfiguration.global_voltage:type_name -> braiins.bos.v1.Voltage
	33,  // 15: braiins.bos.v1.HashboardPerformanceConfiguration.hashboards:type_name -> braiins.bos.v1.HashboardConfig
	48,  // 16: braiins.bos.v1.DPSConstraints.power_step:type_name -> braiins.bos.v1.PowerConstraints
	49,  // 17: braiins.bos.v1.DPSConstraints.hashrate_step:type_name -> braiins.bos.v1.HashrateConstraints
	48,  // 18: braiins.bos.v1.DPSConstraints.min_power_target:type_name -> braiins.bos.v1.PowerConstraints
	49,  // 19: braiins.bos.v1.DPSConstraints.min_hashrate_target:type_name -> braiins.bos.v1.HashrateConstraints
	50,  // 20: braiins.bos.v1.DPSConstraints.shutdown_enabled:type_name -> braiins.bos.v1.BooleanConstraint
	54,  // 21: braiins.bos.v1.DPSConstraints.shutdown_duration:type_name -> braiins.bos.v1.DurationConstraints
	50,  // 22: braiins.bos.v1.DPSConstraints.enabled:type_name -> braiins.bos.v1.BooleanConstraint
	1,   // 23: braiins.bos.v1.DPSConstraints.mode:type_name -> braiins.bos.v1.DPSMode
	50,  // 24: braiins.bos.v1.HashboardConstraints.enabled:type_name -> braiins.bos.v1.BooleanConstraint
	55,  // 25: braiins.bos.v1.HashboardConstraints.frequency:type_name -> braiins.bos.v1.FrequencyConstraints
	56,  // 26: braiins.bos.v1.HashboardConstraints.voltage:type_name -> braiins.bos.v1.VoltageConstraints
	57,  // 27: braiins.bos.v1.HashboardConstraints.quick_ramping_time_s:type_name -> braiins.bos.v1.UInt32Constraints
	58,  // 28: braiins.bos.v1.PowerTargetProfile.created:type_name -> google.protobuf.Timestamp
	46,  // 29: braiins.bos.v1.PowerTargetProfile.target:type_name -> braiins.bos.v1.Power
	59,  // 30: braiins.bos.v1.PowerTargetProfile.measured_hashrate:type_name -> braiins.bos.v1.GigaHashrate
	46,  // 31: braiins.bos.v1.PowerTargetProfile.estimated_power_consumption:type_name -> braiins.bos.v1.Power
	58,  // 32: braiins.bos.v1.HashrateTargetProfile.created:type_name -> google.protobuf.Timestamp
	47,  // 33: braiins.bos.v1.HashrateTargetProfile.target:type_name -> braiins.bos.v1.TeraHashrate
	59,  // 34: braiins.bos.v1.HashrateTargetProfile.measured_hashrate:type_name -> braiins.bos.v1.GigaHashrate
	46,  // 35: braiins.bos.v1.HashrateTargetProfile.estimated_power_consumption:type_name -> braiins.bos.v1.Power
	2,   // 36: braiins.bos.v1.GetTunerStateResponse.overall_tuner_state:type_name -> braiins.bos.v1.TunerState
	13,  // 37: braiins.bos.v1.GetTunerStateResponse.power_target_mode_state:type_name -> braiins.bos.v1.PowerTargetModeState
	14,  // 38: braiins.bos.v1.GetTunerStateResponse.hashrate_target_mode_state:type_name -> braiins.bos.v1.HashrateTargetModeState
	9,   // 39: braiins.bos.v1.PowerTargetModeState.profile:type_name -> braiins.bos.v1.PowerTargetProfile
	46,  // 40: braiins.bos.v1.PowerTargetModeState.current_target:type_name -> braiins.bos.v1.Power
	10,  // 41: braiins.bos.v1.HashrateTargetModeState.profile:type_name -> braiins.bos.v1.HashrateTargetProfile
	47,  // 42: braiins.bos.v1.HashrateTargetModeState.current_target:type_name -> braiins.bos.v1.TeraHashrate
	9,   // 43: braiins.bos.v1.ListTargetProfilesResponse.power_target_profiles:type_name -> braiins.bos.v1.PowerTargetProfile
	10,  // 44: braiins.bos.v1.ListTargetProfilesResponse.hashrate_target_profiles:type_name -> braiins.bos.v1.HashrateTargetProfile
	60,  // 45: braiins.bos.v1.SetDefaultPowerTargetRequest.save_action:type_name -> braiins.bos.v1.SaveAction
	60,  // 46: braiins.bos.v1.SetPowerTargetRequest.save_action:type_name -> braiins.bos.v1.SaveAction
	46,  // 47: braiins.bos.v1.SetPowerTargetRequest.power_target:type_name -> braiins.bos.v1.Power
	60,  // 48: braiins.bos.v1.IncrementPowerTargetRequest.save_action:type_name -> braiins.bos.v1.SaveAction
	46,  // 49: braiins.bos.v1.IncrementPowerTargetRequest.power_target_increment:type_name -> braiins.bos.v1.Power
	60,  // 50: braiins.bos.v1.DecrementPowerTargetRequest.save_action:type_name -> braiins.bos.v1.SaveAction
	46,  // 51: braiins.bos.v1.DecrementPowerTargetRequest.power_target_decrement:type_name -> braiins.bos.v1.Power
	46,  // 52: braiins.bos.v1.SetPowerTargetResponse.power_target:type_name -> braiins.bos.v1.Power
	60,  // 53: braiins.bos.v1.SetDefaultHashrateTargetRequest.save_action:type_name -> braiins.bos.v1.SaveAction
	60,  // 54: braiins.bos.v1.SetHashrateTargetRequest.save_action:type_name -> braiins.bos.v1.SaveAction
	47,  // 55: braiins.bos.v1.SetHashrateTargetRequest.hashrate_target:type_name -> braiins.bos.v1.TeraHashrate
	60,  // 56: braiins.bos.v1.IncrementHashrateTargetRequest.save_action:type_name -> braiins.bos.v1.SaveAction
	47,  // 57: braiins.bos.v1.IncrementHashrateTargetRequest.hashrate_target_increment:type_name -> braiins.bos.v1.TeraHashrate
	60,  // 58: braiins.bos.v1.DecrementHashrateTargetRequest.save_action:type_name -> braiins.bos.v1.SaveAction
	47,  // 59: braiins.bos.v1.DecrementHashrateTargetRequest.hashrate_target_decrement:type_name -> braiins.bos.v1.TeraHashrate
	47,  // 60: braiins.bos.v1.SetHashrateTargetResponse.hashrate_target:type_name -> braiins.bos.v1.TeraHashrate
	46,  // 61: braiins.bos.v1.DPSPowerTarget.power_step:type_name -> braiins.bos.v1.Power
	46,  // 62: braiins.bos.v1.DPSPowerTarget.min_power_target:type_name -> braiins.bos.v1.Power
	47,  // 63: braiins.bos.v1.DPSHashrateTarget.hashrate_step:type_name -> braiins.bos.v1.TeraHashrate
	47,  // 64: braiins.bos.v1.DPSHashrateTarget.min_hashrate_target:type_name -> braiins.bos.v1.TeraHashrate
	27,  // 65: braiins.bos.v1.DPSTarget.power_target:type_name -> braiins.bos.v1.DPSPowerTarget
	28,  // 66: braiins.bos.v1.DPSTarget.hashrate_target:type_name -> braiins.bos.v1.DPSHashrateTarget
	60,  // 67: braiins.bos.v1.SetDPSRequest.save_action:type_name -> braiins.bos.v1.SaveAction
	51,  // 68: braiins.bos.v1.SetDPSRequest.shutdown_duration:type_name -> braiins.bos.v1.Hours
	29,  // 69: braiins.bos.v1.SetDPSRequest.target:type_name -> braiins.bos.v1.DPSTarget
	1,   // 70: braiins.bos.v1.SetDPSRequest.mode:type_name -> braiins.bos.v1.DPSMode
	51,  // 71: braiins.bos.v1.SetDPSResponse.shutdown_duration:type_name -> braiins.bos.v1.Hours
	27,  // 72: braiins.bos.v1.SetDPSResponse.power_target:type_name -> braiins.bos.v1.DPSPowerTarget
	28,  // 73: braiins.bos.v1.SetDPSResponse.hashrate_target:type_name -> braiins.bos.v1.DPSHashrateTarget
	1,   // 74: braiins.bos.v1.SetDPSResponse.mode:type_name -> braiins.bos.v1.DPSMode
	52,  // 75: braiins.bos.v1.HashboardPerformanceSettings.frequency:type_name -> braiins.bos.v1.Frequency
	53,  // 76: braiins.bos.v1.HashboardPerformanceSettings.voltage:type_name -> braiins.bos.v1.Voltage
	52,  // 77: braiins.bos.v1.HashboardConfig.frequency:type_name -> braiins.bos.v1.Frequency
	53,  // 78: braiins.bos.v1.HashboardConfig.voltage:type_name -> braiins.bos.v1.Voltage
	52,  // 79: braiins.bos.v1.ManualPerformanceMode.global_frequency:type_name -> braiins.bos.v1.Frequency
	53,  // 80: braiins.bos.v1.ManualPerformanceMode.global_voltage:type_name -> braiins.bos.v1.Voltage
	32,  // 81: braiins.bos.v1.ManualPerformanceMode.hashboards:type_name -> braiins.bos.v1.HashboardPerformanceSettings
	46,  // 82: braiins.bos.v1.PowerTargetMode.power_target:type_name -> braiins.bos.v1.Power
	47,  // 83: braiins.bos.v1.HashrateTargetMode.hashrate_target:type_name -> braiins.bos.v1.TeraHashrate
	35,  // 84: braiins.bos.v1.TunerPerformanceMode.power_target:type_name -> braiins.bos.v1.PowerTargetMode
	36,  // 85: braiins.bos.v1.TunerPerformanceMode.hashrate_target:type_name -> braiins.bos.v1.HashrateTargetMode
	60,  // 86: braiins.bos.v1.SetPerformanceModeRequest.save_action:type_name -> braiins.bos.v1.SaveAction
	39,  // 87: braiins.bos.v1.SetPerformanceModeRequest.mode:type_name -> braiins.bos.v1.PerformanceMode
	34,  // 88: braiins.bos.v1.PerformanceMode.manual_mode:type_name -> braiins.bos.v1.ManualPerformanceMode
	37,  // 89: braiins.bos.v1.PerformanceMode.tuner_mode:type_name -> braiins.bos.v1.TunerPerformanceMode
	60,  // 90: braiins.bos.v1.SetQuickRampingRequest.save_action:type_name -> braiins.bos.v1.SaveAction
	60,  // 91: braiins.bos.v1.SetDefaultQuickRampingRequest.save_action:type_name -> braiins.bos.v1.SaveAction
	11,  // 92: braiins.bos.v1.PerformanceService.GetTunerState:input_type -> braiins.bos.v1.GetTunerStateRequest
	15,  // 93: braiins.bos.v1.PerformanceService.ListTargetProfiles:input_type -> braiins.bos.v1.ListTargetProfilesRequest
	17,  // 94: braiins.bos.v1.PerformanceService.SetDefaultPowerTarget:input_type -> braiins.bos.v1.SetDefaultPowerTargetRequest
	18,  // 95: braiins.bos.v1.PerformanceService.SetPowerTarget:input_type -> braiins.bos.v1.SetPowerTargetRequest
	19,  // 96: braiins.bos.v1.PerformanceService.IncrementPowerTarget:input_type -> braiins.bos.v1.IncrementPowerTargetRequest
	20,  // 97: braiins.bos.v1.PerformanceService.DecrementPowerTarget:input_type -> braiins.bos.v1.DecrementPowerTargetRequest
	22,  // 98: braiins.bos.v1.PerformanceService.SetDefaultHashrateTarget:input_type -> braiins.bos.v1.SetDefaultHashrateTargetRequest
	23,  // 99: braiins.bos.v1.PerformanceService.SetHashrateTarget:input_type -> braiins.bos.v1.SetHashrateTargetRequest
	24,  // 100: braiins.bos.v1.PerformanceService.IncrementHashrateTarget:input_type -> braiins.bos.v1.IncrementHashrateTargetRequest
	25,  // 101: braiins.bos.v1.PerformanceService.DecrementHashrateTarget:input_type -> braiins.bos.v1.DecrementHashrateTargetRequest
	30,  // 102: braiins.bos.v1.PerformanceService.SetDPS:input_type -> braiins.bos.v1.SetDPSRequest
	38,  // 103: braiins.bos.v1.PerformanceService.SetPerformanceMode:input_type -> braiins.bos.v1.SetPerformanceModeRequest
	40,  // 104: braiins.bos.v1.PerformanceService.GetActivePerformanceMode:input_type -> braiins.bos.v1.GetPerformanceModeRequest
	41,  // 105: braiins.bos.v1.PerformanceService.RemoveTunedProfiles:input_type -> braiins.bos.v1.RemoveTunedProfilesRequest
	43,  // 106: braiins.bos.v1.PerformanceService.SetQuickRamping:input_type -> braiins.bos.v1.SetQuickRampingRequest
	45,  // 107: braiins.bos.v1.PerformanceService.SetDefaultQuickRamping:input_type -> braiins.bos.v1.SetDefaultQuickRampingRequest
	12,  // 108: braiins.bos.v1.PerformanceService.GetTunerState:output_type -> braiins.bos.v1.GetTunerStateResponse
	16,  // 109: braiins.bos.v1.PerformanceService.ListTargetProfiles:output_type -> braiins.bos.v1.ListTargetProfilesResponse
	21,  // 110: braiins.bos.v1.PerformanceService.SetDefaultPowerTarget:output_type -> braiins.bos.v1.SetPowerTargetResponse
	21,  // 111: braiins.bos.v1.PerformanceService.SetPowerTarget:output_type -> braiins.bos.v1.SetPowerTargetResponse
	21,  // 112: braiins.bos.v1.PerformanceService.IncrementPowerTarget:output_type -> braiins.bos.v1.SetPowerTargetResponse
	21,  // 113: braiins.bos.v1.PerformanceService.DecrementPowerTarget:output_type -> braiins.bos.v1.SetPowerTargetResponse
	26,  // 114: braiins.bos.v1.PerformanceService.SetDefaultHashrateTarget:output_type -> braiins.bos.v1.SetHashrateTargetResponse
	26,  // 115: braiins.bos.v1.PerformanceService.SetHashrateTarget:output_type -> braiins.bos.v1.SetHashrateTargetResponse
	26,  // 116: braiins.bos.v1.PerformanceService.IncrementHashrateTarget:output_type -> braiins.bos.v1.SetHashrateTargetResponse
	26,  // 117: braiins.bos.v1.PerformanceService.DecrementHashrateTarget:output_type -> braiins.bos.v1.SetHashrateTargetResponse
	31,  // 118: braiins.bos.v1.PerformanceService.SetDPS:output_type -> braiins.bos.v1.SetDPSResponse
	39,  // 119: braiins.bos.v1.PerformanceService.SetPerformanceMode:output_type -> braiins.bos.v1.PerformanceMode
	39,  // 120: braiins.bos.v1.PerformanceService.GetActivePerformanceMode:output_type -> braiins.bos.v1.PerformanceMode
	42,  // 121: braiins.bos.v1.PerformanceService.RemoveTunedProfiles:output_type -> braiins.bos.v1.RemoveTunedProfilesResponse
	44,  // 122: braiins.bos.v1.PerformanceService.SetQuickRamping:output_type -> braiins.bos.v1.QuickRampingResponse
	44,  // 123: braiins.bos.v1.PerformanceService.SetDefaultQuickRamping:output_type -> braiins.bos.v1.QuickRampingResponse
	108, // [108:124] is the sub-list for method output_type
	92,  // [92:108] is the sub-list for method input_type
	92,  // [92:92] is the sub-list for extension type_name
	92,  // [92:92] is the sub-list for extension extendee
	0,   // [0:92] is the sub-list for field type_name
}

func init() { file_bos_v1_performance_proto_init() }
func file_bos_v1_performance_proto_init() {
	if File_bos_v1_performance_proto != nil {
		return
	}
	file_bos_v1_common_proto_init()
	file_bos_v1_constraints_proto_init()
	file_bos_v1_units_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bos_v1_performance_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunerConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_performance_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunerConstraints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_performance_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DPSConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_performance_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashboardPerformanceConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_performance_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DPSConstraints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_performance_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashboardConstraints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_performance_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PowerTargetProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_performance_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashrateTargetProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_performance_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTunerStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_performance_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTunerStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_performance_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PowerTargetModeState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_performance_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashrateTargetModeState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_performance_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTargetProfilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_performance_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTargetProfilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_performance_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDefaultPowerTargetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_performance_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPowerTargetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_performance_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncrementPowerTargetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_performance_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecrementPowerTargetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_performance_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPowerTargetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_performance_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDefaultHashrateTargetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_performance_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetHashrateTargetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_performance_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncrementHashrateTargetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_performance_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecrementHashrateTargetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_performance_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetHashrateTargetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_performance_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DPSPowerTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_performance_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DPSHashrateTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_performance_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DPSTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_performance_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDPSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_performance_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDPSResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_performance_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashboardPerformanceSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_performance_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashboardConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_performance_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualPerformanceMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_performance_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PowerTargetMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_performance_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashrateTargetMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_performance_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunerPerformanceMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_performance_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPerformanceModeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_performance_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerformanceMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_performance_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPerformanceModeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_performance_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTunedProfilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_performance_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTunedProfilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_performance_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetQuickRampingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_performance_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuickRampingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_performance_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDefaultQuickRampingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bos_v1_performance_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_bos_v1_performance_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_bos_v1_performance_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_bos_v1_performance_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*GetTunerStateResponse_PowerTargetModeState)(nil),
		(*GetTunerStateResponse_HashrateTargetModeState)(nil),
	}
	file_bos_v1_performance_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*DPSTarget_PowerTarget)(nil),
		(*DPSTarget_HashrateTarget)(nil),
	}
	file_bos_v1_performance_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_bos_v1_performance_proto_msgTypes[28].OneofWrappers = []interface{}{}
	file_bos_v1_performance_proto_msgTypes[30].OneofWrappers = []interface{}{}
	file_bos_v1_performance_proto_msgTypes[34].OneofWrappers = []interface{}{
		(*TunerPerformanceMode_PowerTarget)(nil),
		(*TunerPerformanceMode_HashrateTarget)(nil),
	}
	file_bos_v1_performance_proto_msgTypes[36].OneofWrappers = []interface{}{
		(*PerformanceMode_ManualMode)(nil),
		(*PerformanceMode_TunerMode)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bos_v1_performance_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   43,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bos_v1_performance_proto_goTypes,
		DependencyIndexes: file_bos_v1_performance_proto_depIdxs,
		EnumInfos:         file_bos_v1_performance_proto_enumTypes,
		MessageInfos:      file_bos_v1_performance_proto_msgTypes,
	}.Build()
	File_bos_v1_performance_proto = out.File
	file_bos_v1_performance_proto_rawDesc = nil
	file_bos_v1_performance_proto_goTypes = nil
	file_bos_v1_performance_proto_depIdxs = nil
}
