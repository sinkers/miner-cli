// Copyright (C) 2023  Braiins Systems s.r.o.
//
// This file is part of Braiins Open-Source Initiative (BOSI).
//
// BOSI is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
// Please, keep in mind that we may also license BOSI or any part thereof
// under a proprietary license. For more information on the terms and conditions
// of such proprietary license or if you have any other questions, please
// contact us at opensource@braiins.com.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: bos/v1/work.proto

package bos_proto_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Structure which contains HB real hashrate stats.
type RealHashrate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Last_5S      *GigaHashrate `protobuf:"bytes,1,opt,name=last_5s,json=last5s,proto3" json:"last_5s,omitempty"`
	Last_15S     *GigaHashrate `protobuf:"bytes,2,opt,name=last_15s,json=last15s,proto3" json:"last_15s,omitempty"`
	Last_30S     *GigaHashrate `protobuf:"bytes,3,opt,name=last_30s,json=last30s,proto3" json:"last_30s,omitempty"`
	Last_1M      *GigaHashrate `protobuf:"bytes,4,opt,name=last_1m,json=last1m,proto3" json:"last_1m,omitempty"`
	Last_5M      *GigaHashrate `protobuf:"bytes,5,opt,name=last_5m,json=last5m,proto3" json:"last_5m,omitempty"`
	Last_15M     *GigaHashrate `protobuf:"bytes,6,opt,name=last_15m,json=last15m,proto3" json:"last_15m,omitempty"`
	Last_30M     *GigaHashrate `protobuf:"bytes,7,opt,name=last_30m,json=last30m,proto3" json:"last_30m,omitempty"`
	Last_1H      *GigaHashrate `protobuf:"bytes,8,opt,name=last_1h,json=last1h,proto3" json:"last_1h,omitempty"`
	Last_24H     *GigaHashrate `protobuf:"bytes,9,opt,name=last_24h,json=last24h,proto3" json:"last_24h,omitempty"`
	SinceRestart *GigaHashrate `protobuf:"bytes,10,opt,name=since_restart,json=sinceRestart,proto3" json:"since_restart,omitempty"`
}

func (x *RealHashrate) Reset() {
	*x = RealHashrate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_work_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealHashrate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealHashrate) ProtoMessage() {}

func (x *RealHashrate) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_work_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealHashrate.ProtoReflect.Descriptor instead.
func (*RealHashrate) Descriptor() ([]byte, []int) {
	return file_bos_v1_work_proto_rawDescGZIP(), []int{0}
}

func (x *RealHashrate) GetLast_5S() *GigaHashrate {
	if x != nil {
		return x.Last_5S
	}
	return nil
}

func (x *RealHashrate) GetLast_15S() *GigaHashrate {
	if x != nil {
		return x.Last_15S
	}
	return nil
}

func (x *RealHashrate) GetLast_30S() *GigaHashrate {
	if x != nil {
		return x.Last_30S
	}
	return nil
}

func (x *RealHashrate) GetLast_1M() *GigaHashrate {
	if x != nil {
		return x.Last_1M
	}
	return nil
}

func (x *RealHashrate) GetLast_5M() *GigaHashrate {
	if x != nil {
		return x.Last_5M
	}
	return nil
}

func (x *RealHashrate) GetLast_15M() *GigaHashrate {
	if x != nil {
		return x.Last_15M
	}
	return nil
}

func (x *RealHashrate) GetLast_30M() *GigaHashrate {
	if x != nil {
		return x.Last_30M
	}
	return nil
}

func (x *RealHashrate) GetLast_1H() *GigaHashrate {
	if x != nil {
		return x.Last_1H
	}
	return nil
}

func (x *RealHashrate) GetLast_24H() *GigaHashrate {
	if x != nil {
		return x.Last_24H
	}
	return nil
}

func (x *RealHashrate) GetSinceRestart() *GigaHashrate {
	if x != nil {
		return x.SinceRestart
	}
	return nil
}

// Structure to handle HB state
type WorkSolverStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Real hashrate
	RealHashrate *RealHashrate `protobuf:"bytes,1,opt,name=real_hashrate,json=realHashrate,proto3" json:"real_hashrate,omitempty"`
	// Nominal hashrate
	NominalHashrate *GigaHashrate `protobuf:"bytes,2,opt,name=nominal_hashrate,json=nominalHashrate,proto3" json:"nominal_hashrate,omitempty"`
	// Error hashrate
	ErrorHashrate *MegaHashrate `protobuf:"bytes,3,opt,name=error_hashrate,json=errorHashrate,proto3" json:"error_hashrate,omitempty"`
	// Found blocks
	FoundBlocks uint32 `protobuf:"varint,4,opt,name=found_blocks,json=foundBlocks,proto3" json:"found_blocks,omitempty"`
	// Best share
	BestShare uint64 `protobuf:"varint,5,opt,name=best_share,json=bestShare,proto3" json:"best_share,omitempty"`
}

func (x *WorkSolverStats) Reset() {
	*x = WorkSolverStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_work_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkSolverStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkSolverStats) ProtoMessage() {}

func (x *WorkSolverStats) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_work_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkSolverStats.ProtoReflect.Descriptor instead.
func (*WorkSolverStats) Descriptor() ([]byte, []int) {
	return file_bos_v1_work_proto_rawDescGZIP(), []int{1}
}

func (x *WorkSolverStats) GetRealHashrate() *RealHashrate {
	if x != nil {
		return x.RealHashrate
	}
	return nil
}

func (x *WorkSolverStats) GetNominalHashrate() *GigaHashrate {
	if x != nil {
		return x.NominalHashrate
	}
	return nil
}

func (x *WorkSolverStats) GetErrorHashrate() *MegaHashrate {
	if x != nil {
		return x.ErrorHashrate
	}
	return nil
}

func (x *WorkSolverStats) GetFoundBlocks() uint32 {
	if x != nil {
		return x.FoundBlocks
	}
	return 0
}

func (x *WorkSolverStats) GetBestShare() uint64 {
	if x != nil {
		return x.BestShare
	}
	return 0
}

var File_bos_v1_work_proto protoreflect.FileDescriptor

var file_bos_v1_work_proto_rawDesc = []byte{
	0x0a, 0x11, 0x62, 0x6f, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73,
	0x2e, 0x76, 0x31, 0x1a, 0x12, 0x62, 0x6f, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x6e, 0x69, 0x74,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xca, 0x04, 0x0a, 0x0c, 0x52, 0x65, 0x61, 0x6c,
	0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x35, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x72, 0x61, 0x69,
	0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x67, 0x61, 0x48,
	0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x52, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x35, 0x73, 0x12,
	0x37, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x31, 0x35, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x69, 0x67, 0x61, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x52,
	0x07, 0x6c, 0x61, 0x73, 0x74, 0x31, 0x35, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x33, 0x30, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x72, 0x61,
	0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x67, 0x61,
	0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x52, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x33, 0x30,
	0x73, 0x12, 0x35, 0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x31, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x67, 0x61, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65,
	0x52, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x31, 0x6d, 0x12, 0x35, 0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x35, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x72, 0x61, 0x69,
	0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x67, 0x61, 0x48,
	0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x52, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x35, 0x6d, 0x12,
	0x37, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x31, 0x35, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x69, 0x67, 0x61, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x52,
	0x07, 0x6c, 0x61, 0x73, 0x74, 0x31, 0x35, 0x6d, 0x12, 0x37, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x33, 0x30, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x72, 0x61,
	0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x67, 0x61,
	0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x52, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x33, 0x30,
	0x6d, 0x12, 0x35, 0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x31, 0x68, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x67, 0x61, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65,
	0x52, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x31, 0x68, 0x12, 0x37, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x32, 0x34, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x72, 0x61,
	0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x67, 0x61,
	0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x52, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x32, 0x34,
	0x68, 0x12, 0x41, 0x0a, 0x0d, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69,
	0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x67, 0x61, 0x48, 0x61,
	0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x22, 0xa4, 0x02, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x6f, 0x6c,
	0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x6c,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x61, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x72,
	0x65, 0x61, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x6e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e,
	0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x67, 0x61, 0x48, 0x61, 0x73, 0x68, 0x72,
	0x61, 0x74, 0x65, 0x52, 0x0f, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x48, 0x61, 0x73, 0x68,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62,
	0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x67, 0x61, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x48, 0x61, 0x73, 0x68, 0x72, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x62, 0x65, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x42, 0x3d, 0x5a, 0x3b, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e,
	0x73, 0x2f, 0x62, 0x6f, 0x73, 0x2d, 0x70, 0x6c, 0x75, 0x73, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x62,
	0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2f, 0x62, 0x6f, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x62, 0x6f,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_bos_v1_work_proto_rawDescOnce sync.Once
	file_bos_v1_work_proto_rawDescData = file_bos_v1_work_proto_rawDesc
)

func file_bos_v1_work_proto_rawDescGZIP() []byte {
	file_bos_v1_work_proto_rawDescOnce.Do(func() {
		file_bos_v1_work_proto_rawDescData = protoimpl.X.CompressGZIP(file_bos_v1_work_proto_rawDescData)
	})
	return file_bos_v1_work_proto_rawDescData
}

var file_bos_v1_work_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_bos_v1_work_proto_goTypes = []interface{}{
	(*RealHashrate)(nil),    // 0: braiins.bos.v1.RealHashrate
	(*WorkSolverStats)(nil), // 1: braiins.bos.v1.WorkSolverStats
	(*GigaHashrate)(nil),    // 2: braiins.bos.v1.GigaHashrate
	(*MegaHashrate)(nil),    // 3: braiins.bos.v1.MegaHashrate
}
var file_bos_v1_work_proto_depIdxs = []int32{
	2,  // 0: braiins.bos.v1.RealHashrate.last_5s:type_name -> braiins.bos.v1.GigaHashrate
	2,  // 1: braiins.bos.v1.RealHashrate.last_15s:type_name -> braiins.bos.v1.GigaHashrate
	2,  // 2: braiins.bos.v1.RealHashrate.last_30s:type_name -> braiins.bos.v1.GigaHashrate
	2,  // 3: braiins.bos.v1.RealHashrate.last_1m:type_name -> braiins.bos.v1.GigaHashrate
	2,  // 4: braiins.bos.v1.RealHashrate.last_5m:type_name -> braiins.bos.v1.GigaHashrate
	2,  // 5: braiins.bos.v1.RealHashrate.last_15m:type_name -> braiins.bos.v1.GigaHashrate
	2,  // 6: braiins.bos.v1.RealHashrate.last_30m:type_name -> braiins.bos.v1.GigaHashrate
	2,  // 7: braiins.bos.v1.RealHashrate.last_1h:type_name -> braiins.bos.v1.GigaHashrate
	2,  // 8: braiins.bos.v1.RealHashrate.last_24h:type_name -> braiins.bos.v1.GigaHashrate
	2,  // 9: braiins.bos.v1.RealHashrate.since_restart:type_name -> braiins.bos.v1.GigaHashrate
	0,  // 10: braiins.bos.v1.WorkSolverStats.real_hashrate:type_name -> braiins.bos.v1.RealHashrate
	2,  // 11: braiins.bos.v1.WorkSolverStats.nominal_hashrate:type_name -> braiins.bos.v1.GigaHashrate
	3,  // 12: braiins.bos.v1.WorkSolverStats.error_hashrate:type_name -> braiins.bos.v1.MegaHashrate
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_bos_v1_work_proto_init() }
func file_bos_v1_work_proto_init() {
	if File_bos_v1_work_proto != nil {
		return
	}
	file_bos_v1_units_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bos_v1_work_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealHashrate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_work_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkSolverStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bos_v1_work_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bos_v1_work_proto_goTypes,
		DependencyIndexes: file_bos_v1_work_proto_depIdxs,
		MessageInfos:      file_bos_v1_work_proto_msgTypes,
	}.Build()
	File_bos_v1_work_proto = out.File
	file_bos_v1_work_proto_rawDesc = nil
	file_bos_v1_work_proto_goTypes = nil
	file_bos_v1_work_proto_depIdxs = nil
}
