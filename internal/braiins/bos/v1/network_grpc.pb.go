// Copyright (C) 2024  Braiins Systems s.r.o.
//
// This file is part of Braiins Open-Source Initiative (BOSI).
//
// BOSI is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
// Please, keep in mind that we may also license BOSI or any part thereof
// under a proprietary license. For more information on the terms and conditions
// of such proprietary license or if you have any other questions, please
// contact us at opensource@braiins.com.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: bos/v1/network.proto

package bos_proto_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NetworkService_GetNetworkConfiguration_FullMethodName = "/braiins.bos.v1.NetworkService/GetNetworkConfiguration"
	NetworkService_SetNetworkConfiguration_FullMethodName = "/braiins.bos.v1.NetworkService/SetNetworkConfiguration"
	NetworkService_GetNetworkInfo_FullMethodName          = "/braiins.bos.v1.NetworkService/GetNetworkInfo"
)

// NetworkServiceClient is the client API for NetworkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkServiceClient interface {
	// Method to get network configuration
	GetNetworkConfiguration(ctx context.Context, in *GetNetworkConfigurationRequest, opts ...grpc.CallOption) (*GetNetworkConfigurationResponse, error)
	// Method to set network configuration. You can specify protocol or hostname, or both.
	SetNetworkConfiguration(ctx context.Context, in *SetNetworkConfigurationRequest, opts ...grpc.CallOption) (*SetNetworkConfigurationResponse, error)
	// Method to get current network configuration for the default network interface
	GetNetworkInfo(ctx context.Context, in *GetNetworkInfoRequest, opts ...grpc.CallOption) (*GetNetworkInfoResponse, error)
}

type networkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkServiceClient(cc grpc.ClientConnInterface) NetworkServiceClient {
	return &networkServiceClient{cc}
}

func (c *networkServiceClient) GetNetworkConfiguration(ctx context.Context, in *GetNetworkConfigurationRequest, opts ...grpc.CallOption) (*GetNetworkConfigurationResponse, error) {
	out := new(GetNetworkConfigurationResponse)
	err := c.cc.Invoke(ctx, NetworkService_GetNetworkConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) SetNetworkConfiguration(ctx context.Context, in *SetNetworkConfigurationRequest, opts ...grpc.CallOption) (*SetNetworkConfigurationResponse, error) {
	out := new(SetNetworkConfigurationResponse)
	err := c.cc.Invoke(ctx, NetworkService_SetNetworkConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) GetNetworkInfo(ctx context.Context, in *GetNetworkInfoRequest, opts ...grpc.CallOption) (*GetNetworkInfoResponse, error) {
	out := new(GetNetworkInfoResponse)
	err := c.cc.Invoke(ctx, NetworkService_GetNetworkInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkServiceServer is the server API for NetworkService service.
// All implementations must embed UnimplementedNetworkServiceServer
// for forward compatibility
type NetworkServiceServer interface {
	// Method to get network configuration
	GetNetworkConfiguration(context.Context, *GetNetworkConfigurationRequest) (*GetNetworkConfigurationResponse, error)
	// Method to set network configuration. You can specify protocol or hostname, or both.
	SetNetworkConfiguration(context.Context, *SetNetworkConfigurationRequest) (*SetNetworkConfigurationResponse, error)
	// Method to get current network configuration for the default network interface
	GetNetworkInfo(context.Context, *GetNetworkInfoRequest) (*GetNetworkInfoResponse, error)
	mustEmbedUnimplementedNetworkServiceServer()
}

// UnimplementedNetworkServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNetworkServiceServer struct {
}

func (UnimplementedNetworkServiceServer) GetNetworkConfiguration(context.Context, *GetNetworkConfigurationRequest) (*GetNetworkConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkConfiguration not implemented")
}
func (UnimplementedNetworkServiceServer) SetNetworkConfiguration(context.Context, *SetNetworkConfigurationRequest) (*SetNetworkConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNetworkConfiguration not implemented")
}
func (UnimplementedNetworkServiceServer) GetNetworkInfo(context.Context, *GetNetworkInfoRequest) (*GetNetworkInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkInfo not implemented")
}
func (UnimplementedNetworkServiceServer) mustEmbedUnimplementedNetworkServiceServer() {}

// UnsafeNetworkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkServiceServer will
// result in compilation errors.
type UnsafeNetworkServiceServer interface {
	mustEmbedUnimplementedNetworkServiceServer()
}

func RegisterNetworkServiceServer(s grpc.ServiceRegistrar, srv NetworkServiceServer) {
	s.RegisterService(&NetworkService_ServiceDesc, srv)
}

func _NetworkService_GetNetworkConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).GetNetworkConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_GetNetworkConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).GetNetworkConfiguration(ctx, req.(*GetNetworkConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_SetNetworkConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNetworkConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).SetNetworkConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_SetNetworkConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).SetNetworkConfiguration(ctx, req.(*SetNetworkConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_GetNetworkInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).GetNetworkInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_GetNetworkInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).GetNetworkInfo(ctx, req.(*GetNetworkInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NetworkService_ServiceDesc is the grpc.ServiceDesc for NetworkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "braiins.bos.v1.NetworkService",
	HandlerType: (*NetworkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNetworkConfiguration",
			Handler:    _NetworkService_GetNetworkConfiguration_Handler,
		},
		{
			MethodName: "SetNetworkConfiguration",
			Handler:    _NetworkService_SetNetworkConfiguration_Handler,
		},
		{
			MethodName: "GetNetworkInfo",
			Handler:    _NetworkService_GetNetworkInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bos/v1/network.proto",
}
