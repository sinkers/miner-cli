// Copyright (C) 2023  Braiins Systems s.r.o.
//
// This file is part of Braiins Open-Source Initiative (BOSI).
//
// BOSI is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
// Please, keep in mind that we may also license BOSI or any part thereof
// under a proprietary license. For more information on the terms and conditions
// of such proprietary license or if you have any other questions, please
// contact us at opensource@braiins.com.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: bos/v1/license.proto

package bos_proto_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LicenseService_GetLicenseState_FullMethodName  = "/braiins.bos.v1.LicenseService/GetLicenseState"
	LicenseService_ApplyContractKey_FullMethodName = "/braiins.bos.v1.LicenseService/ApplyContractKey"
)

// LicenseServiceClient is the client API for LicenseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LicenseServiceClient interface {
	GetLicenseState(ctx context.Context, in *GetLicenseStateRequest, opts ...grpc.CallOption) (*GetLicenseStateResponse, error)
	ApplyContractKey(ctx context.Context, in *ApplyContractKeyRequest, opts ...grpc.CallOption) (*ApplyContractKeyResponse, error)
}

type licenseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLicenseServiceClient(cc grpc.ClientConnInterface) LicenseServiceClient {
	return &licenseServiceClient{cc}
}

func (c *licenseServiceClient) GetLicenseState(ctx context.Context, in *GetLicenseStateRequest, opts ...grpc.CallOption) (*GetLicenseStateResponse, error) {
	out := new(GetLicenseStateResponse)
	err := c.cc.Invoke(ctx, LicenseService_GetLicenseState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *licenseServiceClient) ApplyContractKey(ctx context.Context, in *ApplyContractKeyRequest, opts ...grpc.CallOption) (*ApplyContractKeyResponse, error) {
	out := new(ApplyContractKeyResponse)
	err := c.cc.Invoke(ctx, LicenseService_ApplyContractKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LicenseServiceServer is the server API for LicenseService service.
// All implementations must embed UnimplementedLicenseServiceServer
// for forward compatibility
type LicenseServiceServer interface {
	GetLicenseState(context.Context, *GetLicenseStateRequest) (*GetLicenseStateResponse, error)
	ApplyContractKey(context.Context, *ApplyContractKeyRequest) (*ApplyContractKeyResponse, error)
	mustEmbedUnimplementedLicenseServiceServer()
}

// UnimplementedLicenseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLicenseServiceServer struct {
}

func (UnimplementedLicenseServiceServer) GetLicenseState(context.Context, *GetLicenseStateRequest) (*GetLicenseStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLicenseState not implemented")
}
func (UnimplementedLicenseServiceServer) ApplyContractKey(context.Context, *ApplyContractKeyRequest) (*ApplyContractKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyContractKey not implemented")
}
func (UnimplementedLicenseServiceServer) mustEmbedUnimplementedLicenseServiceServer() {}

// UnsafeLicenseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LicenseServiceServer will
// result in compilation errors.
type UnsafeLicenseServiceServer interface {
	mustEmbedUnimplementedLicenseServiceServer()
}

func RegisterLicenseServiceServer(s grpc.ServiceRegistrar, srv LicenseServiceServer) {
	s.RegisterService(&LicenseService_ServiceDesc, srv)
}

func _LicenseService_GetLicenseState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLicenseStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseServiceServer).GetLicenseState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LicenseService_GetLicenseState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseServiceServer).GetLicenseState(ctx, req.(*GetLicenseStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LicenseService_ApplyContractKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyContractKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseServiceServer).ApplyContractKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LicenseService_ApplyContractKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseServiceServer).ApplyContractKey(ctx, req.(*ApplyContractKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LicenseService_ServiceDesc is the grpc.ServiceDesc for LicenseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LicenseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "braiins.bos.v1.LicenseService",
	HandlerType: (*LicenseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLicenseState",
			Handler:    _LicenseService_GetLicenseState_Handler,
		},
		{
			MethodName: "ApplyContractKey",
			Handler:    _LicenseService_ApplyContractKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bos/v1/license.proto",
}
