// Copyright (C) 2023  Braiins Systems s.r.o.
//
// This file is part of Braiins Open-Source Initiative (BOSI).
//
// BOSI is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
// Please, keep in mind that we may also license BOSI or any part thereof
// under a proprietary license. For more information on the terms and conditions
// of such proprietary license or if you have any other questions, please
// contact us at opensource@braiins.com.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: bos/v1/pool.proto

package bos_proto_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Structure for quota load balance strategy
type Quota struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Quota) Reset() {
	*x = Quota{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_pool_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quota) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quota) ProtoMessage() {}

func (x *Quota) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_pool_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quota.ProtoReflect.Descriptor instead.
func (*Quota) Descriptor() ([]byte, []int) {
	return file_bos_v1_pool_proto_rawDescGZIP(), []int{0}
}

func (x *Quota) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// Structure for fixed share ratio load balance strategy
// Fixed share ratio is value between 0.0 to 1.0 where 1.0 represents that all work is
// generated from the group
type FixedShareRatio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *FixedShareRatio) Reset() {
	*x = FixedShareRatio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_pool_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixedShareRatio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixedShareRatio) ProtoMessage() {}

func (x *FixedShareRatio) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_pool_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixedShareRatio.ProtoReflect.Descriptor instead.
func (*FixedShareRatio) Descriptor() ([]byte, []int) {
	return file_bos_v1_pool_proto_rawDescGZIP(), []int{1}
}

func (x *FixedShareRatio) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// Structure handle configured mining group
type PoolGroupConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Group id<br>
	// gRPC: If this struct is used when creating a new Pool Group, this field must not be specified (it will be generated)<br>
	// gRPC: If this struct is used when updating an existing Pool Group, this field must be specified and represents unique id of Pool group which will be updated<br>
	// REST: If this struct is used when creating a new Pool Group, this field must not be specified (it will be generated)<br>
	// REST: If this struct is used when updating an existing Pool Group, this field must not be specified, uid in URL must be specified and represents unique id of Pool group which will be updated
	Uid *string `protobuf:"bytes,1,opt,name=uid,proto3,oneof" json:"uid,omitempty"`
	// Group name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Group load balance strategy
	//
	// Types that are assignable to LoadBalanceStrategy:
	//
	//	*PoolGroupConfiguration_Quota
	//	*PoolGroupConfiguration_FixedShareRatio
	LoadBalanceStrategy isPoolGroupConfiguration_LoadBalanceStrategy `protobuf_oneof:"load_balance_strategy"`
	// Group pools
	Pools []*PoolConfiguration `protobuf:"bytes,5,rep,name=pools,proto3" json:"pools,omitempty"`
}

func (x *PoolGroupConfiguration) Reset() {
	*x = PoolGroupConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_pool_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolGroupConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolGroupConfiguration) ProtoMessage() {}

func (x *PoolGroupConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_pool_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolGroupConfiguration.ProtoReflect.Descriptor instead.
func (*PoolGroupConfiguration) Descriptor() ([]byte, []int) {
	return file_bos_v1_pool_proto_rawDescGZIP(), []int{2}
}

func (x *PoolGroupConfiguration) GetUid() string {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return ""
}

func (x *PoolGroupConfiguration) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *PoolGroupConfiguration) GetLoadBalanceStrategy() isPoolGroupConfiguration_LoadBalanceStrategy {
	if m != nil {
		return m.LoadBalanceStrategy
	}
	return nil
}

func (x *PoolGroupConfiguration) GetQuota() *Quota {
	if x, ok := x.GetLoadBalanceStrategy().(*PoolGroupConfiguration_Quota); ok {
		return x.Quota
	}
	return nil
}

func (x *PoolGroupConfiguration) GetFixedShareRatio() *FixedShareRatio {
	if x, ok := x.GetLoadBalanceStrategy().(*PoolGroupConfiguration_FixedShareRatio); ok {
		return x.FixedShareRatio
	}
	return nil
}

func (x *PoolGroupConfiguration) GetPools() []*PoolConfiguration {
	if x != nil {
		return x.Pools
	}
	return nil
}

type isPoolGroupConfiguration_LoadBalanceStrategy interface {
	isPoolGroupConfiguration_LoadBalanceStrategy()
}

type PoolGroupConfiguration_Quota struct {
	Quota *Quota `protobuf:"bytes,3,opt,name=quota,proto3,oneof"`
}

type PoolGroupConfiguration_FixedShareRatio struct {
	FixedShareRatio *FixedShareRatio `protobuf:"bytes,4,opt,name=fixed_share_ratio,json=fixedShareRatio,proto3,oneof"`
}

func (*PoolGroupConfiguration_Quota) isPoolGroupConfiguration_LoadBalanceStrategy() {}

func (*PoolGroupConfiguration_FixedShareRatio) isPoolGroupConfiguration_LoadBalanceStrategy() {}

// Structure handle information about configured pool
type PoolConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pool connection id<br>
	// If this struct is used when creating a new Pool Configuration, this field must not be specified (it will be generated)<br>
	// If this struct is used when updating an existing configuration, this field must be specified and represents unique id of pool which will be updated
	Uid *string `protobuf:"bytes,1,opt,name=uid,proto3,oneof" json:"uid,omitempty"`
	// Pool connection URL
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// Pool connection user
	User string `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	// Pool connection password if set
	Password *string `protobuf:"bytes,4,opt,name=password,proto3,oneof" json:"password,omitempty"`
	// Flag if pool connection is enabled
	Enabled *bool `protobuf:"varint,5,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
}

func (x *PoolConfiguration) Reset() {
	*x = PoolConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_pool_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolConfiguration) ProtoMessage() {}

func (x *PoolConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_pool_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolConfiguration.ProtoReflect.Descriptor instead.
func (*PoolConfiguration) Descriptor() ([]byte, []int) {
	return file_bos_v1_pool_proto_rawDescGZIP(), []int{3}
}

func (x *PoolConfiguration) GetUid() string {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return ""
}

func (x *PoolConfiguration) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PoolConfiguration) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *PoolConfiguration) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *PoolConfiguration) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

// Structure handle all pool group details
type PoolGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Group name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Load balancing strategy
	//
	// Types that are assignable to Strategy:
	//
	//	*PoolGroup_Quota
	//	*PoolGroup_FixedShareRatio
	Strategy isPoolGroup_Strategy `protobuf_oneof:"strategy"`
	// Group pools
	Pools []*Pool `protobuf:"bytes,4,rep,name=pools,proto3" json:"pools,omitempty"`
}

func (x *PoolGroup) Reset() {
	*x = PoolGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_pool_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolGroup) ProtoMessage() {}

func (x *PoolGroup) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_pool_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolGroup.ProtoReflect.Descriptor instead.
func (*PoolGroup) Descriptor() ([]byte, []int) {
	return file_bos_v1_pool_proto_rawDescGZIP(), []int{4}
}

func (x *PoolGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *PoolGroup) GetStrategy() isPoolGroup_Strategy {
	if m != nil {
		return m.Strategy
	}
	return nil
}

func (x *PoolGroup) GetQuota() *Quota {
	if x, ok := x.GetStrategy().(*PoolGroup_Quota); ok {
		return x.Quota
	}
	return nil
}

func (x *PoolGroup) GetFixedShareRatio() *FixedShareRatio {
	if x, ok := x.GetStrategy().(*PoolGroup_FixedShareRatio); ok {
		return x.FixedShareRatio
	}
	return nil
}

func (x *PoolGroup) GetPools() []*Pool {
	if x != nil {
		return x.Pools
	}
	return nil
}

type isPoolGroup_Strategy interface {
	isPoolGroup_Strategy()
}

type PoolGroup_Quota struct {
	Quota *Quota `protobuf:"bytes,2,opt,name=quota,proto3,oneof"`
}

type PoolGroup_FixedShareRatio struct {
	FixedShareRatio *FixedShareRatio `protobuf:"bytes,3,opt,name=fixed_share_ratio,json=fixedShareRatio,proto3,oneof"`
}

func (*PoolGroup_Quota) isPoolGroup_Strategy() {}

func (*PoolGroup_FixedShareRatio) isPoolGroup_Strategy() {}

// Structure handle information about configured pool
type Pool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pool connection id
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// Pool connection URL
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// Pool connection user
	User string `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	// Flag if pool connection is enabled
	Enabled bool `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Flag if pool is alive
	Alive bool `protobuf:"varint,5,opt,name=alive,proto3" json:"alive,omitempty"`
	// Flag if pool is active (running)
	Active bool `protobuf:"varint,6,opt,name=active,proto3" json:"active,omitempty"`
	// Pool stats
	Stats *PoolStats `protobuf:"bytes,7,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *Pool) Reset() {
	*x = Pool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_pool_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pool) ProtoMessage() {}

func (x *Pool) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_pool_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pool.ProtoReflect.Descriptor instead.
func (*Pool) Descriptor() ([]byte, []int) {
	return file_bos_v1_pool_proto_rawDescGZIP(), []int{5}
}

func (x *Pool) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Pool) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Pool) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Pool) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Pool) GetAlive() bool {
	if x != nil {
		return x.Alive
	}
	return false
}

func (x *Pool) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Pool) GetStats() *PoolStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

// Structure handle pool statistics
type PoolStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Accepted shares
	AcceptedShares uint64 `protobuf:"varint,1,opt,name=accepted_shares,json=acceptedShares,proto3" json:"accepted_shares,omitempty"`
	// Rejected shares
	RejectedShares uint64 `protobuf:"varint,2,opt,name=rejected_shares,json=rejectedShares,proto3" json:"rejected_shares,omitempty"`
	// Stale shares
	StaleShares uint64 `protobuf:"varint,3,opt,name=stale_shares,json=staleShares,proto3" json:"stale_shares,omitempty"`
	// Last difficulty
	LastDifficulty uint64 `protobuf:"varint,4,opt,name=last_difficulty,json=lastDifficulty,proto3" json:"last_difficulty,omitempty"`
	// Best share
	BestShare uint64 `protobuf:"varint,5,opt,name=best_share,json=bestShare,proto3" json:"best_share,omitempty"`
	// Generated work
	GeneratedWork uint64 `protobuf:"varint,6,opt,name=generated_work,json=generatedWork,proto3" json:"generated_work,omitempty"`
	// Last share time
	LastShareTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=last_share_time,json=lastShareTime,proto3,oneof" json:"last_share_time,omitempty"`
}

func (x *PoolStats) Reset() {
	*x = PoolStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_pool_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolStats) ProtoMessage() {}

func (x *PoolStats) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_pool_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolStats.ProtoReflect.Descriptor instead.
func (*PoolStats) Descriptor() ([]byte, []int) {
	return file_bos_v1_pool_proto_rawDescGZIP(), []int{6}
}

func (x *PoolStats) GetAcceptedShares() uint64 {
	if x != nil {
		return x.AcceptedShares
	}
	return 0
}

func (x *PoolStats) GetRejectedShares() uint64 {
	if x != nil {
		return x.RejectedShares
	}
	return 0
}

func (x *PoolStats) GetStaleShares() uint64 {
	if x != nil {
		return x.StaleShares
	}
	return 0
}

func (x *PoolStats) GetLastDifficulty() uint64 {
	if x != nil {
		return x.LastDifficulty
	}
	return 0
}

func (x *PoolStats) GetBestShare() uint64 {
	if x != nil {
		return x.BestShare
	}
	return 0
}

func (x *PoolStats) GetGeneratedWork() uint64 {
	if x != nil {
		return x.GeneratedWork
	}
	return 0
}

func (x *PoolStats) GetLastShareTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastShareTime
	}
	return nil
}

// Request to get pool groups data
type GetPoolGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetPoolGroupsRequest) Reset() {
	*x = GetPoolGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_pool_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPoolGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPoolGroupsRequest) ProtoMessage() {}

func (x *GetPoolGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_pool_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPoolGroupsRequest.ProtoReflect.Descriptor instead.
func (*GetPoolGroupsRequest) Descriptor() ([]byte, []int) {
	return file_bos_v1_pool_proto_rawDescGZIP(), []int{7}
}

// Response on getting pool group data
type GetPoolGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All pool groups details
	PoolGroups []*PoolGroup `protobuf:"bytes,1,rep,name=pool_groups,json=poolGroups,proto3" json:"pool_groups,omitempty"`
}

func (x *GetPoolGroupsResponse) Reset() {
	*x = GetPoolGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_pool_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPoolGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPoolGroupsResponse) ProtoMessage() {}

func (x *GetPoolGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_pool_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPoolGroupsResponse.ProtoReflect.Descriptor instead.
func (*GetPoolGroupsResponse) Descriptor() ([]byte, []int) {
	return file_bos_v1_pool_proto_rawDescGZIP(), []int{8}
}

func (x *GetPoolGroupsResponse) GetPoolGroups() []*PoolGroup {
	if x != nil {
		return x.PoolGroups
	}
	return nil
}

// Request for pool group create action
// group.uid must not be specified (it will be generated)
// group.pools[].uid must not be specified (it will be generated)
type CreatePoolGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Save action
	SaveAction SaveAction `protobuf:"varint,1,opt,name=save_action,json=saveAction,proto3,enum=braiins.bos.v1.SaveAction" json:"save_action,omitempty"`
	// Group configuration
	Group *PoolGroupConfiguration `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *CreatePoolGroupRequest) Reset() {
	*x = CreatePoolGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_pool_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePoolGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePoolGroupRequest) ProtoMessage() {}

func (x *CreatePoolGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_pool_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePoolGroupRequest.ProtoReflect.Descriptor instead.
func (*CreatePoolGroupRequest) Descriptor() ([]byte, []int) {
	return file_bos_v1_pool_proto_rawDescGZIP(), []int{9}
}

func (x *CreatePoolGroupRequest) GetSaveAction() SaveAction {
	if x != nil {
		return x.SaveAction
	}
	return SaveAction_SAVE_ACTION_UNSPECIFIED
}

func (x *CreatePoolGroupRequest) GetGroup() *PoolGroupConfiguration {
	if x != nil {
		return x.Group
	}
	return nil
}

// Response for pool group create action
type CreatePoolGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Group configuration
	Group *PoolGroupConfiguration `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *CreatePoolGroupResponse) Reset() {
	*x = CreatePoolGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_pool_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePoolGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePoolGroupResponse) ProtoMessage() {}

func (x *CreatePoolGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_pool_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePoolGroupResponse.ProtoReflect.Descriptor instead.
func (*CreatePoolGroupResponse) Descriptor() ([]byte, []int) {
	return file_bos_v1_pool_proto_rawDescGZIP(), []int{10}
}

func (x *CreatePoolGroupResponse) GetGroup() *PoolGroupConfiguration {
	if x != nil {
		return x.Group
	}
	return nil
}

// Request for pool group update action
// group.uid must be specified and represents unique id of group which will be updated
// group.pools[].uid must not be specified (it will be generated)
type UpdatePoolGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Save action
	SaveAction SaveAction `protobuf:"varint,1,opt,name=save_action,json=saveAction,proto3,enum=braiins.bos.v1.SaveAction" json:"save_action,omitempty"`
	// New group configuration
	Group *PoolGroupConfiguration `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *UpdatePoolGroupRequest) Reset() {
	*x = UpdatePoolGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_pool_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePoolGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePoolGroupRequest) ProtoMessage() {}

func (x *UpdatePoolGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_pool_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePoolGroupRequest.ProtoReflect.Descriptor instead.
func (*UpdatePoolGroupRequest) Descriptor() ([]byte, []int) {
	return file_bos_v1_pool_proto_rawDescGZIP(), []int{11}
}

func (x *UpdatePoolGroupRequest) GetSaveAction() SaveAction {
	if x != nil {
		return x.SaveAction
	}
	return SaveAction_SAVE_ACTION_UNSPECIFIED
}

func (x *UpdatePoolGroupRequest) GetGroup() *PoolGroupConfiguration {
	if x != nil {
		return x.Group
	}
	return nil
}

// Response for pool group update action
type UpdatePoolGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Group configuration
	Group *PoolGroupConfiguration `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *UpdatePoolGroupResponse) Reset() {
	*x = UpdatePoolGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_pool_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePoolGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePoolGroupResponse) ProtoMessage() {}

func (x *UpdatePoolGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_pool_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePoolGroupResponse.ProtoReflect.Descriptor instead.
func (*UpdatePoolGroupResponse) Descriptor() ([]byte, []int) {
	return file_bos_v1_pool_proto_rawDescGZIP(), []int{12}
}

func (x *UpdatePoolGroupResponse) GetGroup() *PoolGroupConfiguration {
	if x != nil {
		return x.Group
	}
	return nil
}

// Request for pool group remove action
type RemovePoolGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Save action
	SaveAction SaveAction `protobuf:"varint,1,opt,name=save_action,json=saveAction,proto3,enum=braiins.bos.v1.SaveAction" json:"save_action,omitempty"`
	// Group id
	Uid string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *RemovePoolGroupRequest) Reset() {
	*x = RemovePoolGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_pool_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePoolGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePoolGroupRequest) ProtoMessage() {}

func (x *RemovePoolGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_pool_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePoolGroupRequest.ProtoReflect.Descriptor instead.
func (*RemovePoolGroupRequest) Descriptor() ([]byte, []int) {
	return file_bos_v1_pool_proto_rawDescGZIP(), []int{13}
}

func (x *RemovePoolGroupRequest) GetSaveAction() SaveAction {
	if x != nil {
		return x.SaveAction
	}
	return SaveAction_SAVE_ACTION_UNSPECIFIED
}

func (x *RemovePoolGroupRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

// Response for pool group remove action
type RemovePoolGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemovePoolGroupResponse) Reset() {
	*x = RemovePoolGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_pool_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePoolGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePoolGroupResponse) ProtoMessage() {}

func (x *RemovePoolGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_pool_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePoolGroupResponse.ProtoReflect.Descriptor instead.
func (*RemovePoolGroupResponse) Descriptor() ([]byte, []int) {
	return file_bos_v1_pool_proto_rawDescGZIP(), []int{14}
}

// Request for setting pool groups
type SetPoolGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Save action
	// SAVE just update config but changes will not be applied
	// SAVE_AND_APPLY and SAVE_AND_FORCE_APPLY are equal for this method. Pools config will be updated and changes will be applied that will trigger restart.
	SaveAction SaveAction `protobuf:"varint,1,opt,name=save_action,json=saveAction,proto3,enum=braiins.bos.v1.SaveAction" json:"save_action,omitempty"`
	// Pool groups configuration
	// `uid` must not be specified (it will be generated)
	PoolGroups []*PoolGroupConfiguration `protobuf:"bytes,2,rep,name=pool_groups,json=poolGroups,proto3" json:"pool_groups,omitempty"`
}

func (x *SetPoolGroupsRequest) Reset() {
	*x = SetPoolGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_pool_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPoolGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPoolGroupsRequest) ProtoMessage() {}

func (x *SetPoolGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_pool_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPoolGroupsRequest.ProtoReflect.Descriptor instead.
func (*SetPoolGroupsRequest) Descriptor() ([]byte, []int) {
	return file_bos_v1_pool_proto_rawDescGZIP(), []int{15}
}

func (x *SetPoolGroupsRequest) GetSaveAction() SaveAction {
	if x != nil {
		return x.SaveAction
	}
	return SaveAction_SAVE_ACTION_UNSPECIFIED
}

func (x *SetPoolGroupsRequest) GetPoolGroups() []*PoolGroupConfiguration {
	if x != nil {
		return x.PoolGroups
	}
	return nil
}

// Response on setting pool groups
type SetPoolGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Configured pool groups
	PoolGroups []*PoolGroupConfiguration `protobuf:"bytes,1,rep,name=pool_groups,json=poolGroups,proto3" json:"pool_groups,omitempty"`
}

func (x *SetPoolGroupsResponse) Reset() {
	*x = SetPoolGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_pool_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPoolGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPoolGroupsResponse) ProtoMessage() {}

func (x *SetPoolGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_pool_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPoolGroupsResponse.ProtoReflect.Descriptor instead.
func (*SetPoolGroupsResponse) Descriptor() ([]byte, []int) {
	return file_bos_v1_pool_proto_rawDescGZIP(), []int{16}
}

func (x *SetPoolGroupsResponse) GetPoolGroups() []*PoolGroupConfiguration {
	if x != nil {
		return x.PoolGroups
	}
	return nil
}

var File_bos_v1_pool_proto protoreflect.FileDescriptor

var file_bos_v1_pool_proto_rawDesc = []byte{
	0x0a, 0x11, 0x62, 0x6f, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73,
	0x2e, 0x76, 0x31, 0x1a, 0x13, 0x62, 0x6f, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1d, 0x0a, 0x05, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x27, 0x0a, 0x0f, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x9b, 0x02, 0x0a, 0x16, 0x50, 0x6f, 0x6f, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73,
	0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x4d, 0x0a, 0x11, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x37, 0x0a, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62,
	0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x42, 0x17,
	0x0a, 0x15, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x69, 0x64, 0x22,
	0xb1, 0x01, 0x0a, 0x11, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x22, 0xd5, 0x01, 0x0a, 0x09, 0x50, 0x6f, 0x6f, 0x6c, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62,
	0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x48, 0x00, 0x52, 0x05, 0x71,
	0x75, 0x6f, 0x74, 0x61, 0x12, 0x4d, 0x0a, 0x11, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x48, 0x00, 0x52, 0x0f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x12, 0x2a, 0x0a, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x42,
	0x0a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0xb7, 0x01, 0x0a, 0x04,
	0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0xcc, 0x02, 0x0a, 0x09, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x5f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x74, 0x61,
	0x6c, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x65, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x47, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0d,
	0x6c, 0x61, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x53, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x72, 0x61,
	0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6f, 0x6c,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x70, 0x6f, 0x6f, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x22, 0x93, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0b,
	0x73, 0x61, 0x76, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73,
	0x61, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69,
	0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x57, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x22, 0x93, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x73,
	0x61, 0x76, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x61,
	0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e,
	0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x57, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3c, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22,
	0x67, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x61, 0x76,
	0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x61, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x61, 0x76, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0b,
	0x73, 0x61, 0x76, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73,
	0x61, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0b, 0x70, 0x6f, 0x6f,
	0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x6f, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x6f, 0x6f, 0x6c, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x22, 0x60, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0b, 0x70,
	0x6f, 0x6f, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x6f, 0x6f, 0x6c, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x32, 0xf5, 0x03, 0x0a, 0x0b, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x24, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e,
	0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x62, 0x72,
	0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x6f, 0x6f, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x62, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x26, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e,
	0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x26, 0x2e, 0x62, 0x72, 0x61, 0x69,
	0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x0f, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x26, 0x2e,
	0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e,
	0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c,
	0x0a, 0x0d, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x24, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e,
	0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3d, 0x5a, 0x3b,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x72, 0x61, 0x69, 0x69,
	0x6e, 0x73, 0x2f, 0x62, 0x6f, 0x73, 0x2d, 0x70, 0x6c, 0x75, 0x73, 0x2d, 0x61, 0x70, 0x69, 0x2f,
	0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2f, 0x62, 0x6f, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x62,
	0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_bos_v1_pool_proto_rawDescOnce sync.Once
	file_bos_v1_pool_proto_rawDescData = file_bos_v1_pool_proto_rawDesc
)

func file_bos_v1_pool_proto_rawDescGZIP() []byte {
	file_bos_v1_pool_proto_rawDescOnce.Do(func() {
		file_bos_v1_pool_proto_rawDescData = protoimpl.X.CompressGZIP(file_bos_v1_pool_proto_rawDescData)
	})
	return file_bos_v1_pool_proto_rawDescData
}

var file_bos_v1_pool_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_bos_v1_pool_proto_goTypes = []interface{}{
	(*Quota)(nil),                   // 0: braiins.bos.v1.Quota
	(*FixedShareRatio)(nil),         // 1: braiins.bos.v1.FixedShareRatio
	(*PoolGroupConfiguration)(nil),  // 2: braiins.bos.v1.PoolGroupConfiguration
	(*PoolConfiguration)(nil),       // 3: braiins.bos.v1.PoolConfiguration
	(*PoolGroup)(nil),               // 4: braiins.bos.v1.PoolGroup
	(*Pool)(nil),                    // 5: braiins.bos.v1.Pool
	(*PoolStats)(nil),               // 6: braiins.bos.v1.PoolStats
	(*GetPoolGroupsRequest)(nil),    // 7: braiins.bos.v1.GetPoolGroupsRequest
	(*GetPoolGroupsResponse)(nil),   // 8: braiins.bos.v1.GetPoolGroupsResponse
	(*CreatePoolGroupRequest)(nil),  // 9: braiins.bos.v1.CreatePoolGroupRequest
	(*CreatePoolGroupResponse)(nil), // 10: braiins.bos.v1.CreatePoolGroupResponse
	(*UpdatePoolGroupRequest)(nil),  // 11: braiins.bos.v1.UpdatePoolGroupRequest
	(*UpdatePoolGroupResponse)(nil), // 12: braiins.bos.v1.UpdatePoolGroupResponse
	(*RemovePoolGroupRequest)(nil),  // 13: braiins.bos.v1.RemovePoolGroupRequest
	(*RemovePoolGroupResponse)(nil), // 14: braiins.bos.v1.RemovePoolGroupResponse
	(*SetPoolGroupsRequest)(nil),    // 15: braiins.bos.v1.SetPoolGroupsRequest
	(*SetPoolGroupsResponse)(nil),   // 16: braiins.bos.v1.SetPoolGroupsResponse
	(*timestamppb.Timestamp)(nil),   // 17: google.protobuf.Timestamp
	(SaveAction)(0),                 // 18: braiins.bos.v1.SaveAction
}
var file_bos_v1_pool_proto_depIdxs = []int32{
	0,  // 0: braiins.bos.v1.PoolGroupConfiguration.quota:type_name -> braiins.bos.v1.Quota
	1,  // 1: braiins.bos.v1.PoolGroupConfiguration.fixed_share_ratio:type_name -> braiins.bos.v1.FixedShareRatio
	3,  // 2: braiins.bos.v1.PoolGroupConfiguration.pools:type_name -> braiins.bos.v1.PoolConfiguration
	0,  // 3: braiins.bos.v1.PoolGroup.quota:type_name -> braiins.bos.v1.Quota
	1,  // 4: braiins.bos.v1.PoolGroup.fixed_share_ratio:type_name -> braiins.bos.v1.FixedShareRatio
	5,  // 5: braiins.bos.v1.PoolGroup.pools:type_name -> braiins.bos.v1.Pool
	6,  // 6: braiins.bos.v1.Pool.stats:type_name -> braiins.bos.v1.PoolStats
	17, // 7: braiins.bos.v1.PoolStats.last_share_time:type_name -> google.protobuf.Timestamp
	4,  // 8: braiins.bos.v1.GetPoolGroupsResponse.pool_groups:type_name -> braiins.bos.v1.PoolGroup
	18, // 9: braiins.bos.v1.CreatePoolGroupRequest.save_action:type_name -> braiins.bos.v1.SaveAction
	2,  // 10: braiins.bos.v1.CreatePoolGroupRequest.group:type_name -> braiins.bos.v1.PoolGroupConfiguration
	2,  // 11: braiins.bos.v1.CreatePoolGroupResponse.group:type_name -> braiins.bos.v1.PoolGroupConfiguration
	18, // 12: braiins.bos.v1.UpdatePoolGroupRequest.save_action:type_name -> braiins.bos.v1.SaveAction
	2,  // 13: braiins.bos.v1.UpdatePoolGroupRequest.group:type_name -> braiins.bos.v1.PoolGroupConfiguration
	2,  // 14: braiins.bos.v1.UpdatePoolGroupResponse.group:type_name -> braiins.bos.v1.PoolGroupConfiguration
	18, // 15: braiins.bos.v1.RemovePoolGroupRequest.save_action:type_name -> braiins.bos.v1.SaveAction
	18, // 16: braiins.bos.v1.SetPoolGroupsRequest.save_action:type_name -> braiins.bos.v1.SaveAction
	2,  // 17: braiins.bos.v1.SetPoolGroupsRequest.pool_groups:type_name -> braiins.bos.v1.PoolGroupConfiguration
	2,  // 18: braiins.bos.v1.SetPoolGroupsResponse.pool_groups:type_name -> braiins.bos.v1.PoolGroupConfiguration
	7,  // 19: braiins.bos.v1.PoolService.GetPoolGroups:input_type -> braiins.bos.v1.GetPoolGroupsRequest
	9,  // 20: braiins.bos.v1.PoolService.CreatePoolGroup:input_type -> braiins.bos.v1.CreatePoolGroupRequest
	11, // 21: braiins.bos.v1.PoolService.UpdatePoolGroup:input_type -> braiins.bos.v1.UpdatePoolGroupRequest
	13, // 22: braiins.bos.v1.PoolService.RemovePoolGroup:input_type -> braiins.bos.v1.RemovePoolGroupRequest
	15, // 23: braiins.bos.v1.PoolService.SetPoolGroups:input_type -> braiins.bos.v1.SetPoolGroupsRequest
	8,  // 24: braiins.bos.v1.PoolService.GetPoolGroups:output_type -> braiins.bos.v1.GetPoolGroupsResponse
	10, // 25: braiins.bos.v1.PoolService.CreatePoolGroup:output_type -> braiins.bos.v1.CreatePoolGroupResponse
	12, // 26: braiins.bos.v1.PoolService.UpdatePoolGroup:output_type -> braiins.bos.v1.UpdatePoolGroupResponse
	14, // 27: braiins.bos.v1.PoolService.RemovePoolGroup:output_type -> braiins.bos.v1.RemovePoolGroupResponse
	16, // 28: braiins.bos.v1.PoolService.SetPoolGroups:output_type -> braiins.bos.v1.SetPoolGroupsResponse
	24, // [24:29] is the sub-list for method output_type
	19, // [19:24] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_bos_v1_pool_proto_init() }
func file_bos_v1_pool_proto_init() {
	if File_bos_v1_pool_proto != nil {
		return
	}
	file_bos_v1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bos_v1_pool_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quota); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_pool_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FixedShareRatio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_pool_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolGroupConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_pool_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_pool_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_pool_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_pool_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_pool_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPoolGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_pool_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPoolGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_pool_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePoolGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_pool_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePoolGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_pool_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePoolGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_pool_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePoolGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_pool_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePoolGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_pool_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePoolGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_pool_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPoolGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_pool_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPoolGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bos_v1_pool_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*PoolGroupConfiguration_Quota)(nil),
		(*PoolGroupConfiguration_FixedShareRatio)(nil),
	}
	file_bos_v1_pool_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_bos_v1_pool_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*PoolGroup_Quota)(nil),
		(*PoolGroup_FixedShareRatio)(nil),
	}
	file_bos_v1_pool_proto_msgTypes[6].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bos_v1_pool_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bos_v1_pool_proto_goTypes,
		DependencyIndexes: file_bos_v1_pool_proto_depIdxs,
		MessageInfos:      file_bos_v1_pool_proto_msgTypes,
	}.Build()
	File_bos_v1_pool_proto = out.File
	file_bos_v1_pool_proto_rawDesc = nil
	file_bos_v1_pool_proto_goTypes = nil
	file_bos_v1_pool_proto_depIdxs = nil
}
