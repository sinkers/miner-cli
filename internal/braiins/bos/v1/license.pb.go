// Copyright (C) 2023  Braiins Systems s.r.o.
//
// This file is part of Braiins Open-Source Initiative (BOSI).
//
// BOSI is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
// Please, keep in mind that we may also license BOSI or any part thereof
// under a proprietary license. For more information on the terms and conditions
// of such proprietary license or if you have any other questions, please
// contact us at opensource@braiins.com.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: bos/v1/license.proto

package bos_proto_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LicenseType int32

const (
	LicenseType_LICENSE_TYPE_UNSPECIFIED LicenseType = 0
	LicenseType_LICENSE_TYPE_STANDARD    LicenseType = 1
	LicenseType_LICENSE_TYPE_CUSTOM      LicenseType = 2
)

// Enum value maps for LicenseType.
var (
	LicenseType_name = map[int32]string{
		0: "LICENSE_TYPE_UNSPECIFIED",
		1: "LICENSE_TYPE_STANDARD",
		2: "LICENSE_TYPE_CUSTOM",
	}
	LicenseType_value = map[string]int32{
		"LICENSE_TYPE_UNSPECIFIED": 0,
		"LICENSE_TYPE_STANDARD":    1,
		"LICENSE_TYPE_CUSTOM":      2,
	}
)

func (x LicenseType) Enum() *LicenseType {
	p := new(LicenseType)
	*p = x
	return p
}

func (x LicenseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LicenseType) Descriptor() protoreflect.EnumDescriptor {
	return file_bos_v1_license_proto_enumTypes[0].Descriptor()
}

func (LicenseType) Type() protoreflect.EnumType {
	return &file_bos_v1_license_proto_enumTypes[0]
}

func (x LicenseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LicenseType.Descriptor instead.
func (LicenseType) EnumDescriptor() ([]byte, []int) {
	return file_bos_v1_license_proto_rawDescGZIP(), []int{0}
}

type NoneLicense struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BOS Initialization timeout - number of seconds elapsed since bosminer start
	// i.e., number of seconds BOS will start mining in restricted mode burning 5% of hashrate
	// For more, see Section 3.10 of https://braiins.com/os/plus/license
	TimeToRestricted uint32 `protobuf:"varint,1,opt,name=time_to_restricted,json=timeToRestricted,proto3" json:"time_to_restricted,omitempty"`
}

func (x *NoneLicense) Reset() {
	*x = NoneLicense{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_license_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoneLicense) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoneLicense) ProtoMessage() {}

func (x *NoneLicense) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_license_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoneLicense.ProtoReflect.Descriptor instead.
func (*NoneLicense) Descriptor() ([]byte, []int) {
	return file_bos_v1_license_proto_rawDescGZIP(), []int{0}
}

func (x *NoneLicense) GetTimeToRestricted() uint32 {
	if x != nil {
		return x.TimeToRestricted
	}
	return 0
}

type LimitedLicense struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LimitedLicense) Reset() {
	*x = LimitedLicense{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_license_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimitedLicense) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitedLicense) ProtoMessage() {}

func (x *LimitedLicense) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_license_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitedLicense.ProtoReflect.Descriptor instead.
func (*LimitedLicense) Descriptor() ([]byte, []int) {
	return file_bos_v1_license_proto_rawDescGZIP(), []int{1}
}

type ValidLicense struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// License type
	Type LicenseType `protobuf:"varint,1,opt,name=type,proto3,enum=braiins.bos.v1.LicenseType" json:"type,omitempty"`
	// Contract name
	ContractName string `protobuf:"bytes,2,opt,name=contract_name,json=contractName,proto3" json:"contract_name,omitempty"`
	// Current license expiration - number of seconds since the moment the license was received
	// i.e., number of seconds BOS will start mining in restricted mode burning 15% of hashrate
	TimeToRestricted uint32 `protobuf:"varint,3,opt,name=time_to_restricted,json=timeToRestricted,proto3" json:"time_to_restricted,omitempty"`
	// Defines how much DevFee should be generated by the device.
	DevFee *BasesPoints `protobuf:"bytes,4,opt,name=dev_fee,json=devFee,proto3" json:"dev_fee,omitempty"`
}

func (x *ValidLicense) Reset() {
	*x = ValidLicense{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_license_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidLicense) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidLicense) ProtoMessage() {}

func (x *ValidLicense) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_license_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidLicense.ProtoReflect.Descriptor instead.
func (*ValidLicense) Descriptor() ([]byte, []int) {
	return file_bos_v1_license_proto_rawDescGZIP(), []int{2}
}

func (x *ValidLicense) GetType() LicenseType {
	if x != nil {
		return x.Type
	}
	return LicenseType_LICENSE_TYPE_UNSPECIFIED
}

func (x *ValidLicense) GetContractName() string {
	if x != nil {
		return x.ContractName
	}
	return ""
}

func (x *ValidLicense) GetTimeToRestricted() uint32 {
	if x != nil {
		return x.TimeToRestricted
	}
	return 0
}

func (x *ValidLicense) GetDevFee() *BasesPoints {
	if x != nil {
		return x.DevFee
	}
	return nil
}

type ExpiredLicense struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// License type
	Type LicenseType `protobuf:"varint,1,opt,name=type,proto3,enum=braiins.bos.v1.LicenseType" json:"type,omitempty"`
	// Contract name
	ContractName string `protobuf:"bytes,2,opt,name=contract_name,json=contractName,proto3" json:"contract_name,omitempty"`
	// Defines how much DevFee should be generated by the device.
	DevFee *BasesPoints `protobuf:"bytes,3,opt,name=dev_fee,json=devFee,proto3" json:"dev_fee,omitempty"`
}

func (x *ExpiredLicense) Reset() {
	*x = ExpiredLicense{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_license_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpiredLicense) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpiredLicense) ProtoMessage() {}

func (x *ExpiredLicense) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_license_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpiredLicense.ProtoReflect.Descriptor instead.
func (*ExpiredLicense) Descriptor() ([]byte, []int) {
	return file_bos_v1_license_proto_rawDescGZIP(), []int{3}
}

func (x *ExpiredLicense) GetType() LicenseType {
	if x != nil {
		return x.Type
	}
	return LicenseType_LICENSE_TYPE_UNSPECIFIED
}

func (x *ExpiredLicense) GetContractName() string {
	if x != nil {
		return x.ContractName
	}
	return ""
}

func (x *ExpiredLicense) GetDevFee() *BasesPoints {
	if x != nil {
		return x.DevFee
	}
	return nil
}

type GetLicenseStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetLicenseStateRequest) Reset() {
	*x = GetLicenseStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_license_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLicenseStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLicenseStateRequest) ProtoMessage() {}

func (x *GetLicenseStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_license_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLicenseStateRequest.ProtoReflect.Descriptor instead.
func (*GetLicenseStateRequest) Descriptor() ([]byte, []int) {
	return file_bos_v1_license_proto_rawDescGZIP(), []int{4}
}

type GetLicenseStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to State:
	//
	//	*GetLicenseStateResponse_None
	//	*GetLicenseStateResponse_Limited
	//	*GetLicenseStateResponse_Valid
	//	*GetLicenseStateResponse_Expired
	State isGetLicenseStateResponse_State `protobuf_oneof:"state"`
}

func (x *GetLicenseStateResponse) Reset() {
	*x = GetLicenseStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_license_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLicenseStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLicenseStateResponse) ProtoMessage() {}

func (x *GetLicenseStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_license_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLicenseStateResponse.ProtoReflect.Descriptor instead.
func (*GetLicenseStateResponse) Descriptor() ([]byte, []int) {
	return file_bos_v1_license_proto_rawDescGZIP(), []int{5}
}

func (m *GetLicenseStateResponse) GetState() isGetLicenseStateResponse_State {
	if m != nil {
		return m.State
	}
	return nil
}

func (x *GetLicenseStateResponse) GetNone() *NoneLicense {
	if x, ok := x.GetState().(*GetLicenseStateResponse_None); ok {
		return x.None
	}
	return nil
}

func (x *GetLicenseStateResponse) GetLimited() *LimitedLicense {
	if x, ok := x.GetState().(*GetLicenseStateResponse_Limited); ok {
		return x.Limited
	}
	return nil
}

func (x *GetLicenseStateResponse) GetValid() *ValidLicense {
	if x, ok := x.GetState().(*GetLicenseStateResponse_Valid); ok {
		return x.Valid
	}
	return nil
}

func (x *GetLicenseStateResponse) GetExpired() *ExpiredLicense {
	if x, ok := x.GetState().(*GetLicenseStateResponse_Expired); ok {
		return x.Expired
	}
	return nil
}

type isGetLicenseStateResponse_State interface {
	isGetLicenseStateResponse_State()
}

type GetLicenseStateResponse_None struct {
	None *NoneLicense `protobuf:"bytes,1,opt,name=none,proto3,oneof"`
}

type GetLicenseStateResponse_Limited struct {
	Limited *LimitedLicense `protobuf:"bytes,2,opt,name=limited,proto3,oneof"`
}

type GetLicenseStateResponse_Valid struct {
	Valid *ValidLicense `protobuf:"bytes,3,opt,name=valid,proto3,oneof"`
}

type GetLicenseStateResponse_Expired struct {
	Expired *ExpiredLicense `protobuf:"bytes,4,opt,name=expired,proto3,oneof"`
}

func (*GetLicenseStateResponse_None) isGetLicenseStateResponse_State() {}

func (*GetLicenseStateResponse_Limited) isGetLicenseStateResponse_State() {}

func (*GetLicenseStateResponse_Valid) isGetLicenseStateResponse_State() {}

func (*GetLicenseStateResponse_Expired) isGetLicenseStateResponse_State() {}

type ApplyContractKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Licence contract key string
	ContractKey string `protobuf:"bytes,1,opt,name=contract_key,json=contractKey,proto3" json:"contract_key,omitempty"`
}

func (x *ApplyContractKeyRequest) Reset() {
	*x = ApplyContractKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_license_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyContractKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyContractKeyRequest) ProtoMessage() {}

func (x *ApplyContractKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_license_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyContractKeyRequest.ProtoReflect.Descriptor instead.
func (*ApplyContractKeyRequest) Descriptor() ([]byte, []int) {
	return file_bos_v1_license_proto_rawDescGZIP(), []int{6}
}

func (x *ApplyContractKeyRequest) GetContractKey() string {
	if x != nil {
		return x.ContractKey
	}
	return ""
}

type ApplyContractKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flag if custom license was successfully installed
	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (x *ApplyContractKeyResponse) Reset() {
	*x = ApplyContractKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bos_v1_license_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyContractKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyContractKeyResponse) ProtoMessage() {}

func (x *ApplyContractKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bos_v1_license_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyContractKeyResponse.ProtoReflect.Descriptor instead.
func (*ApplyContractKeyResponse) Descriptor() ([]byte, []int) {
	return file_bos_v1_license_proto_rawDescGZIP(), []int{7}
}

func (x *ApplyContractKeyResponse) GetSuccessful() bool {
	if x != nil {
		return x.Successful
	}
	return false
}

var File_bos_v1_license_proto protoreflect.FileDescriptor

var file_bos_v1_license_proto_rawDesc = []byte{
	0x0a, 0x14, 0x62, 0x6f, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e,
	0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x12, 0x62, 0x6f, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x75,
	0x6e, 0x69, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3b, 0x0a, 0x0b, 0x4e, 0x6f,
	0x6e, 0x65, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x52, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x22, 0x10, 0x0a, 0x0e, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x0c, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69,
	0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x69,
	0x6d, 0x65, 0x54, 0x6f, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x12, 0x34,
	0x0a, 0x07, 0x64, 0x65, 0x76, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x06, 0x64, 0x65,
	0x76, 0x46, 0x65, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e,
	0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a,
	0x07, 0x64, 0x65, 0x76, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x06, 0x64, 0x65, 0x76,
	0x46, 0x65, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x83, 0x02,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x6e, 0x6f, 0x6e,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e,
	0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6e, 0x65, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x12, 0x3a, 0x0a, 0x07,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x07, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e,
	0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x3a,
	0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x22, 0x3c, 0x0a, 0x17, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4b, 0x65,
	0x79, 0x22, 0x3a, 0x0a, 0x18, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x2a, 0x5f, 0x0a,
	0x0b, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18,
	0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x49,
	0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44,
	0x41, 0x52, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x02, 0x32, 0xdb,
	0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x62, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62,
	0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62,
	0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x27, 0x2e, 0x62, 0x72, 0x61, 0x69,
	0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2e, 0x62, 0x6f, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3d, 0x5a, 0x3b,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x72, 0x61, 0x69, 0x69,
	0x6e, 0x73, 0x2f, 0x62, 0x6f, 0x73, 0x2d, 0x70, 0x6c, 0x75, 0x73, 0x2d, 0x61, 0x70, 0x69, 0x2f,
	0x62, 0x72, 0x61, 0x69, 0x69, 0x6e, 0x73, 0x2f, 0x62, 0x6f, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x62,
	0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_bos_v1_license_proto_rawDescOnce sync.Once
	file_bos_v1_license_proto_rawDescData = file_bos_v1_license_proto_rawDesc
)

func file_bos_v1_license_proto_rawDescGZIP() []byte {
	file_bos_v1_license_proto_rawDescOnce.Do(func() {
		file_bos_v1_license_proto_rawDescData = protoimpl.X.CompressGZIP(file_bos_v1_license_proto_rawDescData)
	})
	return file_bos_v1_license_proto_rawDescData
}

var file_bos_v1_license_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_bos_v1_license_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_bos_v1_license_proto_goTypes = []interface{}{
	(LicenseType)(0),                 // 0: braiins.bos.v1.LicenseType
	(*NoneLicense)(nil),              // 1: braiins.bos.v1.NoneLicense
	(*LimitedLicense)(nil),           // 2: braiins.bos.v1.LimitedLicense
	(*ValidLicense)(nil),             // 3: braiins.bos.v1.ValidLicense
	(*ExpiredLicense)(nil),           // 4: braiins.bos.v1.ExpiredLicense
	(*GetLicenseStateRequest)(nil),   // 5: braiins.bos.v1.GetLicenseStateRequest
	(*GetLicenseStateResponse)(nil),  // 6: braiins.bos.v1.GetLicenseStateResponse
	(*ApplyContractKeyRequest)(nil),  // 7: braiins.bos.v1.ApplyContractKeyRequest
	(*ApplyContractKeyResponse)(nil), // 8: braiins.bos.v1.ApplyContractKeyResponse
	(*BasesPoints)(nil),              // 9: braiins.bos.v1.BasesPoints
}
var file_bos_v1_license_proto_depIdxs = []int32{
	0,  // 0: braiins.bos.v1.ValidLicense.type:type_name -> braiins.bos.v1.LicenseType
	9,  // 1: braiins.bos.v1.ValidLicense.dev_fee:type_name -> braiins.bos.v1.BasesPoints
	0,  // 2: braiins.bos.v1.ExpiredLicense.type:type_name -> braiins.bos.v1.LicenseType
	9,  // 3: braiins.bos.v1.ExpiredLicense.dev_fee:type_name -> braiins.bos.v1.BasesPoints
	1,  // 4: braiins.bos.v1.GetLicenseStateResponse.none:type_name -> braiins.bos.v1.NoneLicense
	2,  // 5: braiins.bos.v1.GetLicenseStateResponse.limited:type_name -> braiins.bos.v1.LimitedLicense
	3,  // 6: braiins.bos.v1.GetLicenseStateResponse.valid:type_name -> braiins.bos.v1.ValidLicense
	4,  // 7: braiins.bos.v1.GetLicenseStateResponse.expired:type_name -> braiins.bos.v1.ExpiredLicense
	5,  // 8: braiins.bos.v1.LicenseService.GetLicenseState:input_type -> braiins.bos.v1.GetLicenseStateRequest
	7,  // 9: braiins.bos.v1.LicenseService.ApplyContractKey:input_type -> braiins.bos.v1.ApplyContractKeyRequest
	6,  // 10: braiins.bos.v1.LicenseService.GetLicenseState:output_type -> braiins.bos.v1.GetLicenseStateResponse
	8,  // 11: braiins.bos.v1.LicenseService.ApplyContractKey:output_type -> braiins.bos.v1.ApplyContractKeyResponse
	10, // [10:12] is the sub-list for method output_type
	8,  // [8:10] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_bos_v1_license_proto_init() }
func file_bos_v1_license_proto_init() {
	if File_bos_v1_license_proto != nil {
		return
	}
	file_bos_v1_units_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bos_v1_license_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoneLicense); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_license_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimitedLicense); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_license_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidLicense); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_license_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpiredLicense); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_license_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLicenseStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_license_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLicenseStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_license_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyContractKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bos_v1_license_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyContractKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bos_v1_license_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*GetLicenseStateResponse_None)(nil),
		(*GetLicenseStateResponse_Limited)(nil),
		(*GetLicenseStateResponse_Valid)(nil),
		(*GetLicenseStateResponse_Expired)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bos_v1_license_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bos_v1_license_proto_goTypes,
		DependencyIndexes: file_bos_v1_license_proto_depIdxs,
		EnumInfos:         file_bos_v1_license_proto_enumTypes,
		MessageInfos:      file_bos_v1_license_proto_msgTypes,
	}.Build()
	File_bos_v1_license_proto = out.File
	file_bos_v1_license_proto_rawDesc = nil
	file_bos_v1_license_proto_goTypes = nil
	file_bos_v1_license_proto_depIdxs = nil
}
