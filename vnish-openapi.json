{
  "openapi": "3.1.0",
  "info": {
    "title": "xminer-api",
    "description": "",
    "contact": {
      "name": "anthill.farm",
      "email": "support@anthill.farm"
    },
    "license": {
      "name": ""
    },
    "version": "0.1.0"
  },
  "servers": [
    {
      "url": "/api/v1",
      "description": "Current miner API"
    }
  ],
  "paths": {
    "/activate-warranty": {
      "post": {
        "tags": [
          "warranty"
        ],
        "summary": "Warranty activate",
        "operationId": "warrantyActivate",
        "responses": {
          "200": {
            "description": "Warranty was successfully activated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarrantyStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrDescr"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "apikeyAuth": []
          }
        ]
      }
    },
    "/apikeys": {
      "get": {
        "tags": [
          "apikeys"
        ],
        "summary": "Get apikeys",
        "operationId": "apikeysGet",
        "responses": {
          "200": {
            "description": "Api key list read successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiKeysJsonItem"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrDescr"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "apikeyAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "apikeys"
        ],
        "summary": "Add api key",
        "operationId": "apikeysAdd",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddApikeyQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Api key was added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddApiKeyRes"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrDescr"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "apikeyAuth": []
          }
        ]
      }
    },
    "/apikeys/delete": {
      "post": {
        "tags": [
          "apikeys"
        ],
        "summary": "Delete api key",
        "operationId": "apikeysDelete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteApikeyQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Key deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrDescr"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "apikeyAuth": []
          }
        ]
      }
    },
    "/auth-check": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Auth Check",
        "operationId": "authCheck",
        "responses": {
          "200": {
            "description": "Authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthCheck"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthCheck"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "apikeyAuth": []
          }
        ]
      }
    },
    "/autotune/presets": {
      "get": {
        "tags": [
          "autotune"
        ],
        "summary": "Get autotune preset list",
        "operationId": "autotunePresets",
        "responses": {
          "200": {
            "description": "Autotune preset list read successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AutotunePresetDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrDescr"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "apikeyAuth": []
          }
        ]
      }
    },
    "/autotune/reset": {
      "post": {
        "tags": [
          "autotune"
        ],
        "summary": "Autotune reset list of profiles",
        "operationId": "autotuneReset",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutotuneReset"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Reset list of autotune profiles done successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrDescr"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "apikeyAuth": []
          }
        ]
      }
    },
    "/autotune/reset-all": {
      "post": {
        "tags": [
          "autotune"
        ],
        "summary": "Autotune reset all profiles",
        "operationId": "autotuneResetAll",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutotuneResetAll"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Reset all autotune profiles done successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrDescr"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "apikeyAuth": []
          }
        ]
      }
    },
    "/cancel-warranty": {
      "post": {
        "tags": [
          "warranty"
        ],
        "summary": "Warranty cancel",
        "operationId": "warrantyCancel",
        "responses": {
          "200": {
            "description": "Warranty canceled successfully, or was not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarrantyStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrDescr"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "apikeyAuth": []
          }
        ]
      }
    },
    "/chains": {
      "get": {
        "tags": [
          "other"
        ],
        "summary": "Get miner chains",
        "operationId": "getChains",
        "responses": {
          "200": {
            "description": "Chains read successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AntmChainChips"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/chains/factory-info": {
      "get": {
        "tags": [
          "other"
        ],
        "summary": "Get miner chains factory info",
        "operationId": "getChainsFactoryInfo",
        "responses": {
          "200": {
            "description": "Chains factory info read successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FactoryInfoReply"
                }
              }
            }
          }
        }
      }
    },
    "/chips": {
      "get": {
        "tags": [
          "other"
        ],
        "summary": "Get miner chips. Deprecated. Use /chains route instead",
        "operationId": "getChips",
        "responses": {
          "200": {
            "description": "Chips read successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AntmChainsChipsStats"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/find-miner": {
      "post": {
        "tags": [
          "other"
        ],
        "summary": "Find miner",
        "operationId": "findMiner",
        "responses": {
          "200": {
            "description": "Request handled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "null"
                    },
                    {
                      "$ref": "#/components/schemas/FindMinerStatus"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/firmware/remove": {
      "post": {
        "tags": [
          "firmware"
        ],
        "summary": "Remove firmware and boot from stock",
        "operationId": "firmwareRemove",
        "responses": {
          "200": {
            "description": "Firmware was successfully removed. System will reboot after",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RebootAfter"
                }
              }
            }
          },
          "400": {
            "description": "This model has no 'remove firmware'",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrDescr"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrDescr"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "apikeyAuth": []
          }
        ]
      }
    },
    "/firmware/update": {
      "post": {
        "tags": [
          "firmware"
        ],
        "summary": "Update firmware",
        "operationId": "firmwareUpdate",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/SchemaFirmwareUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Firmware update successfully. System will reboot after",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RebootAfter"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrDescr"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "apikeyAuth": []
          }
        ]
      }
    },
    "/info": {
      "get": {
        "tags": [
          "other"
        ],
        "summary": "Get miner info",
        "operationId": "getInfo",
        "responses": {
          "200": {
            "description": "Miner Info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoJson"
                }
              }
            }
          }
        }
      }
    },
    "/layout": {
      "get": {
        "tags": [
          "other"
        ],
        "summary": "Layout",
        "operationId": "layout",
        "responses": {
          "200": {
            "description": "Dashboard elements layout",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "null"
                    },
                    {
                      "$ref": "#/components/schemas/Layout"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/lock": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Lock miner",
        "operationId": "lock",
        "responses": {
          "200": {
            "description": "Session dropped"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/lock/others": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Lock other miner sessions",
        "operationId": "lock_others",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnlockScreenBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Other sessions dropped"
          },
          "400": {
            "description": "Wrong password"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrDescr"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/logs/{log_type}": {
      "get": {
        "tags": [
          "logs"
        ],
        "summary": "Read log file",
        "operationId": "logsGet",
        "parameters": [
          {
            "name": "log_type",
            "in": "path",
            "description": "Log type name. All logs `*` are not implemented for this route",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LogType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Log file was read successfully"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrDescr"
                }
              }
            }
          }
        }
      }
    },
    "/logs/{log_type}/clear": {
      "post": {
        "tags": [
          "logs"
        ],
        "summary": "Clear logs",
        "operationId": "logsClear",
        "parameters": [
          {
            "name": "log_type",
            "in": "path",
            "description": "Log type",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LogType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Logs was cleared successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrDescr"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "apikeyAuth": []
          }
        ]
      }
    },
    "/metrics": {
      "get": {
        "tags": [
          "metrics"
        ],
        "summary": "Get metrics",
        "operationId": "metrics",
        "parameters": [
          {
            "name": "time_slice",
            "in": "query",
            "description": "Amount of seconds until now. Max is 3 days (3 * 24 * 60 * 60) Default is 1 day (24 * 60 * 60)",
            "required": false,
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            }
          },
          {
            "name": "step",
            "in": "query",
            "description": "Resample step in seconds to count average, default is 15 min (15 * 60)",
            "required": false,
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Config saved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsReply"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrDescr"
                }
              }
            }
          }
        }
      }
    },
    "/mining/pause": {
      "post": {
        "tags": [
          "mining"
        ],
        "summary": "Mining pause",
        "operationId": "miningPause",
        "responses": {
          "200": {
            "description": "Mining paused"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrDescr"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "apikeyAuth": []
          }
        ]
      }
    },
    "/mining/restart": {
      "post": {
        "tags": [
          "mining"
        ],
        "summary": "Mining restart",
        "operationId": "miningRestart",
        "responses": {
          "200": {
            "description": "Mining restart"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrDescr"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "apikeyAuth": []
          }
        ]
      }
    },
    "/mining/resume": {
      "post": {
        "tags": [
          "mining"
        ],
        "summary": "Mining resume",
        "operationId": "miningResume",
        "responses": {
          "200": {
            "description": "Mining resumed"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrDescr"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "apikeyAuth": []
          }
        ]
      }
    },
    "/mining/start": {
      "post": {
        "tags": [
          "mining"
        ],
        "summary": "Mining start",
        "operationId": "miningStart",
        "responses": {
          "200": {
            "description": "Mining started"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrDescr"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "apikeyAuth": []
          }
        ]
      }
    },
    "/mining/stop": {
      "post": {
        "tags": [
          "mining"
        ],
        "summary": "Mining stop",
        "operationId": "miningStop",
        "responses": {
          "200": {
            "description": "Mining stopped"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrDescr"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "apikeyAuth": []
          }
        ]
      }
    },
    "/mining/switch-pool": {
      "post": {
        "tags": [
          "mining"
        ],
        "summary": "Mining switch pool",
        "operationId": "miningSwitchPool",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SwitchPoolQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Pool was switched successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrDescr"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "apikeyAuth": []
          }
        ]
      }
    },
    "/model": {
      "get": {
        "tags": [
          "other"
        ],
        "summary": "Get miner model info",
        "operationId": "getModel",
        "responses": {
          "200": {
            "description": "Miner model Info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MinerModelInfo"
                }
              }
            }
          }
        }
      }
    },
    "/notes": {
      "get": {
        "tags": [
          "notes"
        ],
        "summary": "Read all notes",
        "operationId": "readNotes",
        "responses": {
          "200": {
            "description": "Notes read successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "propertyNames": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrDescr"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "notes"
        ],
        "summary": "Add note",
        "operationId": "createNote",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NoteKeyValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Note add successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrDescr"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrDescr"
                }
              }
            }
          },
          "507": {
            "description": "Insufficient Storage",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrDescr"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "apikeyAuth": []
          }
        ]
      }
    },
    "/notes/{note}": {
      "get": {
        "tags": [
          "notes"
        ],
        "summary": "Get one note json",
        "operationId": "readNote",
        "parameters": [
          {
            "name": "note",
            "in": "path",
            "description": "Note key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notes read successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteValue"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrDescr"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrDescr"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "notes"
        ],
        "summary": "Update notes",
        "operationId": "updateNote",
        "parameters": [
          {
            "name": "note",
            "in": "path",
            "description": "Note key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NoteValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Notes add successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrDescr"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "apikeyAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "notes"
        ],
        "summary": "Delete note",
        "operationId": "deleteNote",
        "parameters": [
          {
            "name": "note",
            "in": "path",
            "description": "Note key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Note delete successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrDescr"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrDescr"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "apikeyAuth": []
          }
        ]
      }
    },
    "/perf-summary": {
      "get": {
        "tags": [
          "other"
        ],
        "summary": "Summary",
        "operationId": "perfSummary",
        "responses": {
          "200": {
            "description": "Chips read successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerfSummary"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrDescr"
                }
              }
            }
          }
        }
      }
    },
    "/settings": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Get all miner settings",
        "operationId": "settingsGet",
        "responses": {
          "200": {
            "description": "Config read successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ViewConfig"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrDescr"
                }
              }
            }
          }
        },
        "security": [
          {
            "apikeyAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "settings"
        ],
        "summary": "Save miner settings",
        "operationId": "settingsSave",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Config saved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveConfigResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrDescr"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "apikeyAuth": []
          }
        ]
      }
    },
    "/settings/backup": {
      "post": {
        "tags": [
          "settings"
        ],
        "summary": "Settings backup",
        "operationId": "settingsBackup",
        "responses": {
          "200": {
            "description": "Backup binary",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "apikeyAuth": []
          }
        ]
      }
    },
    "/settings/factory-reset": {
      "post": {
        "tags": [
          "settings"
        ],
        "summary": "Settings factory reset",
        "operationId": "settingsFactoryReset",
        "responses": {
          "200": {
            "description": "Settings factory reset done successfully. System will reboot after",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RebootAfter"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrDescr"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "apikeyAuth": []
          }
        ]
      }
    },
    "/settings/restore": {
      "post": {
        "tags": [
          "settings"
        ],
        "summary": "Settings restore",
        "operationId": "settingsRestore",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/SchemaSettingsRestore"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Firmware restored successfully. System will reboot after",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RebootAfter"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Miner have warranty. Cancel warranty first"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrDescr"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "apikeyAuth": []
          }
        ]
      }
    },
    "/status": {
      "get": {
        "tags": [
          "other"
        ],
        "summary": "Get status",
        "operationId": "status",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusPane"
                }
              }
            }
          }
        }
      }
    },
    "/summary": {
      "get": {
        "tags": [
          "other"
        ],
        "summary": "Summary",
        "operationId": "summary",
        "responses": {
          "200": {
            "description": "Summary read successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Summary"
                }
              }
            }
          }
        },
        "security": [
          {},
          {
            "bearerAuth": []
          },
          {
            "apikeyAuth": []
          }
        ]
      }
    },
    "/system/reboot": {
      "post": {
        "tags": [
          "system"
        ],
        "summary": "System reboot",
        "operationId": "systemReboot",
        "responses": {
          "200": {
            "description": "System reboot after",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RebootAfter"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "apikeyAuth": []
          }
        ]
      }
    },
    "/ui": {
      "get": {
        "tags": [
          "other"
        ],
        "summary": "UI",
        "operationId": "ui",
        "responses": {
          "200": {
            "description": "Ui read successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UiSettings"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrDescr"
                }
              }
            }
          }
        }
      }
    },
    "/unlock": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Auth Check",
        "operationId": "unlock",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnlockScreenBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnlockSuccess"
                }
              }
            }
          },
          "403": {
            "description": "Wrong password",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthCheck"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthCheck"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrDescr"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AddApiKeyRes": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "$ref": "#/components/schemas/AddApiKeyStatus"
          }
        }
      },
      "AddApiKeyStatus": {
        "type": "string",
        "enum": [
          "inserted",
          "updated",
          "nochanges"
        ]
      },
      "AddApikeyQuery": {
        "$ref": "#/components/schemas/ApiKeysJsonItem"
      },
      "AdvancedSettingsRaw": {
        "type": "object",
        "properties": {
          "asic_boost": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "auto_chip_throttling": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Automatically adjusts chip frequencies based on temperatures"
          },
          "bitmain_disable_volt_comp": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Disable voltage compensation feature"
          },
          "disable_chain_break_protection": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "disable_restart_unbalanced": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "disable_volt_checks": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "downscale_preset_on_failure": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Automatic preset reduction in case of miner overheating or chain break error"
          },
          "higher_volt_offset": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "description": "Higher voltage offset during initialization stage",
            "maximum": 100,
            "minimum": 0
          },
          "ignore_broken_sensors": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "ignore_chip_sensors": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "max_restart_attempts": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "minimum": 0
          },
          "max_startup_delay_time": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "description": "Maximum delay time before mining startup",
            "maximum": 300,
            "minimum": 0
          },
          "min_operational_chains": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "minimum": 0
          },
          "quick_start": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "quiet_mode": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "remain_stopped_on_reboot": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "restart_hashrate": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "description": "Percent, `0` to disable",
            "maximum": 100,
            "minimum": 0
          },
          "restart_temp": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "minimum": 0
          },
          "tuner_bad_chip_hr_threshold": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "description": "Autotuning: hashrate threshold below which the chips are marked as bad ones",
            "maximum": 80,
            "minimum": 20
          }
        }
      },
      "AntmChain": {
        "type": "object",
        "required": [
          "id",
          "frequency",
          "voltage",
          "power_consumption",
          "hashrate_ideal",
          "hashrate_rt",
          "hashrate_percentage",
          "hr_error",
          "hw_errors",
          "pcb_temp",
          "chip_temp",
          "chip_statuses",
          "status"
        ],
        "properties": {
          "chip_statuses": {
            "$ref": "#/components/schemas/ChainChipStatuses"
          },
          "chip_temp": {
            "$ref": "#/components/schemas/TempRange"
          },
          "frequency": {
            "type": "number",
            "format": "float"
          },
          "hashrate_ideal": {
            "type": "number",
            "format": "float"
          },
          "hashrate_percentage": {
            "type": "number",
            "format": "float"
          },
          "hashrate_rt": {
            "type": "number",
            "format": "float"
          },
          "hr_error": {
            "type": "number",
            "format": "float"
          },
          "hw_errors": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "minimum": 0
          },
          "inlet_water_temp": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "minimum": 0
          },
          "outlet_water_temp": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "minimum": 0
          },
          "pcb_temp": {
            "$ref": "#/components/schemas/TempRange"
          },
          "power_consumption": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ChainStatus"
          },
          "voltage": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AntmChainChips": {
        "type": "object",
        "required": [
          "id",
          "status",
          "hr_realtime",
          "hr_nominal",
          "freq",
          "sensors",
          "chips"
        ],
        "properties": {
          "chips": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AntmChip"
            }
          },
          "freq": {
            "type": "number",
            "format": "float"
          },
          "hr_nominal": {
            "type": "number",
            "format": "float"
          },
          "hr_realtime": {
            "type": "number",
            "format": "float"
          },
          "id": {
            "type": "integer",
            "minimum": 0
          },
          "sensors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AntmChipSensor"
            }
          },
          "status": {
            "$ref": "#/components/schemas/CgChainStatus"
          }
        }
      },
      "AntmChainChipsStats": {
        "type": "object",
        "required": [
          "id",
          "chips"
        ],
        "properties": {
          "chips": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AntmiChipStats"
            }
          },
          "id": {
            "type": "integer",
            "minimum": 0
          }
        }
      },
      "AntmChainsChipsStats": {
        "type": "object",
        "required": [
          "chips_per_chain",
          "chains"
        ],
        "properties": {
          "chains": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AntmChainChipsStats"
            }
          },
          "chips_per_chain": {
            "type": "integer",
            "minimum": 0
          }
        }
      },
      "AntmChip": {
        "type": "object",
        "required": [
          "id",
          "hr",
          "freq",
          "volt",
          "temp",
          "errs",
          "grade",
          "throttled"
        ],
        "properties": {
          "errs": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "freq": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "grade": {
            "$ref": "#/components/schemas/ChipGrade"
          },
          "hr": {
            "type": "number",
            "format": "float"
          },
          "id": {
            "type": "integer",
            "minimum": 0
          },
          "temp": {
            "type": "number",
            "format": "float"
          },
          "throttled": {
            "type": "boolean"
          },
          "volt": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AntmChipSensor": {
        "type": "object",
        "required": [
          "state",
          "board",
          "chip",
          "loc"
        ],
        "properties": {
          "board": {
            "type": "integer",
            "format": "int32"
          },
          "chip": {
            "type": "integer",
            "format": "int32"
          },
          "loc": {
            "type": "integer",
            "format": "int32",
            "description": "Location that refers to `chip.id`",
            "minimum": 0
          },
          "state": {
            "$ref": "#/components/schemas/TempSensorStatus"
          }
        }
      },
      "AntmMinerStats": {
        "type": "object",
        "required": [
          "miner_status",
          "miner_type",
          "hr_stock",
          "average_hashrate",
          "instant_hashrate",
          "hr_realtime",
          "hr_nominal",
          "hr_average",
          "pcb_temp",
          "chip_temp",
          "power_consumption",
          "power_usage",
          "power_efficiency",
          "hw_errors_percent",
          "hr_error",
          "hw_errors",
          "devfee_percent",
          "devfee",
          "pools",
          "cooling",
          "chains",
          "found_blocks",
          "best_share"
        ],
        "properties": {
          "average_hashrate": {
            "type": "number",
            "format": "float",
            "description": "Deprecated. Same as hr_average but measure is MG/s.",
            "deprecated": true
          },
          "best_share": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "chains": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AntmChain"
            }
          },
          "chip_temp": {
            "$ref": "#/components/schemas/TempRange"
          },
          "cooling": {
            "$ref": "#/components/schemas/Cooling"
          },
          "devfee": {
            "type": "number",
            "format": "float"
          },
          "devfee_percent": {
            "type": "number",
            "format": "float"
          },
          "found_blocks": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "hr_average": {
            "type": "number",
            "format": "float"
          },
          "hr_error": {
            "type": "number",
            "format": "float",
            "description": "Errors rate"
          },
          "hr_nominal": {
            "type": "number",
            "format": "float"
          },
          "hr_realtime": {
            "type": "number",
            "format": "float"
          },
          "hr_stock": {
            "type": "number",
            "format": "float"
          },
          "hw_errors": {
            "type": "integer",
            "format": "int32"
          },
          "hw_errors_percent": {
            "type": "number",
            "format": "float"
          },
          "instant_hashrate": {
            "type": "number",
            "format": "float",
            "description": "Deprecated. Same as hr_realtime but measure is MG/s.",
            "deprecated": true
          },
          "miner_status": {
            "$ref": "#/components/schemas/MinerStatus"
          },
          "miner_type": {
            "type": "string"
          },
          "pcb_temp": {
            "$ref": "#/components/schemas/TempRange"
          },
          "pools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PoolStats"
            }
          },
          "power_consumption": {
            "type": "integer",
            "format": "int32"
          },
          "power_efficiency": {
            "type": "number",
            "format": "float"
          },
          "power_usage": {
            "type": "integer",
            "format": "int32",
            "description": "Deprecated. Same as power_efficiency",
            "deprecated": true
          },
          "psu": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/AntmPsuInfo"
              }
            ]
          }
        }
      },
      "AntmPsuInfo": {
        "type": "object",
        "properties": {
          "psu_power_metering": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "temps": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/AntmPsuTemps"
              }
            ]
          }
        }
      },
      "AntmPsuTemps": {
        "type": "object",
        "properties": {
          "llc1_temp": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "llc2_temp": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "pfc_temp": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          }
        }
      },
      "AntmiChipStats": {
        "type": "object",
        "required": [
          "id",
          "status",
          "hashrate",
          "freq",
          "temp",
          "errors"
        ],
        "properties": {
          "errors": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "freq": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "hashrate": {
            "type": "number",
            "format": "float"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "sensor": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/TempSensor"
              }
            ]
          },
          "status": {
            "$ref": "#/components/schemas/ChipGrade"
          },
          "temp": {
            "type": "number",
            "format": "float"
          }
        }
      },
      "ApiKeysJson": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ApiKeysJsonItem"
        }
      },
      "ApiKeysJsonItem": {
        "type": "object",
        "required": [
          "key",
          "description"
        ],
        "properties": {
          "description": {
            "type": "string"
          },
          "key": {
            "type": "string",
            "maxLength": 32,
            "minLength": 32
          }
        }
      },
      "Apikey": {
        "type": "string"
      },
      "AuthCheck": {
        "type": "object",
        "properties": {
          "unlock_timeout": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "minimum": 0
          }
        }
      },
      "AutotuneChain": {
        "type": "object",
        "required": [
          "freq",
          "chips"
        ],
        "properties": {
          "chips": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          "freq": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "serial": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "AutotunePresetDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutotunePresetsItem"
          },
          {
            "type": "object",
            "properties": {
              "tune_settings": {
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/components/schemas/AutotuneResultsItem"
                  }
                ]
              }
            }
          }
        ]
      },
      "AutotunePresetStatus": {
        "type": "string",
        "description": "Preset status. `tuned` means that preset tuned successfully",
        "enum": [
          "untuned",
          "tuned"
        ]
      },
      "AutotunePresets": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/AutotunePresetsItem"
        }
      },
      "AutotunePresetsItem": {
        "type": "object",
        "required": [
          "name",
          "pretty",
          "status",
          "modded_psu_required"
        ],
        "properties": {
          "modded_psu_required": {
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "description": "Preset id name"
          },
          "pretty": {
            "type": "string",
            "description": "Preset human-readable name"
          },
          "status": {
            "$ref": "#/components/schemas/AutotunePresetStatus"
          }
        }
      },
      "AutotuneReset": {
        "type": "object",
        "required": [
          "presets",
          "restart"
        ],
        "properties": {
          "presets": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of presets to reset"
          },
          "restart": {
            "type": "boolean",
            "description": "Restart after presets remove"
          }
        }
      },
      "AutotuneResetAll": {
        "type": "object",
        "required": [
          "restart"
        ],
        "properties": {
          "restart": {
            "type": "boolean"
          }
        }
      },
      "AutotuneResultsItem": {
        "type": "object",
        "required": [
          "hashrate",
          "volt",
          "freq",
          "chains",
          "modified"
        ],
        "properties": {
          "chains": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AutotuneChain"
            }
          },
          "freq": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "hashrate": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "modified": {
            "type": "boolean"
          },
          "volt": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        }
      },
      "CgChainStatus": {
        "type": "object",
        "required": [
          "state"
        ],
        "properties": {
          "failure_message": {
            "type": [
              "string",
              "null"
            ]
          },
          "state": {
            "$ref": "#/components/schemas/ChainState"
          }
        }
      },
      "ChainChipStatuses": {
        "type": "object",
        "required": [
          "red",
          "orange",
          "grey"
        ],
        "properties": {
          "grey": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "orange": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "red": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        }
      },
      "ChainRaw": {
        "type": "object",
        "properties": {
          "chips": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            "description": "An array of per chip `freq` settings values.\n`0` (zero) value means that value used from `chain` settings"
          },
          "disabled": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Chain `disabled` settings value"
          },
          "freq": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "description": "Chain `freq` settings values.\n`0` (zero) value means that value used from `globals` settings",
            "minimum": 0
          }
        }
      },
      "ChainState": {
        "type": "string",
        "enum": [
          "initializing",
          "mining",
          "stopped",
          "failure",
          "disconnected",
          "disabled",
          "unknown"
        ]
      },
      "ChainStatus": {
        "type": "object",
        "required": [
          "state"
        ],
        "properties": {
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "state": {
            "$ref": "#/components/schemas/ChainState"
          }
        }
      },
      "ChipGrade": {
        "type": "string",
        "enum": [
          "grey",
          "orange",
          "red"
        ]
      },
      "Consts": {
        "type": "object",
        "required": [
          "cooling",
          "overclock",
          "timezones"
        ],
        "properties": {
          "cooling": {
            "$ref": "#/components/schemas/CoolingConsts"
          },
          "overclock": {
            "$ref": "#/components/schemas/Overclock"
          },
          "timezones": {
            "type": "array",
            "items": {
              "type": "array",
              "items": false,
              "prefixItems": [
                {
                  "type": "string",
                  "description": "Current timezone name (code)",
                  "enum": [
                    "GMT+1",
                    "GMT+2",
                    "GMT+3",
                    "GMT+4",
                    "GMT+5",
                    "GMT+6",
                    "GMT+7",
                    "GMT+8",
                    "GMT+9",
                    "GMT+10",
                    "GMT+11",
                    "GMT+12",
                    "GMT",
                    "GMT-1",
                    "GMT-2",
                    "GMT-3",
                    "GMT-4",
                    "GMT-5",
                    "GMT-6",
                    "GMT-7",
                    "GMT-8",
                    "GMT-9",
                    "GMT-10",
                    "GMT-11"
                  ]
                },
                {
                  "type": "string"
                }
              ]
            },
            "description": "Available timezones list.\nA purpose for this field is to display timezones list in UI.\nMakes sense for GET queries only and shall ignore for UPDATE queries."
          }
        }
      },
      "Cooling": {
        "type": "object",
        "required": [
          "fan_num",
          "fans",
          "settings",
          "fan_duty"
        ],
        "properties": {
          "fan_duty": {
            "type": "integer",
            "format": "int32"
          },
          "fan_num": {
            "type": "integer",
            "minimum": 0
          },
          "fans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Fan"
            }
          },
          "settings": {
            "$ref": "#/components/schemas/FanSettings"
          }
        }
      },
      "CoolingConsts": {
        "type": "object",
        "required": [
          "min_fan_pwm",
          "min_target_temp",
          "max_target_temp"
        ],
        "properties": {
          "fan_min_count": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MinerFanMinCount"
              }
            ]
          },
          "max_target_temp": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "min_fan_pwm": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "min_target_temp": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        }
      },
      "CoolingSettingsRaw": {
        "type": "object",
        "properties": {
          "fan_max_duty": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "maximum": 100,
            "minimum": 0
          },
          "fan_min_count": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "minimum": 0
          },
          "fan_min_duty": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "maximum": 100,
            "minimum": 0
          },
          "mode": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ModeRaw"
              }
            ]
          }
        }
      },
      "CurrentPreset": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AutotunePresetsItem"
          },
          {
            "type": "object",
            "properties": {
              "globals": {
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/components/schemas/GlobalsRaw",
                    "description": "Globals passed here when preset is disabled"
                  }
                ]
              }
            }
          }
        ]
      },
      "DeleteApikeyQuery": {
        "type": "object",
        "required": [
          "key"
        ],
        "properties": {
          "key": {
            "type": "string",
            "maxLength": 32,
            "minLength": 32
          }
        }
      },
      "DiagReportQueryInput": {
        "type": "object",
        "required": [
          "issue"
        ],
        "properties": {
          "issue": {
            "type": "string",
            "description": "Issue text. Max 16KB"
          }
        }
      },
      "ErrDescr": {
        "type": "object",
        "required": [
          "err"
        ],
        "properties": {
          "err": {
            "type": "string"
          }
        }
      },
      "FactoryInfoChain": {
        "type": "object",
        "required": [
          "id",
          "board_model",
          "serial",
          "chip_bin",
          "freq",
          "volt",
          "hashrate"
        ],
        "properties": {
          "board_model": {
            "type": "string"
          },
          "chip_bin": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "freq": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "hashrate": {
            "type": "number",
            "format": "double"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "serial": {
            "type": "string"
          },
          "volt": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        }
      },
      "FactoryInfoReply": {
        "type": "object",
        "properties": {
          "chains": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/FactoryInfoChain"
            }
          },
          "has_pics": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "hr_stock": {
            "type": [
              "number",
              "null"
            ],
            "format": "double"
          },
          "psu_model": {
            "type": [
              "string",
              "null"
            ]
          },
          "psu_serial": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "Fan": {
        "type": "object",
        "required": [
          "id",
          "rpm",
          "status",
          "max_rpm"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 0
          },
          "max_rpm": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "rpm": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/FanStatus"
          }
        }
      },
      "FanMode": {
        "type": "string",
        "enum": [
          "manual",
          "immersion",
          "auto"
        ]
      },
      "FanSettings": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "mode"
            ],
            "properties": {
              "mode": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "$ref": "#/components/schemas/FanMode"
                  }
                }
              }
            }
          }
        ]
      },
      "FanStatus": {
        "type": "string",
        "enum": [
          "ok",
          "lost"
        ]
      },
      "FindMinerStatus": {
        "type": "object",
        "required": [
          "on"
        ],
        "properties": {
          "on": {
            "type": "boolean",
            "description": "Find miner on/off"
          }
        }
      },
      "FwInfo": {
        "type": "object",
        "required": [
          "miner",
          "model",
          "fw_name",
          "fw_version",
          "platform",
          "install_type",
          "build_time"
        ],
        "properties": {
          "build_name": {
            "type": "string"
          },
          "build_time": {
            "type": "string",
            "description": "Build time"
          },
          "build_uuid": {
            "type": "string"
          },
          "fw_name": {
            "type": "string",
            "description": "Firmware name"
          },
          "fw_version": {
            "type": "string",
            "description": "Firmware version"
          },
          "install_type": {
            "$ref": "#/components/schemas/InstallType"
          },
          "miner": {
            "type": "string",
            "description": "Pretty miner name"
          },
          "model": {
            "type": "string",
            "description": "Miner model code"
          },
          "platform": {
            "$ref": "#/components/schemas/Platform"
          }
        }
      },
      "GlobalsRaw": {
        "type": "object",
        "properties": {
          "freq": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "minimum": 0
          },
          "volt": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "minimum": 0
          }
        }
      },
      "HrMeasure": {
        "type": "string",
        "enum": [
          "GH/s",
          "MH/s"
        ]
      },
      "InfoJson": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FwInfo"
          },
          {
            "type": "object",
            "required": [
              "algorithm",
              "hr_measure",
              "system",
              "serial"
            ],
            "properties": {
              "algorithm": {
                "$ref": "#/components/schemas/MiningAlgorithm"
              },
              "hr_measure": {
                "$ref": "#/components/schemas/HrMeasure"
              },
              "serial": {
                "type": "string"
              },
              "system": {
                "$ref": "#/components/schemas/SystemInfo"
              }
            }
          }
        ]
      },
      "InputConfig": {
        "type": "object",
        "properties": {
          "layout": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Layout"
              }
            ]
          },
          "miner": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MinerConfigRaw"
              }
            ]
          },
          "network": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/InputNetworkConfFile"
              }
            ]
          },
          "password": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PasswordChange"
              }
            ]
          },
          "regional": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/RegionalSettings"
              }
            ]
          },
          "ui": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/UiSettings"
              }
            ]
          }
        }
      },
      "InputNetworkConfFile": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NetworkConfFile"
          },
          {
            "type": "object",
            "properties": {
              "enable_network_check": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "InstallType": {
        "type": "string",
        "description": "Install type code sd|nand",
        "enum": [
          "sd",
          "nand"
        ]
      },
      "Layout": {
        "type": "object",
        "properties": {
          "lg": {
            "type": [
              "object",
              "null"
            ],
            "additionalProperties": {
              "type": "string"
            },
            "propertyNames": {
              "type": "string"
            }
          },
          "md": {
            "type": [
              "object",
              "null"
            ],
            "additionalProperties": {
              "type": "string"
            },
            "propertyNames": {
              "type": "string"
            }
          },
          "sm": {
            "type": [
              "object",
              "null"
            ],
            "additionalProperties": {
              "type": "string"
            },
            "propertyNames": {
              "type": "string"
            }
          },
          "xs": {
            "type": [
              "object",
              "null"
            ],
            "additionalProperties": {
              "type": "string"
            },
            "propertyNames": {
              "type": "string"
            }
          },
          "xxs": {
            "type": [
              "object",
              "null"
            ],
            "additionalProperties": {
              "type": "string"
            },
            "propertyNames": {
              "type": "string"
            }
          }
        }
      },
      "Locale": {
        "type": "string",
        "enum": [
          "ru",
          "en",
          "fa",
          "ua",
          "zh"
        ]
      },
      "LogType": {
        "type": "string",
        "description": "Log type name, `*` for all log types",
        "enum": [
          "status",
          "miner",
          "autotune",
          "system",
          "messages",
          "api",
          "*"
        ]
      },
      "MetricAnnotation": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "chain_id": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "minimum": 0
          },
          "type": {
            "$ref": "#/components/schemas/MinerEvent"
          }
        }
      },
      "MetricsData": {
        "type": "object",
        "required": [
          "hashrate",
          "pcb_max_temp",
          "chip_max_temp",
          "fan_duty",
          "power_consumption"
        ],
        "properties": {
          "chip_max_temp": {
            "type": "integer",
            "format": "int32"
          },
          "fan_duty": {
            "type": "integer",
            "format": "int32"
          },
          "hashrate": {
            "type": "number",
            "format": "double"
          },
          "pcb_max_temp": {
            "type": "integer",
            "format": "int32"
          },
          "power_consumption": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "MetricsReply": {
        "type": "object",
        "required": [
          "timezone",
          "metrics",
          "annotations"
        ],
        "properties": {
          "annotations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeRecord_MetricAnnotation"
            }
          },
          "metrics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeRecord_MetricsData"
            }
          },
          "timezone": {
            "$ref": "#/components/schemas/Timezone"
          }
        }
      },
      "MinerConfigRaw": {
        "type": "object",
        "properties": {
          "cooling": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CoolingSettingsRaw"
              }
            ]
          },
          "misc": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/AdvancedSettingsRaw"
              }
            ]
          },
          "overclock": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/OverclockSettingsRaw"
              }
            ]
          },
          "pools": {
            "type": [
              "array",
              "null"
            ],
            "items": false,
            "prefixItems": [
              {
                "type": "object",
                "required": [
                  "url",
                  "user",
                  "pass"
                ],
                "properties": {
                  "pass": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "user": {
                    "type": "string"
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "url",
                  "user",
                  "pass"
                ],
                "properties": {
                  "pass": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "user": {
                    "type": "string"
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "url",
                  "user",
                  "pass"
                ],
                "properties": {
                  "pass": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "user": {
                    "type": "string"
                  }
                }
              }
            ]
          }
        }
      },
      "MinerEvent": {
        "type": "string",
        "enum": [
          "start",
          "stop",
          "restart",
          "reboot",
          "overheat",
          "disable_chain",
          "enable_chain"
        ]
      },
      "MinerFanMinCount": {
        "type": "object",
        "required": [
          "min",
          "max",
          "default"
        ],
        "properties": {
          "default": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "max": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "min": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        }
      },
      "MinerModelInfo": {
        "type": "object",
        "required": [
          "full_name",
          "model",
          "algorithm",
          "series",
          "platform",
          "install_type",
          "hr_measure",
          "serial",
          "chain",
          "cooling",
          "overclock"
        ],
        "properties": {
          "algorithm": {
            "$ref": "#/components/schemas/MiningAlgorithm"
          },
          "chain": {
            "$ref": "#/components/schemas/ModelInfoChain"
          },
          "cooling": {
            "$ref": "#/components/schemas/CoolingConsts"
          },
          "full_name": {
            "type": "string",
            "description": "Pretty miner name"
          },
          "hr_measure": {
            "$ref": "#/components/schemas/HrMeasure"
          },
          "install_type": {
            "$ref": "#/components/schemas/InstallType"
          },
          "model": {
            "type": "string",
            "description": "Miner model code"
          },
          "overclock": {
            "$ref": "#/components/schemas/Overclock"
          },
          "platform": {
            "$ref": "#/components/schemas/Platform"
          },
          "serial": {
            "type": "string"
          },
          "series": {
            "$ref": "#/components/schemas/Series"
          }
        }
      },
      "MinerState": {
        "type": "string",
        "enum": [
          "mining",
          "initializing",
          "starting",
          "auto-tuning",
          "restarting",
          "shutting-down",
          "stopped",
          "failure"
        ]
      },
      "MinerStatus": {
        "type": "object",
        "required": [
          "miner_state",
          "miner_state_time"
        ],
        "properties": {
          "description": {
            "type": [
              "string",
              "null"
            ],
            "description": "Optional. Description if status is failure"
          },
          "failure_code": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "miner_state": {
            "$ref": "#/components/schemas/MinerState"
          },
          "miner_state_time": {
            "type": "integer",
            "format": "int64",
            "description": "Time spent in the current state.\nFor now implemented for `mining` state only."
          }
        }
      },
      "MiningAlgorithm": {
        "type": "string",
        "enum": [
          "sha256d",
          "scrypt"
        ]
      },
      "ModeRaw": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "param",
              "name"
            ],
            "properties": {
              "name": {
                "type": "string",
                "enum": [
                  "auto"
                ]
              },
              "param": {
                "type": "integer",
                "format": "int32",
                "minimum": 0
              }
            }
          },
          {
            "type": "object",
            "required": [
              "param",
              "name"
            ],
            "properties": {
              "name": {
                "type": "string",
                "enum": [
                  "manual"
                ]
              },
              "param": {
                "type": "integer",
                "format": "int32",
                "minimum": 0
              }
            }
          },
          {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string",
                "enum": [
                  "immers"
                ]
              }
            }
          }
        ]
      },
      "ModelInfoChain": {
        "type": "object",
        "required": [
          "chips_per_chain",
          "chips_per_domain",
          "num_chains",
          "topology"
        ],
        "properties": {
          "chips_per_chain": {
            "type": "integer",
            "minimum": 0
          },
          "chips_per_domain": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "num_chains": {
            "type": "integer",
            "minimum": 0
          },
          "topology": {
            "$ref": "#/components/schemas/Topology"
          }
        }
      },
      "NetworkConfFile": {
        "type": "object",
        "required": [
          "hostname",
          "dhcp",
          "ipaddress",
          "netmask",
          "gateway",
          "dnsservers"
        ],
        "properties": {
          "dhcp": {
            "type": "boolean"
          },
          "dnsservers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "gateway": {
            "type": "string"
          },
          "hostname": {
            "type": "string"
          },
          "ipaddress": {
            "type": "string"
          },
          "netmask": {
            "type": "string"
          }
        }
      },
      "NetworkStatus": {
        "type": "object",
        "required": [
          "mac",
          "ip",
          "netmask",
          "gateway",
          "dns",
          "hostname"
        ],
        "properties": {
          "dhcp": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "dns": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "gateway": {
            "type": "string"
          },
          "hostname": {
            "type": "string"
          },
          "ip": {
            "type": "string"
          },
          "mac": {
            "type": "string"
          },
          "netmask": {
            "type": "string"
          }
        }
      },
      "NoteKeyValue": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NoteValue"
          },
          {
            "type": "object",
            "required": [
              "key"
            ],
            "properties": {
              "key": {
                "type": "string"
              }
            }
          }
        ]
      },
      "NoteValue": {
        "type": "object",
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "type": "string"
          }
        }
      },
      "Overclock": {
        "type": "object",
        "required": [
          "max_voltage",
          "min_voltage",
          "default_voltage",
          "max_freq",
          "min_freq",
          "default_freq",
          "warn_freq",
          "max_voltage_stock_psu"
        ],
        "properties": {
          "default_freq": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "default_voltage": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "max_freq": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "max_voltage": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "max_voltage_stock_psu": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "min_freq": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "min_voltage": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "warn_freq": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        }
      },
      "OverclockSettingsRaw": {
        "type": "object",
        "properties": {
          "chains": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/ChainRaw"
            }
          },
          "globals": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/GlobalsRaw"
              }
            ]
          },
          "modded_psu": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "preset": {
            "type": [
              "string",
              "null"
            ],
            "description": "Profile name"
          },
          "preset_switcher": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PresetSwitcherRaw"
              }
            ]
          }
        }
      },
      "PasswordChange": {
        "type": "object",
        "required": [
          "current",
          "pw"
        ],
        "properties": {
          "current": {
            "type": "string"
          },
          "pw": {
            "type": "string"
          }
        }
      },
      "PerfSummary": {
        "type": "object",
        "required": [
          "preset_switcher"
        ],
        "properties": {
          "current_preset": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CurrentPreset"
              }
            ]
          },
          "preset_switcher": {
            "$ref": "#/components/schemas/PresetSwitcherRaw"
          }
        }
      },
      "Platform": {
        "type": "string",
        "description": "Platform type code aml|bb|cv|stm|xil (Amlogic/BeagleBone/Cvitek/STM/Xilix)",
        "enum": [
          "aml",
          "bb",
          "cv",
          "stm",
          "xil"
        ]
      },
      "Pool": {
        "type": "object",
        "required": [
          "url",
          "user",
          "pass"
        ],
        "properties": {
          "pass": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "user": {
            "type": "string"
          }
        }
      },
      "PoolStats": {
        "type": "object",
        "required": [
          "id",
          "url",
          "pool_type",
          "user",
          "status",
          "asic_boost",
          "diff",
          "accepted",
          "rejected",
          "stale",
          "ls_diff",
          "ls_time",
          "diffa",
          "ping"
        ],
        "properties": {
          "accepted": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "asic_boost": {
            "type": "boolean"
          },
          "diff": {
            "type": "string"
          },
          "diffa": {
            "type": "number",
            "format": "double"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "ls_diff": {
            "type": "number",
            "format": "float"
          },
          "ls_time": {
            "type": "string"
          },
          "ping": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "pool_type": {
            "$ref": "#/components/schemas/PoolType"
          },
          "rejected": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "stale": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "status": {
            "$ref": "#/components/schemas/PoolStatus"
          },
          "url": {
            "type": "string"
          },
          "user": {
            "type": "string"
          }
        }
      },
      "PoolStatus": {
        "type": "string",
        "enum": [
          "offline",
          "working",
          "disabled",
          "active",
          "rejecting",
          "unknown"
        ]
      },
      "PoolType": {
        "type": "string",
        "enum": [
          "UserPool",
          "DevFee",
          "Refund"
        ]
      },
      "PresetSwitcherRaw": {
        "type": "object",
        "description": "PresetSwitcher settings",
        "properties": {
          "autochange_top_preset": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "check_time": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "maximum": 600,
            "minimum": 60
          },
          "decrease_temp": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "maximum": 90,
            "minimum": 25
          },
          "enabled": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "ignore_fan_speed": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "min_preset": {
            "type": [
              "string",
              "null"
            ]
          },
          "power_delta": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "maximum": 50,
            "minimum": 0
          },
          "rise_temp": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "maximum": 85
          },
          "top_preset": {
            "type": [
              "string",
              "null"
            ],
            "description": "Profile name. Max profile that preset_switcher can switch"
          }
        }
      },
      "RebootAfter": {
        "type": "object",
        "required": [
          "after"
        ],
        "properties": {
          "after": {
            "type": "integer",
            "format": "int64",
            "description": "Number of seconds after the system will reboot\nBy default, is 3 seconds",
            "minimum": 0
          }
        }
      },
      "RegionalSettings": {
        "type": "object",
        "required": [
          "timezone"
        ],
        "properties": {
          "timezone": {
            "$ref": "#/components/schemas/TimezoneSettings"
          }
        }
      },
      "SaveConfigResult": {
        "type": "object",
        "description": "Apply config result",
        "required": [
          "restart_required",
          "reboot_required"
        ],
        "properties": {
          "reboot_required": {
            "type": "boolean",
            "description": "Miner restart required to apply"
          },
          "restart_required": {
            "type": "boolean",
            "description": "Miner restart required to apply config"
          }
        }
      },
      "SchemaBoolEnum": {
        "type": "string",
        "enum": [
          "true",
          "false"
        ]
      },
      "SchemaFirmwareUpdate": {
        "type": "object",
        "required": [
          "file"
        ],
        "properties": {
          "file": {
            "type": "string",
            "format": "binary"
          },
          "keep_settings": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/SchemaBoolEnum",
                "description": "String \"true\" or \"false\""
              }
            ]
          }
        }
      },
      "SchemaSettingsRestore": {
        "type": "object",
        "required": [
          "file"
        ],
        "properties": {
          "file": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "Series": {
        "type": "string",
        "enum": [
          "l7",
          "l9",
          "x19",
          "x21"
        ]
      },
      "StatusPane": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MinerStatus"
          },
          {
            "$ref": "#/components/schemas/SaveConfigResult"
          },
          {
            "type": "object",
            "required": [
              "find_miner",
              "unlocked"
            ],
            "properties": {
              "find_miner": {
                "type": "boolean",
                "description": "Flag to switch find_miner function on target devices. Optional, default `false`"
              },
              "unlock_timeout": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "int64",
                "minimum": 0
              },
              "unlocked": {
                "type": "boolean",
                "description": "Show screen-lock status (checks that  any of auth methods satisfies)"
              },
              "warranty": {
                "$ref": "#/components/schemas/Warranty"
              }
            }
          }
        ]
      },
      "Summary": {
        "type": "object",
        "properties": {
          "miner": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/AntmMinerStats"
              }
            ]
          }
        }
      },
      "SwitchPoolQuery": {
        "type": "object",
        "required": [
          "pool_id"
        ],
        "properties": {
          "pool_id": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        }
      },
      "SystemInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SystemMem"
          },
          {
            "type": "object",
            "required": [
              "os",
              "miner_name",
              "file_system_version",
              "network_status",
              "uptime"
            ],
            "properties": {
              "file_system_version": {
                "type": "string"
              },
              "miner_name": {
                "type": "string"
              },
              "network_status": {
                "$ref": "#/components/schemas/NetworkStatus"
              },
              "os": {
                "type": "string"
              },
              "uptime": {
                "type": "string"
              }
            }
          }
        ]
      },
      "SystemMem": {
        "type": "object",
        "required": [
          "mem_total",
          "mem_free",
          "mem_free_percent",
          "mem_buf",
          "mem_buf_percent"
        ],
        "properties": {
          "mem_buf": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "mem_buf_percent": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "mem_free": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "mem_free_percent": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "mem_total": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        }
      },
      "TempRange": {
        "type": "object",
        "required": [
          "min",
          "max"
        ],
        "properties": {
          "max": {
            "type": "integer",
            "format": "int32"
          },
          "min": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TempSensor": {
        "type": "object",
        "required": [
          "status",
          "pcb_temp",
          "chip_temp"
        ],
        "properties": {
          "chip_temp": {
            "type": "integer",
            "format": "int32"
          },
          "pcb_temp": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/TempSensorStatus"
          }
        }
      },
      "TempSensorStatus": {
        "type": "string",
        "enum": [
          "init",
          "ready",
          "measure",
          "error",
          "unknown"
        ]
      },
      "TimeRecord_MetricAnnotation": {
        "type": "object",
        "required": [
          "time",
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "chain_id": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "int32",
                "minimum": 0
              },
              "type": {
                "$ref": "#/components/schemas/MinerEvent"
              }
            }
          },
          "time": {
            "type": "integer",
            "format": "int64",
            "description": "UNIX time"
          }
        }
      },
      "TimeRecord_MetricsData": {
        "type": "object",
        "required": [
          "time",
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "required": [
              "hashrate",
              "pcb_max_temp",
              "chip_max_temp",
              "fan_duty",
              "power_consumption"
            ],
            "properties": {
              "chip_max_temp": {
                "type": "integer",
                "format": "int32"
              },
              "fan_duty": {
                "type": "integer",
                "format": "int32"
              },
              "hashrate": {
                "type": "number",
                "format": "double"
              },
              "pcb_max_temp": {
                "type": "integer",
                "format": "int32"
              },
              "power_consumption": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "time": {
            "type": "integer",
            "format": "int64",
            "description": "UNIX time"
          }
        }
      },
      "Timezone": {
        "type": "string",
        "description": "Current timezone name (code)",
        "enum": [
          "GMT+1",
          "GMT+2",
          "GMT+3",
          "GMT+4",
          "GMT+5",
          "GMT+6",
          "GMT+7",
          "GMT+8",
          "GMT+9",
          "GMT+10",
          "GMT+11",
          "GMT+12",
          "GMT",
          "GMT-1",
          "GMT-2",
          "GMT-3",
          "GMT-4",
          "GMT-5",
          "GMT-6",
          "GMT-7",
          "GMT-8",
          "GMT-9",
          "GMT-10",
          "GMT-11"
        ]
      },
      "TimezoneSettings": {
        "type": "object",
        "required": [
          "current"
        ],
        "properties": {
          "current": {
            "$ref": "#/components/schemas/Timezone"
          }
        }
      },
      "Topology": {
        "type": "object",
        "required": [
          "chips",
          "num_cols",
          "num_rows"
        ],
        "properties": {
          "chips": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "num_cols": {
            "type": "integer",
            "format": "int32"
          },
          "num_rows": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "UiSettings": {
        "type": "object",
        "properties": {
          "consts": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Consts"
              }
            ]
          },
          "dark_side_pane": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "disable_animation": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "locale": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Locale"
              }
            ]
          },
          "theme": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/UiTheme"
              }
            ]
          },
          "timezone": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Timezone"
              }
            ]
          }
        }
      },
      "UiTheme": {
        "type": "string",
        "enum": [
          "light",
          "dark",
          "auto"
        ]
      },
      "UnlockScreenBody": {
        "type": "object",
        "required": [
          "pw"
        ],
        "properties": {
          "pw": {
            "type": "string",
            "description": "Target device(s) password"
          }
        }
      },
      "UnlockSuccess": {
        "type": "object",
        "required": [
          "token"
        ],
        "properties": {
          "token": {
            "type": "string"
          }
        }
      },
      "ViewConfig": {
        "type": "object",
        "required": [
          "miner",
          "ui",
          "regional",
          "network"
        ],
        "properties": {
          "layout": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Layout"
              }
            ]
          },
          "miner": {
            "$ref": "#/components/schemas/MinerConfigRaw"
          },
          "network": {
            "$ref": "#/components/schemas/NetworkConfFile"
          },
          "password": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/PasswordChange"
              }
            ]
          },
          "regional": {
            "$ref": "#/components/schemas/RegionalSettings"
          },
          "ui": {
            "$ref": "#/components/schemas/UiSettings"
          }
        }
      },
      "Warranty": {
        "type": "string",
        "enum": [
          "active",
          "inactive",
          "expired",
          "cancelled",
          "not_provided"
        ]
      },
      "WarrantyStatus": {
        "type": "object",
        "required": [
          "success"
        ],
        "properties": {
          "success": {
            "type": "boolean"
          },
          "warranty": {
            "$ref": "#/components/schemas/Warranty"
          }
        }
      }
    },
    "securitySchemes": {
      "apikeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-key"
      },
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}